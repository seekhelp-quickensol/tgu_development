<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class Ext_account_model extends CI_Model { 	public function get_ext_account_login(){  		$_GET = $_POST;		$this->db->where('is_deleted','0');		$this->db->where('status','1'); 		$this->db->where('email',$this->input->post('email'));		$this->db->where('password',$this->input->post('password'));		$result = $this->db->get('tbl_external_account_user');		$result = $result->row(); 		echo json_encode($result);	}	public function get_ext_update_password(){		$_GET = $_POST;		$data = array(			'password' => $this->input->post('password')		);		$this->db->where('id',$this->input->post('user_id'));		$this->db->update('tbl_external_account_user',$data);		return true;	}	public function get_ext_student_list(){		$_GET = $_POST;   		/*$this->db->where('doc_verify','0');  */		$this->db->select('tbl_student.*,tbl_course.course_name,tbl_stream.stream_name');		$this->db->where('tbl_student.verified_status','1');  		$this->db->where('tbl_student.admission_status !=','0');		$this->db->where('tbl_student.admission_status !=','2');		$this->db->where('tbl_student.confirm_tranasction','0');		if($this->input->post('session') !=""){			$this->db->where('tbl_student.session_id',$this->input->post('session'));		}		$this->db->join('tbl_course','tbl_course.id = tbl_student.course_id');		$this->db->join('tbl_stream','tbl_stream.id = tbl_student.stream_id');		$result = $this->db->get('tbl_student');		$result = $result->result();		echo json_encode($result);	}	public function get_ext_single_student_account(){		$_GET = $_POST;    		$this->db->select('tbl_student_fees.*,tbl_student.student_name');		$this->db->where('tbl_student_fees.student_id',$this->input->post('student_id')); 		//$this->db->where('tbl_student_fees.payment_status','1');  		$this->db->where('tbl_student_fees.is_deleted','0');  		$this->db->join('tbl_student','tbl_student.id = tbl_student_fees.student_id');		$result = $this->db->get('tbl_student_fees');		$result = $result->result();		echo json_encode($result);	}	public function get_ext_single_student_account_ledger(){		$_GET = $_POST;  		$student_fees = 0;		$course_fees = 0;		$final_student_fees = 0;				$this->db->where('id',$this->input->post('student_id'));		$result = $this->db->get('tbl_student');		$result = $result->row();		if(!empty($result)){			$this->db->where('is_deleted','0');			$this->db->where('status','1');			$this->db->where('course',$result->course_id);			$this->db->where('stream',$result->stream_id);			$relation = $this->db->get('tbl_course_stream_relation');			$relation = $relation->row();			if(!empty($relation)){				$this->db->where('session_id',$result->session_id);				$this->db->where('relation_id',$relation->id);				$this->db->where('course_id',$result->course_id);				$this->db->where('stream_id',$result->stream_id);				$course_fee = $this->db->get('tbl_fees_realtion');				$course_fee = $course_fee->row();				if(!empty($course_fee)){				    if($result->center_id == "1"){					    $course_fees =  $course_fee->campus_fees;				    }else{				        $course_fees =  $course_fee->fees;				    }				}else{					$this->db->where('relation_id',$relation->id);					$this->db->where('course_id',$result->course_id);					$this->db->where('stream_id',$result->stream_id);					$this->db->order_by('id','DESC');					$course_fee = $this->db->get('tbl_fees_realtion');					$course_fee = $course_fee->row();					if(!empty($course_fee)){						if($result->center_id == "1"){    					    $course_fees =  $course_fee->campus_fees;    				    }else{    				        $course_fees =  $course_fee->fees;    				    }					}				}			}			if($result->country != "101"){				$course_fees = $course_fees*2;			}			//echo $course_fees;exit;			$course_yearly_fees = $course_fees;			$course_halfyearly_fees = $course_fees/2;						if($result->admission_type == '0'){				if($result->course_mode == '1'){					$student_fees = $course_yearly_fees*$result->year_sem;				}else if($result->course_mode == '2'){										$student_fees = $course_yearly_fees*$result->year_sem;				}			}else{				if($result->course_mode == '1'){					$lateral_diffrent = $result->year_sem - $result->lateral_year;					$lateral_diffrent = $lateral_diffrent+1;					$student_fees = $course_yearly_fees*$lateral_diffrent;				}else if($result->course_mode == '2'){					$lateral_diffrent = $result->year_sem - $result->lateral_year;					$lateral_diffrent = $lateral_diffrent+1;					$student_fees = $course_yearly_fees*$lateral_diffrent;				}			}			if($result->center_id == '1'){				$final_student_fees = $student_fees;			}else if($result->center_id != '1'){				$center_share = $this->get_center_fees_sharing($result->center_id);								if($center_share != "0"){					$final_student_fees = ($center_share/100)*$student_fees;				}else{					$final_student_fees = $student_fees;				}				//$final_student_fees = $student_fees;			}			//echo $final_student_fees;exit;		}		echo json_encode($final_student_fees); 	}	public function get_center_fees_sharing($center_id){		$this->db->where('id',$center_id);		$result = $this->db->get('tbl_center');		$result = $result->row();		if(!empty($result)){			if($result->fee_share != ""){				return $result->fee_share;			}else{				return 0;			}		}else{			return 0;		}	}	public function get_ext_student_paid_addmission_fees(){		$_GET = $_POST;		$this->db->where('status','1'); 		$this->db->where('payment_status','1'); 		$this->db->where_in('fees_type',array(1,4));  		$this->db->where('student_id',$this->input->post('student_id'));		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_student_fees');		echo json_encode($result->result());	}	public function get_ext_student_paid_exam_fees(){		$_GET = $_POST; 		$this->db->where('status','1'); 		$this->db->where('payment_status','1'); 		$this->db->where('fees_type','2');  		$this->db->where('student_id',$this->input->post('student_id'));		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_student_fees');		echo json_encode($result->result());	}	 	public function get_ext_single_student_account_migration(){		$_GET = $_POST;    		$this->db->select('tbl_student_migration.*,tbl_student.student_name');		$this->db->where('tbl_student_migration.student_id',$this->input->post('student_id')); 		$this->db->where('tbl_student_migration.payment_status','1'); 		$this->db->where('tbl_student_migration.is_deleted','0'); 		$this->db->join('tbl_student','tbl_student.id = tbl_student_migration.student_id');		$result = $this->db->get('tbl_student_migration');		$result = $result->result();		echo json_encode($result);	}	public function get_ext_single_student_account_migration_details(){		$_GET = $_POST;    		$this->db->select('tbl_student_migration.*,tbl_student.student_name');		$this->db->where('tbl_student_migration.id',$this->input->post('id')); 		$this->db->where('tbl_student_migration.student_id',$this->input->post('student_id')); 		$this->db->where('tbl_student_migration.payment_status','1'); 		$this->db->where('tbl_student_migration.is_deleted','0'); 		$this->db->join('tbl_student','tbl_student.id = tbl_student_migration.student_id');		$result = $this->db->get('tbl_student_migration');		$result = $result->row();		echo json_encode($result);	}	public function get_ext_single_account(){		$_GET = $_POST;    		$this->db->select('tbl_student_fees.*,tbl_student.student_name');		$this->db->where('tbl_student_fees.id',$this->input->post('account_id')); 		$this->db->join('tbl_student','tbl_student.id = tbl_student_fees.student_id');		$result = $this->db->get('tbl_student_fees');		$result = $result->row();		echo json_encode($result);	}	public function get_ext_bank_account(){		$_GET = $_POST;     		$this->db->where('is_deleted','0');		$result = $this->db->get('tbl_bank');		$result = $result->result();		echo json_encode($result);	}	public function get_ext_get_unique_transaction(){		$this->db->where('is_deleted','0');		$this->db->where('payment_status','1');		$this->db->where('id !=',base64_decode($this->input->post('hidden_id')));		$this->db->where('transaction_id',$this->input->post('transaction_id'));		$result = $this->db->get('tbl_student_fees');		echo json_encode($result->num_rows());	}	public function set_ext_payment_details(){		$_GET = $_POST;  		if($this->input->post('reject') == "reject"){			$payment_status = '2';		}else{			$payment_status = $this->input->post('payment_status');		}		if($this->input->post('hidden_id') == ""){			if($this->input->post('payment_status') == "1"){				$verified_by_ext = '1';			}else{				$verified_by_ext = '0';			}			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'fees_type' 		=> $this->input->post('fees_type'),				'payment_mode' 		=> $this->input->post('payment_mode'),				'payment_date' 		=> date("Y-m-d",strtotime($this->input->post('payment_date'))),				'payment_status' 	=> $payment_status,				'transaction_id' 	=> $this->input->post('transaction_id'),				'bank_id' 			=> $this->input->post('bank_id'),				'late_fees' 		=> $this->input->post('late_fees'),				'lateral_entry_fees'=> $this->input->post('lateral_entry_fees'),				'bank_fees' 		=> $this->input->post('bank_fees'),				'registration_fees' => $this->input->post('registration_fees'),				'original_amount' 	=> $this->input->post('amount'),				'amount' 			=> $this->input->post('amount'),				'discount' 			=> $this->input->post('discount'),				'total_fees' 		=> $this->input->post('total_fees'),				'year_sem' 			=> $this->input->post('year_sem'),				'remark' 			=> $this->input->post('remark'),				'verified_by' 		=> $this->input->post('user_id'),				'verified_by_ext' 	=> $verified_by_ext,				'verified_date' 	=> date("Y-m-d"),				'created_on' 		=> date("Y-m-d H:i:s"),			);			$this->db->insert('tbl_student_fees',$data);		}else{			$this->db->where('id',$this->input->post('hidden_id'));			$result = $this->db->get('tbl_student_fees');			$result = $result->row();			$up_log = array(				'fees_id' 				=> $result->id,				'student_id' 			=> $result->student_id,				'fees_type' 			=> $result->fees_type,				'payment_mode' 			=> $result->payment_mode,				'payment_date' 			=> $result->payment_date,				'payment_status' 		=> $result->payment_status,				'transaction_id' 		=> $result->transaction_id,				'bank_id' 				=> $result->bank_id,				'late_fees' 			=> $result->late_fees,				'lateral_entry_fees' 	=> $result->lateral_entry_fees,				'bank_fees' 			=> $result->bank_fees,				'registration_fees' 	=> $result->registration_fees,				'original_amount' 		=> $result->original_amount,				'amount' 				=> $result->amount,				'discount' 				=> $result->discount,				'total_fees' 			=> $result->total_fees,				'year_sem' 				=> $result->year_sem,				'remark' 				=> $result->remark,				'examination_id' 		=> $result->examination_id,				'verified_by' 			=> $result->verified_by,				'verified_by_ext' 		=> $result->verified_by_ext,				'created_on' 			=> date("Y-m-d H:i:s"),			);			$this->db->insert('tbl_fees_verifiction_history',$up_log);			if($this->input->post('payment_status') == "1"){				$verified_by_ext = '1';			}else{				$verified_by_ext = '0';			} 			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'fees_type' 		=> $this->input->post('fees_type'),				'payment_mode' 		=> $this->input->post('payment_mode'),				'payment_date' 		=> date("Y-m-d",strtotime($this->input->post('payment_date'))),				'payment_status' 	=> $payment_status,				'transaction_id' 	=> $this->input->post('transaction_id'),				'bank_id' 			=> $this->input->post('bank_id'),				'late_fees' 		=> $this->input->post('late_fees'),				'lateral_entry_fees'=> $this->input->post('lateral_entry_fees'),				'bank_fees' 		=> $this->input->post('bank_fees'),				'registration_fees' => $this->input->post('registration_fees'),				'original_amount' 	=> $this->input->post('amount'),				'lateral_entry_fees'=> $this->input->post('lateral_entry_fees'),				'amount' 			=> $this->input->post('amount'),				'discount' 			=> $this->input->post('discount'),				'total_fees' 		=> $this->input->post('total_fees'),				'year_sem' 			=> $this->input->post('year_sem'),				'remark' 			=> $this->input->post('remark'),				'verified_by' 		=> $this->input->post('user_id'),				'verified_date' 	=> date("Y-m-d"),				'verified_by_ext' 	=> $verified_by_ext,			);			$this->db->where('id',$this->input->post('hidden_id'));			$this->db->update('tbl_student_fees',$data);		}		echo base64_encode($this->input->post('student_id'));	}	public function set_ext_migration_payment(){		$_GET = $_POST;  		if($this->input->post('reject') == "reject"){			$payment_status = '2';		}else{			$payment_status = $this->input->post('payment_status');		} 		if($this->input->post('payment_status') == "1"){			$verified_by_ext = '1';		}else{			$verified_by_ext = '0';		}  		$data = array( 			'created_on' 		=> date("Y-m-d",strtotime($this->input->post('payment_date')))." 13:43:00",			'payment_status' 	=> $payment_status,			'transaction_id' 	=> $this->input->post('transaction_id'), 			'amount' 			=> $this->input->post('total_fees'), 			'remark' 			=> $this->input->post('remark'),			'verified_by' 		=> $this->input->post('user_id'),			'verified_by_ext' 	=> $verified_by_ext,			'verified_date' 	=> date("Y-m-d"), 		);		$this->db->where('id',$this->input->post('hidden_id'));		$this->db->update('tbl_student_migration',$data);		echo base64_encode($this->input->post('student_id'));		}		public function get_ext_get_my_verified_list(){		$_GET = $_POST;     		$this->db->select('tbl_stream.stream_name,tbl_course.course_name,tbl_student_fees.*,tbl_student.student_name,tbl_student.father_name,tbl_student.mother_name,tbl_student.mobile,tbl_student.email,tbl_student.enrollment_number');		$this->db->where('tbl_student_fees.is_deleted','0');		$this->db->where('tbl_student.confirm_tranasction','1');		$this->db->where('tbl_student_fees.verified_by',$this->input->post('user_id'));		$this->db->join('tbl_student','tbl_student.id = tbl_student_fees.student_id');		$this->db->join('tbl_course','tbl_course.id = tbl_student.course_id');		$this->db->join('tbl_stream','tbl_stream.id = tbl_student.stream_id');		$this->db->order_by('tbl_student_fees.updated_on','DESC');		$this->db->group_by('tbl_student_fees.student_id');		$result = $this->db->get('tbl_student_fees');		$result = $result->result();		echo json_encode($result);	}	public function get_ext_delete_transaction(){ 		$_GET = $_POST;		$data = array(			'is_deleted' => '1',			'verified_by' => $this->input->post('user_id'),		);		$this->db->where('id',$this->input->post('id'));		$this->db->where('student_id',$this->input->post('student_id'));		$this->db->update('tbl_student_fees',$data);		echo base64_encode($this->input->post('student_id'));	} 	public function get_ext_confrom_all_verified(){ 		$_GET = $_POST;		$data = array(			'confirm_tranasction' => '1',			'confirmed_by' => $this->input->post('user_id'),		); 		$this->db->where('id',$this->input->post('student_id'));		$this->db->update('tbl_student',$data);		echo base64_encode($this->input->post('student_id'));	}	public function get_ext_delete_migration_fees(){ 		$_GET = $_POST;		$data = array(			'is_deleted' => '1',			'verified_by' => $this->input->post('user_id'),		);		$this->db->where('id',$this->input->post('id'));		$this->db->where('student_id',$this->input->post('student_id'));		$this->db->update('tbl_student_migration',$data);		echo base64_encode($this->input->post('student_id'));	}	public function get_ext_delete_provisional_degree(){ 		$_GET = $_POST;		$data = array(			'is_deleted' => '1',			'verified_by' => $this->input->post('user_id'),		);		$this->db->where('id',$this->input->post('id'));		$this->db->where('student_id',$this->input->post('student_id'));		$this->db->update('tbl_student_provisional_degree',$data);		echo base64_encode($this->input->post('student_id'));	}	public function get_ext_single_student_account_provisional(){		$_GET = $_POST;    		$this->db->select('tbl_student_provisional_degree.*,tbl_student.student_name');		$this->db->where('tbl_student_provisional_degree.student_id',$this->input->post('student_id')); 		$this->db->where('tbl_student_provisional_degree.is_deleted','0'); 		$this->db->where('tbl_student_provisional_degree.payment_status','1'); 		$this->db->join('tbl_student','tbl_student.id = tbl_student_provisional_degree.student_id');		$result = $this->db->get('tbl_student_provisional_degree');		$result = $result->result();		echo json_encode($result);	}	public function get_ext_single_student_account_provisional_degree_details(){		$_GET = $_POST;    		$this->db->select('tbl_student_provisional_degree.*,tbl_student.student_name');		$this->db->where('tbl_student_provisional_degree.id',$this->input->post('id')); 		$this->db->where('tbl_student_provisional_degree.student_id',$this->input->post('student_id')); 		$this->db->where('tbl_student_provisional_degree.is_deleted','0'); 		$this->db->where('tbl_student_provisional_degree.payment_status','1'); 		$this->db->join('tbl_student','tbl_student.id = tbl_student_provisional_degree.student_id');		$result = $this->db->get('tbl_student_provisional_degree');		$result = $result->row();		echo json_encode($result);	}	public function set_ext_provisional_degree_payment(){		$_GET = $_POST;  		if($this->input->post('reject') == "reject"){			$payment_status = '2';		}else{			$payment_status = $this->input->post('payment_status');		} 		if($this->input->post('payment_status') == "1"){			$verified_by_ext = '1';		}else{			$verified_by_ext = '0';		}  		$data = array( 			'payment_date' 		=> date("Y-m-d",strtotime($this->input->post('payment_date')))." 13:43:00",			'payment_status' 	=> $payment_status,			'transaction_id' 	=> $this->input->post('transaction_id'), 			'amount' 			=> $this->input->post('total_fees'), 			'remark' 			=> $this->input->post('remark'),			'verified_by' 		=> $this->input->post('user_id'),			'verified_by_ext' 	=> $verified_by_ext,			'verified_date' 	=> date("Y-m-d"), 		);				$this->db->where('id',$this->input->post('hidden_id'));		$this->db->update('tbl_student_provisional_degree',$data);		echo base64_encode($this->input->post('student_id'));		}
}