<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class External_account_model extends CI_Model { 	public function get_emp_unique_email(){		if($this->input->post('id') !=""){			$this->db->where('id !=',$this->input->post('id'));		}		$this->db->where('email',$this->input->post('email'));		$this->db->where('is_deleted','0');		$result = $this->db->get('tbl_external_account_user');		echo $result->num_rows();	}	public function get_emp_unique_contact_number(){		if($this->input->post('id') !=""){			$this->db->where('id !=',$this->input->post('id'));		}		$this->db->where('mobile_number',$this->input->post('mobile_number'));		$this->db->where('is_deleted','0');		$result = $this->db->get('tbl_external_account_user');		echo $result->num_rows();	}	public function get_single_user(){		$this->db->where('is_deleted','0');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_external_account_user');		return $result->row();	}	public function set_verification_user(){		$data = array(			'name' 			=> $this->input->post('name'),			'email' 		=> $this->input->post('email'),			'mobile_number' => $this->input->post('mobile_number'), 			'alternate_number' => $this->input->post('alternate_number'), 			'address' 		=> $this->input->post('address'), 		);		if($this->input->post('id') == ""){			$date = array(				'password' 		=> $this->input->post('password'),				'created_on'	=> date("Y-m-d H:i:s")			);			$new_data = array_merge($data,$date);			$this->db->insert('tbl_external_account_user',$new_data);			return 0;		}else{			$this->db->where('id',$this->input->post('id'));			$this->db->update('tbl_external_account_user',$data);			return 1;		}	}	public function get_all_verification_external_ajax($length,$start,$search){ 		$this->db->where('is_deleted','0'); 		if($search !=""){			$this->db->group_start();			$this->db->or_like('name',$search);			$this->db->or_like('email',$search);			$this->db->or_like('mobile_number',$search);			$this->db->or_like('alternate_number',$search);			$this->db->group_end();		} 		$this->db->order_by('id','ASC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_external_account_user');		return $result->result();	}	public function get_all_verification_external_count($search){		$this->db->where('is_deleted','0'); 		if($search !=""){			$this->db->group_start();			$this->db->or_like('name',$search);			$this->db->or_like('email',$search);			$this->db->or_like('mobile_number',$search);			$this->db->or_like('alternate_number',$search);			$this->db->group_end();		} 		$this->db->order_by('id','ASC'); 		$result = $this->db->get('tbl_external_account_user');		return $result->num_rows();	}	public function get_verified_account_list(){		$this->db->select('tbl_student_fees.*,tbl_external_account_user.name');		$this->db->where('tbl_student_fees.is_deleted','0');		$this->db->where('tbl_student_fees.verified_by_ext','1');		$this->db->order_by('tbl_student_fees.updated_on','DESC');		$this->db->join('tbl_student_fees','tbl_student_fees.verified_by = tbl_external_account_user.id');		$result = $this->db->get('tbl_student_fees');		return $result->result();	}	public function get_all_verified_transactions($length,$start,$search){		$this->db->select('tbl_student_fees.*,tbl_external_account_user.name,tbl_student.confirm_date,tbl_student.enrollment_number,tbl_student.student_name');		$this->db->where('tbl_student_fees.is_deleted','0');		$this->db->where('tbl_student.confirm_tranasction','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_student.student_name',$search);			$this->db->or_like('tbl_student.enrollment_number',$search);			$this->db->or_like('tbl_external_account_user.name',$search); 			$this->db->or_like('tbl_student_fees.transaction_id',$search); 			$this->db->group_end();		}		$this->db->order_by('tbl_student_fees.updated_on','DESC');		$this->db->join('tbl_student','tbl_student.id = tbl_student_fees.student_id');		$this->db->join('tbl_external_account_user','tbl_external_account_user.id = tbl_student.confirmed_by');		$this->db->group_by('tbl_student_fees.student_id');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_student_fees');		return $result->result();			}	public function get_all_verified_transactions_count($search){		$this->db->select('tbl_student_fees.*,tbl_external_account_user.name,tbl_student.enrollment_number,tbl_student.student_name');		$this->db->where('tbl_student_fees.is_deleted','0');		$this->db->where('tbl_student.confirm_tranasction','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_student.student_name',$search);			$this->db->or_like('tbl_student.enrollment_number',$search);			$this->db->or_like('tbl_external_account_user.name',$search); 			$this->db->or_like('tbl_student_fees.transaction_id',$search); 			$this->db->group_end();		}		$this->db->order_by('tbl_student_fees.updated_on','DESC'); 		$this->db->group_by('tbl_student_fees.student_id'); 		$this->db->join('tbl_student','tbl_student.id = tbl_student_fees.student_id');		$this->db->join('tbl_external_account_user','tbl_external_account_user.id = tbl_student.confirmed_by');		$result = $this->db->get('tbl_student_fees');		return $result->num_rows();	}	public function get_transaction_list(){		$this->db->select('tbl_student_fees.*,tbl_external_account_user.name,tbl_student.enrollment_number,tbl_student.student_name');		$this->db->where('tbl_student_fees.student_id',$this->uri->segment(2)); 		$this->db->where('tbl_student_fees.is_deleted','0'); 		$this->db->where('tbl_student_fees.status','1'); 		$this->db->join('tbl_external_account_user','tbl_external_account_user.id = tbl_student_fees.verified_by');		$this->db->join('tbl_student','tbl_student.id = tbl_student_fees.student_id');		$result = $this->db->get('tbl_student_fees');		return $result->result();	}	}