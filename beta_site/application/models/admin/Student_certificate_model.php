<?php if (! defined('BASEPATH')) exit('No direct script access allowed');class Student_certificate_model extends CI_Model{	public function get_print_transfer_regular_certificate($id)	{		//echo $this->uri->segment(1);exit;		// echo"<pre>";print_r($id);exit;		$this->db->select('tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_student_transfer.*,tbl_student.student_name,tbl_student.father_name,tbl_student.gender,tbl_student.enrollment_number,tbl_course.print_name as course_name,tbl_stream.stream_name,tbl_student.date_of_birth');		$this->db->where('tbl_student_transfer.is_deleted', '0');		if ($this->uri->segment(1) == 'get_printing_transfer_certificate_student_login') {			$this->db->where('tbl_student_transfer.student_id', $id);		} else {			$this->db->where('tbl_student_transfer.id', $id);		}		$this->db->join('tbl_student', 'tbl_student.id = tbl_student_transfer.student_id', 'left');		$this->db->join('tbl_course', 'tbl_course.id = tbl_student.course_id', 'left');		$this->db->join('tbl_stream', 'tbl_stream.id = tbl_student.stream_id', 'left');		$this->db->join('tbl_signature', 'tbl_signature.id = tbl_student_transfer.signature_id', 'left');		$result = $this->db->get('tbl_student_transfer');		$result = $result->row();		return $result;		// echo"<pre>";print_r($result);exit;		/*if(!empty($result)){			$result->logo = $this->Digitalocean_model->get_photo('images/new_marksheet-without.jpeg');			$result->top_logo = $this->Digitalocean_model->get_photo('images/only-logo.png');			$result->spacial_officer = $this->Digitalocean_model->get_photo('images/spacial_officer.png');		}*/	}	// public function get_all_migration_certificate_requests_list($length,$start,$search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	$this->db->where('tbl_student_migration.approve_status','0');	// 	//$this->db->where('tbl_student_migration.payment_status','1');	// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$this->db->limit($length,$start);	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->result();			// }	// public function get_all_migration_certificate_requests_list_count($search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	$this->db->where('tbl_student_migration.approve_status','0');	// 	//$this->db->where('tbl_student_migration.payment_status','1');	// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->num_rows();	// }	public function get_all_migration_certificate_requests_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_student_migration.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name,'Migration Certificate' as certificate_type, 'student_migration_certificate_add_requests' as certificate_link");		$this->db->where('tbl_student_migration.is_deleted', '0');		//$this->db->where('tbl_student_migration.status','0');		$this->db->where('tbl_student_migration.approve_status', '0');		if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_migration.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_migration.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_migration.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_migration.transaction_id', $search);			$this->db->or_like('tbl_student_migration.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Migration Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_migration.student_id");		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_migration.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_student_migration');		return $result->result();	}	// public function get_all_migration_certificate_requests_list($length,$start,$search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	//$this->db->where('tbl_student_migration.status','0');	// 	$this->db->where('tbl_student_migration.payment_status','0');	// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$this->db->limit($length,$start);	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->result();			// }	public function get_all_migration_certificate_requests_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_student_migration.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name,'Migration Certificate' as certificate_type, 'student_migration_certificate_add_requests' as certificate_link");		$this->db->where('tbl_student_migration.is_deleted', '0');		//$this->db->where('tbl_student_migration.status','0');		$this->db->where('tbl_student_migration.approve_status', '0');		if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_migration.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_migration.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_migration.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_migration.transaction_id', $search);			$this->db->or_like('tbl_student_migration.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Migration Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_migration.student_id");		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_migration.id', 'DESC');		$result = $this->db->get('tbl_student_migration');		return $result->num_rows();	}	// public function get_all_migration_certificate_requests_list_count($search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	//$this->db->where('tbl_student_migration.status','0');	// 	$this->db->where('tbl_student_migration.payment_status','0');	// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->num_rows();	// }	// public function get_single_migration(){	// 	$this->db->where('id',$this->uri->segment(2));	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->row();	// }	// public function update_migration_issue_date(){	//     $data = array(	//         'approve_status' => '1',	//         "status"=>'1',	//         'issue_date' => date("Y-m-d",strtotime($this->input->post('issue_date'))),	//         );	//     $this->db->where('id',$this->input->post('id'));	//     $this->db->update('tbl_student_migration',$data);	//     return true;	// }	// public function verify_student_migration_requests(){	// 	$data = array(	// 		"status"=>'1'	// 	);	// 	$this->db->where("id",$this->uri->segment(2));	// 	$this->db->update("tbl_student_migration",$data);	// }	// public function unverify_student_migration_certificate(){	// 	$data = array(	// 		"status"=>'0'	// 	);	// 	$this->db->where("id",$this->uri->segment(2));	// 	$this->db->update("tbl_student_migration",$data);	// }	public function get_single_migration()	{		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_student_migration');		return $result->row();	}	public function update_migration_issue_date()	{		$data = array(			'approve_status' => '1',			"status" => '1',			'issue_date' => date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_student_migration', $data);		return true;	}	public function verify_student_migration_requests()	{		$data = array(			"status" => '1'		);		$this->db->where("id", $this->uri->segment(2));		$this->db->update("tbl_student_migration", $data);	}	public function unverify_student_migration_certificate()	{		$data = array(			"approve_status" => '0'		);		$this->db->where("id", $this->uri->segment(2));		$this->db->update("tbl_student_migration", $data);	}	// public function get_all_migration_certificates_list($length,$start,$search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	$this->db->where('tbl_student_migration.status','1');	// 	$this->db->where('tbl_student_migration.payment_status','1');			// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->or_like('tbl_center.center_name',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->join("tbl_center","tbl_center.id = tbl_student.center_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$this->db->limit($length,$start);	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->result();			// }	// public function get_all_migration_certificates_list_count($search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	$this->db->where('tbl_student_migration.status','1');	// 	$this->db->where('tbl_student_migration.payment_status','1');	// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->or_like('tbl_center.center_name',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->join("tbl_center","tbl_center.id = tbl_student.center_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->num_rows();	// }	// public function get_all_migration_certificates_list($length,$start,$search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	$this->db->where('tbl_student_migration.approve_status','1');	// 	$this->db->where('tbl_student_migration.payment_status','1');			// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->or_like('tbl_center.center_name',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->join("tbl_center","tbl_center.id = tbl_student.center_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$this->db->limit($length,$start);	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->result();			// }	public function get_all_migration_certificates_list($length, $start, $search)	{		$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");		$this->db->where('tbl_student_migration.is_deleted', '0');		$this->db->where('tbl_student_migration.approve_status', '1');		$this->db->where('tbl_student_migration.payment_status', '1');		if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_migration.transaction_id', $search);			$this->db->or_like('tbl_student_migration.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_migration.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_migration.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_migration');		return $result->result();	}	public function get_all_migration_certificates_list_count($search)	{		$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");		$this->db->where('tbl_student_migration.is_deleted', '0');		$this->db->where('tbl_student_migration.approve_status', '1');		$this->db->where('tbl_student_migration.payment_status', '1');		if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_migration.transaction_id', $search);			$this->db->or_like('tbl_student_migration.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_migration.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_migration.id', 'DESC');		$result = $this->db->get('tbl_student_migration');		return $result->num_rows();	}	// public function get_all_migration_certificates_list_count($search){	// 	$this->db->select("tbl_student_migration.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");	// 	$this->db->where('tbl_student_migration.is_deleted','0');	// 	$this->db->where('tbl_student_migration.approve_status','1');	// 	$this->db->where('tbl_student_migration.payment_status','1');	// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name',$search);	// 		$this->db->or_like('tbl_student.enrollment_number',$search);	// 		$this->db->or_like('tbl_student_migration.transaction_id',$search);	// 		$this->db->or_like('tbl_student_migration.created_on',$search);	// 		$this->db->or_like('tbl_center.center_name',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.id = tbl_student_migration.student_id");	// 	$this->db->join("tbl_center","tbl_center.id = tbl_student.center_id");	// 	$this->db->order_by('tbl_student_migration.id','DESC');	// 	$result = $this->db->get('tbl_student_migration');	// 	return $result->num_rows();	// }	public function student_migration_send_to_print()	{		$print_ids = $this->input->post('print_id');		for ($i = 0; $i < count($print_ids); $i++) {			$data = array(				'sent_for_print'	=>	'1',			);			$this->db->where('id', $print_ids[$i]);			$this->db->update('tbl_student_migration', $data);		}		return true;	}	public function student_transfer_cer_send_to_print()	{		$print_ids = $this->input->post('print_id');		for ($i = 0; $i < count($print_ids); $i++) {			$data = array(				'sent_for_print'	=>	'1',			);			$this->db->where('id', $print_ids[$i]);			$this->db->update('tbl_student_transfer', $data);		}		return true;	}	public function student_transcript_send_to_print()	{		$print_ids = $this->input->post('print_id');		for ($i = 0; $i < count($print_ids); $i++) {			$data = array(				'sent_for_print'	=>	'1',			);			$this->db->where('id', $print_ids[$i]);			$this->db->update('tbl_transcript', $data);		}		return true;	}	public function student_degree_send_to_print()	{		$print_ids = $this->input->post('print_id');		for ($i = 0; $i < count($print_ids); $i++) {			$data = array(				'sent_for_print'	=>	'1',			);			$this->db->where('id', $print_ids[$i]);			$this->db->update('tbl_student_degree', $data);		}		return true;	}	public function student_prov_degree_send_to_print()	{		$print_ids = $this->input->post('print_id');		for ($i = 0; $i < count($print_ids); $i++) {			$data = array(				'sent_for_print'	=>	'1',			);			$this->db->where('id', $print_ids[$i]);			$this->db->update('tbl_student_provisional_degree', $data);		}		return true;	}	public function student_consolidated_send_to_print()	{		$print_ids = $this->input->post('print_id');		for ($i = 0; $i < count($print_ids); $i++) {			$data = array(				'sent_for_print'	=>	'1',			);			$this->db->where('id', $print_ids[$i]);			$this->db->update('tbl_consolidated_marksheet', $data);		}		return true;	}	public function approve_student_transfer_certificate_requests()	{		$data = array(			"reason_of_transfer" => $this->input->post("reason_of_transfer"),			"character_conduct" => $this->input->post("character_conduct"),			"status" => "1",		);		$this->db->where("id", $this->input->post("id"));		$this->db->update("tbl_student_transfer", $data);	}	public function get_all_transfer_certificate_requests_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_student_transfer.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_center.center_name,'Transfer Certificate' as certificate_type, 'approved_student_certificate' as certificate_link");		$this->db->where('tbl_student_transfer.is_deleted', '0');		$this->db->where('tbl_student_transfer.approve_status', '0');		//$this->db->where('tbl_student_transfer.payment_status','1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_transfer.payment_status', $this->input->post('payment_status'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_transfer.transaction_id', $search);			$this->db->or_like('tbl_student_transfer.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Transfer Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_transfer.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_transfer.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_transfer.student_id", 'left');		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id", 'left');		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_transfer.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_student_transfer');		return $result->result();	}	public function get_all_transfer_certificate_requests_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_student_transfer.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_center.center_name,'Transfer Certificate' as certificate_type, 'approved_student_certificate' as certificate_link");		$this->db->where('tbl_student_transfer.is_deleted', '0');		$this->db->where('tbl_student_transfer.approve_status', '0');		//$this->db->where('tbl_student_transfer.payment_status','1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_transfer.payment_status', $this->input->post('payment_status'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_transfer.transaction_id', $search);			$this->db->or_like('tbl_student_transfer.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Transfer Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_transfer.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_transfer.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_transfer.student_id", 'left');		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id", 'left');		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_transfer.id', 'DESC');		$result = $this->db->get('tbl_student_transfer');		return $result->num_rows();	}	public function get_single_transfer()	{		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_student_transfer');		return $result->row();	}	public function update_transfer_issue_date()	{		$data = array(			'transaction_id' => $this->input->post('transaction_id'),			'approve_status' => $this->input->post('approve_status'),			'amount' => $this->input->post('amount'),			'payment_status' => $this->input->post('payment_status'),			'signature_id' => $this->input->post('signature'),			"status" => '1',			'issue_date' => date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_student_transfer', $data);		return true;	}	public function get_all_appproved_student_transfer_certificate_list($length, $start, $search)	{		$this->db->select("tbl_student_transfer.*,tbl_student.pcc,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_transfer.is_deleted', '0');		$this->db->where('tbl_student_transfer.status', '1');		$this->db->where('tbl_student_transfer.payment_status', '1');		$this->db->where('tbl_student_transfer.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_transfer.transaction_id', $search);			$this->db->or_like('tbl_student_transfer.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_transfer.student_id");		$this->db->order_by('tbl_student_transfer.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_transfer');		return $result->result();	}	public function get_all_appproved_student_transfer_certificate_list_count($search)	{		$this->db->select("tbl_student_transfer.*,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_transfer.is_deleted', '0');		$this->db->where('tbl_student_transfer.status', '1');		$this->db->where('tbl_student_transfer.payment_status', '1');		$this->db->where('tbl_student_transfer.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_transfer.transaction_id', $search);			$this->db->or_like('tbl_student_transfer.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_transfer.student_id");		$this->db->order_by('tbl_student_transfer.id', 'DESC');		$result = $this->db->get('tbl_student_transfer');		return $result->num_rows();	}	public function unapproved_student_transfer_certificate()	{		$this->db->where("id", $this->uri->segment(2));		$this->db->update("tbl_student_transfer", array("status" => '0'));	}	public function get_all_student_recommendation_letter_requests_list($length, $start, $search)	{		$this->db->select("tbl_student_recommendation_letter.*,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_recommendation_letter.is_deleted', '0');		$this->db->where('tbl_student_recommendation_letter.status', '0');		$this->db->where('tbl_student_recommendation_letter.payment_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_recommendation_letter.transaction_id', $search);			$this->db->or_like('tbl_student_recommendation_letter.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_recommendation_letter.student_id");		$this->db->order_by('tbl_student_recommendation_letter.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_recommendation_letter');		return $result->result();	}	public function get_all_student_recommendation_letter_requests_list_count($search)	{		$this->db->select("tbl_student_recommendation_letter.*,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_recommendation_letter.is_deleted', '0');		$this->db->where('tbl_student_recommendation_letter.status', '0');		$this->db->where('tbl_student_recommendation_letter.payment_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_recommendation_letter.transaction_id', $search);			$this->db->or_like('tbl_student_recommendation_letter.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_recommendation_letter.student_id");		$this->db->order_by('tbl_student_recommendation_letter.id', 'DESC');		$result = $this->db->get('tbl_student_recommendation_letter');		return $result->num_rows();	}	public function approve_student_recommendation_letter()	{		$data = array(			"status" => "1"		);		$this->db->where("id", $this->uri->segment(2));		$this->db->update("tbl_student_recommendation_letter", $data);	}	public function unapproved_student_recommendation_letter()	{		$data = array(			"status" => "0"		);		$this->db->where("id", $this->uri->segment(2));		$this->db->update("tbl_student_recommendation_letter", $data);	}	public function get_all_approved_student_recommendation_letter_list($length, $start, $search)	{		$this->db->select("tbl_student_recommendation_letter.*,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_recommendation_letter.is_deleted', '0');		$this->db->where('tbl_student_recommendation_letter.status', '1');		$this->db->where('tbl_student_recommendation_letter.payment_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_recommendation_letter.transaction_id', $search);			$this->db->or_like('tbl_student_recommendation_letter.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_recommendation_letter.student_id");		$this->db->order_by('tbl_student_recommendation_letter.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_recommendation_letter');		return $result->result();	}	public function get_all_approved_student_recommendation_letter_list_count($search)	{		$this->db->select("tbl_student_recommendation_letter.*,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_recommendation_letter.is_deleted', '0');		$this->db->where('tbl_student_recommendation_letter.status', '1');		$this->db->where('tbl_student_recommendation_letter.payment_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_recommendation_letter.transaction_id', $search);			$this->db->or_like('tbl_student_recommendation_letter.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_recommendation_letter.student_id");		$this->db->order_by('tbl_student_recommendation_letter.id', 'DESC');		$result = $this->db->get('tbl_student_recommendation_letter');		return $result->num_rows();	}	public function get_all_student_degree_requests_list($length, $start, $search)	{		$this->db->select("tbl_student_degree.*,tbl_student.student_name,tbl_course.course_name,tbl_stream.stream_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_center.center_name,'Degree Certificate' as certificate_type, 'approved_student_degree_request' as certificate_link");		$this->db->where('tbl_student_degree.is_deleted', '0');		$this->db->where('tbl_student_degree.approve_status', '0');		$this->db->where('tbl_student_degree.payment_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_degree.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_degree.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_degree.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_degree.transaction_id', $search);			$this->db->or_like('tbl_student_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_like('tbl_course.course_name', $search);			$this->db->or_like('tbl_stream.stream_name', $search);			$this->db->or_where('\'Degree Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_degree.id', 'DESC');		$this->db->group_by('tbl_student_degree.student_id');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_student_degree');		return $result->result();	}	public function get_all_student_degree_requests_list_count($search)	{		$this->db->select("tbl_student_degree.*,tbl_student.student_name,tbl_course.course_name,tbl_stream.stream_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_center.center_name,'Degree Certificate' as certificate_type, 'approved_student_degree_request' as certificate_link");		$this->db->where('tbl_student_degree.is_deleted', '0');		$this->db->where('tbl_student_degree.approve_status', '0');		$this->db->where('tbl_student_degree.payment_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_degree.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_degree.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_degree.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_degree.transaction_id', $search);			$this->db->or_like('tbl_student_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_like('tbl_course.course_name', $search);			$this->db->or_like('tbl_stream.stream_name', $search);			$this->db->or_where('\'Degree Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_degree.id', 'DESC');		$this->db->group_by('tbl_student_degree.student_id');		$result = $this->db->get('tbl_student_degree');		return $result->num_rows();	}	public function get_all_student_degree_failed_list($length, $start, $search)	{		$this->db->select("tbl_student_degree.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_student_degree.is_deleted', '0');		// $this->db->where('tbl_student_degree.payment_status','0');		// $this->db->where_in('tbl_student_degree.approve_status',array('0','1'));		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		$this->db->group_start();		$this->db->where('tbl_student_degree.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_student_degree.approve_status', '0');		$this->db->or_where('tbl_student_degree.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_student_degree.payment_status', '1');		$this->db->where('tbl_student_degree.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_degree.transaction_id', $search);			$this->db->or_like('tbl_student_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_degree.id', 'DESC');		$this->db->group_by('tbl_student_degree.student_id');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_degree');		return $result->result();	}	public function get_all_student_degree_failed_list_count($search)	{		$this->db->select("tbl_student_degree.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_student_degree.is_deleted', '0');		// $this->db->where('tbl_student_degree.payment_status','0');		// $this->db->where_in('tbl_student_degree.approve_status',array('0','1'));		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		$this->db->group_start();		$this->db->where('tbl_student_degree.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_student_degree.approve_status', '0');		$this->db->or_where('tbl_student_degree.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_student_degree.payment_status', '1');		$this->db->where('tbl_student_degree.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_degree.transaction_id', $search);			$this->db->or_like('tbl_student_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_degree.id', 'DESC');		$this->db->group_by('tbl_student_degree.student_id');		$result = $this->db->get('tbl_student_degree');		return $result->num_rows();	}	// public function approved_student_degree_request(){	// 	$data = array(	// 		"status"=>"1"	// 	);	// 	$this->db->where("id",$this->uri->segment(2));	// 	$this->db->update("tbl_student_degree",$data);	// }	public function update_degree_issue_date()	{		$data = array(			'approve_status' 		=> $this->input->post('approve_status'),			"transaction_id" 		=> $this->input->post('transaction_id'),			"payment_status" 		=> $this->input->post('payment_status'),			"amount" 				=> $this->input->post('amount'),			"signature_id" 			=> $this->input->post('signature'),			"chancellor_signature_id" => $this->input->post('chancellor_signature'),			'issue_date' 			=> date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		// echo "<pre>";print_r($data);exit;		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_student_degree', $data);		return true;	}	public function get_single_degree()	{		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_student_degree');		return $result->row();	}	public function unapproved_student_degree()	{		$data = array(			// "status"=>"0"			"approve_status" => "0"  //		);		$this->db->where("id", $this->uri->segment(2));		$this->db->update("tbl_student_degree", $data);	}	public function get_student_degree($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_chancellor_signature.name as chancellor_signture_name,tbl_chancellor_signature.dispalay_signature as display_chacellor_signature,tbl_chancellor_signature.signature as chancellor_signature,tbl_student_degree.*,tbl_student.student_name,tbl_student.course_id,tbl_student.stream_id,tbl_student.father_name,tbl_student.enrollment_number,tbl_student.photo,tbl_session.session_start_date,tbl_course.course_name,tbl_course.print_name,tbl_stream.stream_name");		$this->db->where("tbl_student_degree.is_deleted", "0");		$this->db->where("tbl_student_degree.payment_status", "1");		$this->db->where("tbl_student_degree.id", $id);		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_session", "tbl_session.id = tbl_student.session_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_student_degree.signature_id", "left");		$this->db->join("tbl_signature as tbl_chancellor_signature", "tbl_chancellor_signature.id = tbl_student_degree.chancellor_signature_id", "left");		$result = $this->db->get("tbl_student_degree")->row();		return $result;		// echo "<pre>";print_r($result);exit;	}	public function get_year_duration($course, $stream)	{		$this->db->where('course', $course);		$this->db->where('stream', $stream);		$this->db->where('is_deleted', '0');		$result = $this->db->get('tbl_course_stream_relation');		return $result->row();	}	public function set_degree_print_date()	{		$data = array(			'print_date' => date('jS F Y', strtotime($this->input->post('print_date')))		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_student_degree', $data);		return true;	}	public function get_student_division_for_degree_new_degree($student_id)	{		$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");		$this->db->where("is_deleted", "0");		$this->db->where("status", "1");		$this->db->where("result", "0");		$this->db->where("student_id", $student_id);		$this->db->order_by("year_sem", "DESC");		$result = $this->db->get("tbl_exam_results");		$result = $result->result();		$total_marks = 0;		$gained_marks = 0;		$data = array();		if (!empty($result)) {			foreach ($result as $res) {				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			}			$percentage = $total_marks == 0 ? 0 : ($gained_marks / $total_marks) * 100;			if ($percentage >= 60) {				$data["division"] = "First ";			} else if ($percentage < 60 & $percentage >= 45) {				$data["division"] = "Second ";			} else {				$data["division"] = "Third ";			}			$data["date"] = $result[0]->examination_year;			return $data;		}	}	public function get_all_approved_student_degree_list($length, $start, $search)	{		$this->db->select("tbl_student_degree.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_student_degree.is_deleted', '0');		// $this->db->where('tbl_student_degree.status','1');		$this->db->where('tbl_student_degree.status', '1');		$this->db->where('tbl_student_degree.payment_status', '1');		$this->db->where('tbl_student_degree.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_degree.transaction_id', $search);			$this->db->or_like('tbl_student_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_degree.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_degree');		return $result->result();	}	public function get_all_approved_student_degree_list_count($search)	{		$this->db->select("tbl_student_degree.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_student_degree.is_deleted', '0');		// $this->db->where('tbl_student_degree.status','1');		$this->db->where('tbl_student_degree.status', '1');		$this->db->where('tbl_student_degree.payment_status', '1');		$this->db->where('tbl_student_degree.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_degree.transaction_id', $search);			$this->db->or_like('tbl_student_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_degree.id', 'DESC');		$result = $this->db->get('tbl_student_degree');		return $result->num_rows();	}	public function get_all_student_provisional_degree_requests_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_student_provisional_degree.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_center.center_name,'Provisional Degree Certificate' as certificate_type, 'apply_student_provisional_degrees' as certificate_link");		$this->db->where('tbl_student_provisional_degree.is_deleted', '0');		$this->db->where('tbl_student_provisional_degree.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_provisional_degree.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_provisional_degree.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_provisional_degree.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_provisional_degree.transaction_id', $search);			$this->db->or_like('tbl_student_provisional_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Provisional Degree Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_provisional_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id", "left");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_provisional_degree.id', 'DESC');		$this->db->group_by('tbl_student_provisional_degree.student_id');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_student_provisional_degree');		return $result->result();	}	public function get_all_student_provisional_degree_requests_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_student_provisional_degree.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_center.center_name,'Provisional Degree Certificate' as certificate_type, 'apply_student_provisional_degrees' as certificate_link");		$this->db->where('tbl_student_provisional_degree.is_deleted', '0');		$this->db->where('tbl_student_provisional_degree.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_student_provisional_degree.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_student_provisional_degree.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_student_provisional_degree.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_provisional_degree.transaction_id', $search);			$this->db->or_like('tbl_student_provisional_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Provisional Degree Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_provisional_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id", "left");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_student_provisional_degree.id', 'DESC');		$this->db->group_by('tbl_student_provisional_degree.student_id');		$result = $this->db->get('tbl_student_provisional_degree');		return $result->num_rows();	}	public function update_provisional_degree_issue_date()	{		$data = array(			'approve_status' => '1',			"status" => '1',			'issue_date' => date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_student_provisional_degree', $data);		return true;	}	public function get_single_provisional_degree()	{		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_student_provisional_degree');		return $result->row();	}	public function get_all_approved_student_provisional_degrees_list($length, $start, $search)	{		$this->db->select("tbl_student_provisional_degree.*,tbl_student.username,tbl_student.password,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_student_provisional_degree.is_deleted', '0');		// $this->db->where('tbl_student_provisional_degree.status','1');		$this->db->where('tbl_student_provisional_degree.payment_status', '1');		$this->db->where('tbl_student_provisional_degree.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_provisional_degree.transaction_id', $search);			$this->db->or_like('tbl_student_provisional_degree.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_provisional_degree.student_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_student_provisional_degree.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_student_provisional_degree');		return $result->result();	}	public function get_all_approved_student_provisional_degrees_list_count($search)	{		$this->db->select("tbl_student_provisional_degree.*,tbl_student.student_name,tbl_student.enrollment_number");		$this->db->where('tbl_student_provisional_degree.is_deleted', '0');		// $this->db->where('tbl_student_provisional_degree.status','1');		$this->db->where('tbl_student_provisional_degree.payment_status', '1');		$this->db->where('tbl_student_provisional_degree.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student_provisional_degree.transaction_id', $search);			$this->db->or_like('tbl_student_provisional_degree.created_on', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_student_provisional_degree.student_id");		$this->db->order_by('tbl_student_provisional_degree.id', 'DESC');		$result = $this->db->get('tbl_student_provisional_degree');		return $result->num_rows();	}	public function get_student_transcript_certificate_failed($length, $start, $search)	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.payment_status', '0');		if ($this->session->userdata('admin_id') == "62") {			$this->db->where('tbl_student.center_id', '9');		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_transcript.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_transcript.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_transcript');		return $result->result();	}	public function get_student_transcript_certificate_failed_count($search)	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.payment_status', '0');		if ($this->session->userdata('admin_id') == "62") {			$this->db->where('tbl_student.center_id', '9');		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_transcript.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_transcript.id', 'DESC');		$result = $this->db->get('tbl_transcript');		return $result->num_rows();	}	public function get_student_transcript_certificate_success($length, $start, $search)	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.payment_status', '1');		$this->db->where('tbl_transcript.approve_status', '0');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_transcript.transaction_id', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_transcript.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_transcript');		return $result->result();	}	public function get_student_transcript_certificate_success_count($search)	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.payment_status', '1');		$this->db->where('tbl_transcript.approve_status', '0');		if ($this->session->userdata('admin_id') == "62") {			$this->db->where('tbl_student.center_id', '9');		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_transcript.transaction_id', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_transcript.id', 'DESC');		$result = $this->db->get('tbl_transcript');		return $result->num_rows();	}	public function get_student_transcript_certificate_approved($length, $start, $search)	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.username,tbl_student.password,tbl_center.center_name");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.payment_status', '1');		$this->db->where('tbl_transcript.approve_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_transcript.transaction_id', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_transcript.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_transcript');		return $result->result();	}	public function get_student_transcript_certificate_approved_count($search)	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.payment_status', '1');		$this->db->where('tbl_transcript.approve_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_transcript.transaction_id', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_center", "tbl_center.id = tbl_student.center_id");		$this->db->order_by('tbl_transcript.id', 'DESC');		$result = $this->db->get('tbl_transcript');		return $result->num_rows();	}	public function approve_transcript()	{		$data = array(			'approve_status' => '1',			'issue_date' => date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_transcript', $data);		return true;	}	public function disapprove_transcript()	{		$data = array(			'approve_status' => '0'		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_transcript', $data);		return true;	}	public function get_single_transcript()	{		$this->db->select("tbl_transcript.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.year_sem,tbl_course.print_name,tbl_stream.stream_name,tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature");		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.id', $this->uri->segment(2));		$this->db->join("tbl_student", "tbl_student.id = tbl_transcript.registration_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->join('tbl_signature', 'tbl_signature.id = tbl_transcript.signature_id', 'left');		$result = $this->db->get('tbl_transcript');		return $result->row();		// $result = $result->row();		// echo "<pre>";print_r($result);exit;	}	public function get_single_transcript_details()	{		// echo "<pre>";print_r($this->uri->segment(2));exit;		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('transcript_id', $this->uri->segment(2));		$result = $this->db->get('tbl_transcript_details');		return $result->result();		// echo "<pre>";print_r($result);exit;	}	public function get_vlaidate_student()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('enrollment_number', $this->input->post('enrollment_number'));		$result = $this->db->get('tbl_transcript');		$result = $result->row();		if (!empty($result)) {			redirect('edit_transcript/' . $result->id);		} else {			$this->db->where('is_deleted', '0');			$this->db->where('status', '1');			$this->db->where('enrollment_number', $this->input->post('enrollment_number'));			$result = $this->db->get('tbl_student');			$result = $result->row();			if (!empty($result)) {				redirect('add_student_transcript_certificate/' . $result->enrollment_number);			} else {				$this->session->set_flashdata('message', 'Please enter valid enrollment number');				redirect('add_student_transcript_certificate');			}		}	}	public function set_transcript_form()	{		$data = array(			'enrollment_number' => $this->input->post('enrollment_number'),			'registration_id'   => $this->input->post('registration_id'),			'course_duration'   => $this->input->post('duration_of_course'),			'year_of_passing'   => $this->input->post('year_of_passing'),			'credit_note'   	=> $this->input->post('credit_note'),			'issue_date'   		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_date'      => date("Y-m-d"),			'created_on'        => date("Y-m-d H:i:s")		);		$this->db->insert('tbl_transcript', $data);		$last_id = $this->db->insert_id();		$sem = $this->input->post('sem');		$subject = $this->input->post('subject');		$type = $this->input->post('type');		$max_mark = $this->input->post('max_mark');		$obtained = $this->input->post('obtained');		$detail_arr = array();		for ($i = 0; $i < count($sem); $i++) {			$detail_arr[] = array(				'transcript_id' => $last_id,				'sem'           => $sem[$i],				'subject'       => $subject[$i],				'type'          => $type[$i],				'max_mark'      => $max_mark[$i],				'obtained'      => $obtained[$i],				'created_on'    => date("Y-m-d H:i:s")			);		}		if (!empty($detail_arr)) {			$this->db->insert_batch('tbl_transcript_details', $detail_arr);		}		return true;	}	public function update_transcript()	{		$sem_credit = $this->input->post('credit_sem_wise');		$sem_credit_score = "";		if (!empty($sem_credit)) {			for ($c = 0; $c < count($sem_credit); $c++) {				$sem_credit_score .= $sem_credit[$c] . ",";			}		}		$data = array(			'course_duration'   => $this->input->post('duration_of_course'),			'year_of_passing'   => $this->input->post('year_of_passing'),			'credit_note'  	 	=> $this->input->post('credit_note'),			'sem_credit'  	 	=> $sem_credit_score,			'issue_date'   		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_transcript', $data);		$this->db->where('transcript_id', $this->input->post('id'));		$this->db->delete('tbl_transcript_details');		$sem = $this->input->post('sem');		$subject = $this->input->post('subject');		$type = $this->input->post('type');		$max_mark = $this->input->post('max_mark');		$obtained = $this->input->post('obtained');		$count = 0;		if ($sem != "") {			$count = count($sem);		}		$detail_arr = array();		for ($i = 0; $i < $count; $i++) {			$detail_arr[] = array(				'transcript_id' => $this->input->post('id'),				'sem'           => $sem[$i],				'subject'       => $subject[$i],				'type'          => $type[$i],				'max_mark'      => $max_mark[$i],				'obtained'      => $obtained[$i],				'created_on'    => date("Y-m-d H:i:s")			);		}		if (!empty($detail_arr)) {			$this->db->insert_batch('tbl_transcript_details', $detail_arr);		}		return true;	}	public function update_transcript_payment()	{		$data = array(			'transaction_id'   	=> $this->input->post('transaction_id'),			'payment_date'   	=>  date("Y-m-d", strtotime($this->input->post('payment_date'))),			'payment_mode'   	=> $this->input->post('payment_mode'),			'bank_id'   		=> $this->input->post('bank'),			'amount'   			=> $this->input->post('amount'),			'payment_status'   	=> $this->input->post('payment_status'),			'signature_id'		=> $this->input->post('signature'),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_transcript', $data);		return true;	}	public function get_student_details()	{		$this->db->select('tbl_student.*,tbl_course.course_name');		$this->db->where('tbl_student.enrollment_number', $this->input->post('enrollment_number'));		$this->db->join('tbl_course', 'tbl_course.id = tbl_student.course_id');		$result = $this->db->get('tbl_student');		echo json_encode($result->row());	}	public function get_student_details_both()	{		$this->db->select('tbl_student.*,tbl_course.course_name');		$this->db->where('tbl_student.enrollment_number', $this->input->post('enrollment_number'));		$this->db->join('tbl_course', 'tbl_course.id = tbl_student.course_id');		$result = $this->db->get('tbl_student');		if (!empty($result->row())) {			echo json_encode($result->row());		} else {			$this->db->select('tbl_separate_student.*,tbl_course.course_name');			$this->db->where('tbl_separate_student.enrollment_number', $this->input->post('enrollment_number'));			$this->db->join('tbl_course', 'tbl_course.id = tbl_separate_student.course_id');			$result = $this->db->get('tbl_separate_student');			echo json_encode($result->row());		}	}	public function get_print_migration_certificate($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_student_migration.*,tbl_stream.stream_name,tbl_student.student_name,tbl_student.course_id,tbl_student.father_name,tbl_student.enrollment_number,tbl_course.course_name,tbl_course.sort_name,tbl_session.session_start_date");		$this->db->where("tbl_student_migration.is_deleted", "0");		$this->db->where('tbl_student_migration.payment_status', "1");		$this->db->where("tbl_student_migration.id", $id);		$this->db->join("tbl_student", "tbl_student.id = tbl_student_migration.student_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->join("tbl_session", "tbl_session.id = tbl_student.session_id");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_student_migration.signature_id", "left");		$result = $this->db->get("tbl_student_migration");		$result = $result->row();		return $result;	}	public function get_student_division_for_degree($id)	{		$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");		$this->db->where("is_deleted", "0");		$this->db->where("status", "1");		$this->db->where("result", "0");		$this->db->where("student_id", $id);		$this->db->order_by("year_sem", "DESC");		$result = $this->db->get("tbl_exam_results");		$result = $result->result();		$total_marks = 0;		$gained_marks = 0;		if (!empty($result)) {			foreach ($result as $res) {				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			}			$percentage = $total_marks == 0 ? 0 : ($gained_marks / $total_marks) * 100;			if ($percentage >= 60) {				$data["division"] = "First Division";			} else if ($percentage < 60 & $percentage >= 45) {				$data["division"] = "Second Division";			} else {				$data["division"] = "Third Division";			}			$data["date"] = $result[0]->examination_year;			return $data;		}	}	public function get_unique_transaction_id()	{		$this->db->where('transaction_id', $this->input->post('transaction_id'));		$this->db->where('id !=', $this->input->post('id'));		$this->db->where('is_deleted', '0');		$result = $this->db->get('tbl_student_migration');		echo $result->num_rows();	}	// public function set_migration_application(){ 	// 	$data = array(	// 		'student_id' 		=> $this->input->post('student_id'),	// 		'transaction_id' 	=> $this->input->post('transaction_id'),	// 		'amount' 			=> $this->input->post('amount'),	// 		'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),	// 		'payment_status' 	=> $this->input->post('payment_status'),	// 		'approve_status' 	=> $this->input->post('approve_status'),	// 		'status' 			=> $this->input->post('status'),	// 		'created_on'		=> date("Y-m-d H:i:s")	// 	);	// 	if($this->input->post('id') == ""){	// 		$this->db->insert('tbl_student_migration',$data);	// 	}else{	// 		$this->db->where('id',$this->input->post('id'));	// 		$this->db->update('tbl_student_migration',$data);	// 	}	// 	return true;	// }	public function set_migration_application()	{		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			'signature_id' 		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		if ($this->input->post('id') == "") {			$this->db->insert('tbl_student_migration', $data);		} else {			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'transaction_id' 	=> $this->input->post('transaction_id'),				'amount' 			=> $this->input->post('amount'),				'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),				'payment_status' 	=> $this->input->post('payment_status'),				'approve_status' 	=> $this->input->post('approve_status'),				'signature_id' 		=> $this->input->post('signature'),			);			$this->db->where('id', $this->input->post('id'));			$this->db->update('tbl_student_migration', $data);		}		return true;	}	public function get_single_migration_student()	{		$this->db->select('tbl_student_migration.*,tbl_student.enrollment_number,tbl_student.student_name,tbl_student.father_name');		$this->db->where('tbl_student_migration.id', $this->uri->segment(2));		$this->db->where('tbl_student_migration.is_deleted', '0');		$this->db->join('tbl_student', 'tbl_student.id = tbl_student_migration.student_id', 'left');		$result = $this->db->get('tbl_student_migration');		return $result->row();	}	public function apply_student_provisional_degrees()	{		if ($this->input->post('id') == "") {			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'transaction_id' 	=> $this->input->post('transaction_id'),				'amount' 			=> $this->input->post('amount'),				'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),				'payment_date' 		=> date("Y-m-d", strtotime($this->input->post('payment_date'))),				'payment_status' 	=> $this->input->post('payment_status'),				'signature_id' 		=> $this->input->post('signature'),				'approve_status' 	=> $this->input->post('approve_status'),				'created_on'		=> date("Y-m-d H:i:s")			);			$this->db->insert('tbl_student_provisional_degree', $data);		} else {			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'transaction_id' 	=> $this->input->post('transaction_id'),				'amount' 			=> $this->input->post('amount'),				'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),				'payment_date' 		=> date("Y-m-d", strtotime($this->input->post('payment_date'))),				'payment_status' 	=> $this->input->post('payment_status'),				'approve_status' 	=> $this->input->post('approve_status'),				'signature_id' 		=> $this->input->post('signature'),			);			$this->db->where('id', $this->input->post('id'));			$this->db->update('tbl_student_provisional_degree', $data);		}		return true;	}	public function get_single_provisional_student()	{		$this->db->select('tbl_student_provisional_degree.*,tbl_student.enrollment_number,tbl_student.student_name,tbl_student.father_name');		$this->db->where('tbl_student_provisional_degree.id', $this->uri->segment(2));		$this->db->where('tbl_student_provisional_degree.is_deleted', '0');		$this->db->join('tbl_student', 'tbl_student.id = tbl_student_provisional_degree.student_id');		$result = $this->db->get('tbl_student_provisional_degree');		return $result->row();	}	public function get_print_transcript($id)	{		// echo "<pre>";print_r($id);exit;		$this->db->select('tbl_transcript.*,tbl_transcript_details.sem,tbl_student.student_name,tbl_student.course_id,tbl_student.stream_id,tbl_student.enrollment_number,tbl_student.course_mode,tbl_course.print_name,tbl_stream.stream_name,tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature');		$this->db->where('tbl_transcript.id', $id);		$this->db->where('tbl_transcript.is_deleted', '0');		$this->db->where('tbl_transcript.status', '1');		$this->db->where('tbl_transcript.approve_status', '1');		$this->db->join('tbl_transcript_details', 'tbl_transcript_details.transcript_id = tbl_transcript.id', 'left');		$this->db->join('tbl_student', 'tbl_student.id = tbl_transcript.registration_id', 'left');		$this->db->join('tbl_course', 'tbl_course.id = tbl_student.course_id', 'left');		$this->db->join('tbl_stream', 'tbl_stream.id = tbl_student.stream_id', 'left');		$this->db->join('tbl_signature', 'tbl_signature.id = tbl_transcript.signature_id', 'left');		$this->db->group_by('tbl_transcript_details.sem');		$this->db->order_by('tbl_transcript_details.sem', 'DESC');		$result = $this->db->get('tbl_transcript');		return $result->row();		// $result = $result->row();		// echo "<pre>";print_r($result);exit;	}	//letters on 18 july	public function get_student_id($enrollment)	{		$this->db->where('enrollment_number', $enrollment);		$result = $this->db->get('tbl_student')->row();		if ($result != "") {			return $result->id;		} else {			return "";		}	}	public function get_student_info_ajax()	{		$this->db->select('student_name,email,mobile,tbl_course.course_name as course,tbl_stream.stream_name as stream');		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->where('tbl_student.is_deleted', '0');		$this->db->where('enrollment_number', $this->input->post('enrollment_no'));		$resullt = $this->db->get('tbl_student');		echo json_encode($resullt->row());	}	public function get_single_bona_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->row();		// $result = $result->row();		// echo"<pre>";print_r($result);exit;	}	public function get_single_bona_application_new()	{		$this->db->select("tbl_bonafide_cer_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application.enrollment_no");		$this->db->where('tbl_bonafide_cer_application.is_deleted', '0');		//$this->db->where('tbl_bonafide_cer_application.status','1');		//$this->db->where('tbl_bonafide_cer_application.approve_status','0');  		$this->db->where('tbl_bonafide_cer_application.id', $this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->row();	}	public function student_apply_bonafide_cer()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount' 			=> $this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_bonafide_cer_application', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_bonafide_cer_application', $data);			return 1;		}	}	public function get_all_bona_application()	{		$this->db->where('is_deleted', '0');		// $this->db->where('status','1');		$this->db->where('approve_status', '1'); //--		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->result();	}	public function get_all_req_bonafide_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_bonafide_cer_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'Bonafide Certificate' as certificate_type, 'update_payment_bonafide' as certificate_link");		$this->db->where('tbl_bonafide_cer_application.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application.status', '1');		$this->db->where('tbl_bonafide_cer_application.application_status', '0');		$this->db->where('tbl_bonafide_cer_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_bonafide_cer_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_bonafide_cer_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_bonafide_cer_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_bonafide_cer_application.enrollment_no', $search);			$this->db->or_where('\'Bonafide Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_bonafide_cer_application.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->result();	}	public function get_all_req_bonafide_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_bonafide_cer_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'Bonafide Certificate' as certificate_type, 'update_payment_bonafide' as certificate_link");		$this->db->where('tbl_bonafide_cer_application.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application.status', '1');		$this->db->where('tbl_bonafide_cer_application.application_status', '0');		$this->db->where('tbl_bonafide_cer_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_bonafide_cer_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_bonafide_cer_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_bonafide_cer_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_bonafide_cer_application.enrollment_no', $search);			$this->db->or_where('\'Bonafide Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_bonafide_cer_application.id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->num_rows();	}	public function approve_bona_application()	{		$data = array(			'application_status' =>	'1',			'approve_status'  	=> '1',  //--			'approval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_bonafide_cer_application', $data);		return true;	}	public function update_payment_bonafide()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status' 	=> 	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'),			'approval_date'		=>	date("Y-m-d", strtotime($this->input->post('approval_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_bonafide_cer_application', $data);		return true;	}	public function disapprove_bona_application()	{		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status' =>	'0',			'approve_status'	=>	'0',  //--			'disapproval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_bonafide_cer_application', $data);		return true;	}	public function student_approved_bonafide_cer()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->where('approve_status', '1');  //--		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->result();	}	public function get_all_approve_bonafide_list($length, $start, $search)	{		$this->db->select("tbl_bonafide_cer_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_bonafide_cer_application.is_deleted', '0');		// $this->db->where('tbl_bonafide_cer_application.status','1');		// $this->db->where('tbl_bonafide_cer_application.application_status','1');		$this->db->where('tbl_bonafide_cer_application.approve_status', '1');	 //--		$this->db->where('tbl_bonafide_cer_application.payment_status', '1');	 //--		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_bonafide_cer_application');		// echo "<pre>";print_r($result->result());exit;		return $result->result();	}	public function get_all_approve_bonafide_list_count($search)	{		$this->db->select("tbl_bonafide_cer_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_bonafide_cer_application.is_deleted', '0');		// $this->db->where('tbl_bonafide_cer_application.status','1');		// $this->db->where('tbl_bonafide_cer_application.application_status','1');		$this->db->where('tbl_bonafide_cer_application.approve_status', '1');	 //--		$this->db->where('tbl_bonafide_cer_application.payment_status', '1');	 //--		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application.id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->num_rows();	}	public function get_single_bona_application_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_bonafide_cer_application.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_bonafide_cer_application.signature_id", "left");		$this->db->where('tbl_bonafide_cer_application.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application.status', '1');		$this->db->where('tbl_bonafide_cer_application.id', $id);		$result = $this->db->get('tbl_bonafide_cer_application');		return $result->row();	}	public function get_single_bona_scholarship_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->row();	}	public function student_apply_bonafide_scholarship_cer()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			'amount' 			=> $this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_bonafide_cer_application_scholarship', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_bonafide_cer_application_scholarship', $data);			return 1;		}	}	public function get_all_req_bonafide_scholarship_list($length, $start, $search)	{		$this->db->select("tbl_bonafide_cer_application_scholarship.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_bonafide_cer_application_scholarship.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application_scholarship.status', '1');		$this->db->where('tbl_bonafide_cer_application_scholarship.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_scholarship.enrollment_no', $search);			$this->db->or_like('tbl_bonafide_cer_application_scholarship.transaction_id', $search);			$this->db->or_like('tbl_student.student_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application_scholarship.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_scholarship.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->result();	}	public function get_all_req_bonafide_scholarship_list_count($search)	{		$this->db->select("tbl_bonafide_cer_application_scholarship.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_bonafide_cer_application_scholarship.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application_scholarship.status', '1');		$this->db->where('tbl_bonafide_cer_application_scholarship.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_scholarship.enrollment_no', $search);			$this->db->or_like('tbl_bonafide_cer_application_scholarship.transaction_id', $search);			$this->db->or_like('tbl_student.student_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application_scholarship.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_scholarship.id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->num_rows();	}	public function get_all_bona_scholarship_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('approve_status', '1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->result();	}	public function get_single_bona_scholarship_application_new()	{		$this->db->select("tbl_bonafide_cer_application_scholarship.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application_scholarship.enrollment_no");		$this->db->where('tbl_bonafide_cer_application_scholarship.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application_scholarship.id', $this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->row();	}	public function update_payment_bonafide_scholarship()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status' 	=> 	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'),			'approval_date'		=>	date("Y-m-d", strtotime($this->input->post('approval_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_bonafide_cer_application_scholarship', $data);		return true;	}	public function student_approved_bonafide_scholarship_cer()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->where('approve_status', '1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->result();	}	public function get_all_approve_bonafide_scholarship_list($length, $start, $search)	{		$this->db->select("tbl_bonafide_cer_application_scholarship.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_bonafide_cer_application_scholarship.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application_scholarship.approve_status', '1');		$this->db->where('tbl_bonafide_cer_application_scholarship.payment_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_scholarship.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application_scholarship.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_scholarship.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->result();	}	public function get_all_approve_bonafide_scholarship_list_count($search)	{		$this->db->select("tbl_bonafide_cer_application_scholarship.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_bonafide_cer_application_scholarship.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application_scholarship.approve_status', '1');		$this->db->where('tbl_bonafide_cer_application_scholarship.payment_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_scholarship.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application_scholarship.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_scholarship.id', 'DESC');		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->num_rows();	}	public function get_single_bona_scholarship_application_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_bonafide_cer_application_scholarship.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id,tbl_session.session_name,tbl_faculty.faculty_name");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_bonafide_cer_application_scholarship.enrollment_no");		$this->db->join("tbl_session", "tbl_session.id = tbl_student.session_id");		$this->db->join("tbl_faculty", "tbl_faculty.id = tbl_student.faculty_id");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_bonafide_cer_application_scholarship.signature_id", "left");		$this->db->where('tbl_bonafide_cer_application_scholarship.is_deleted', '0');		$this->db->where('tbl_bonafide_cer_application_scholarship.status', '1');		$this->db->where('tbl_bonafide_cer_application_scholarship.id', $id);		$result = $this->db->get('tbl_bonafide_cer_application_scholarship');		return $result->row();	}	//medium of recc	public function get_single_inst_medium_letter_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_medium_instruction_application');		return $result->row();	}	public function get_single_inst_medium_letter_application_new()	{		$this->db->select("tbl_medium_instruction_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_medium_instruction_application.enrollment_no");		$this->db->where('tbl_medium_instruction_application.is_deleted', '0');		$this->db->where('tbl_medium_instruction_application.status', '1');		// $this->db->where('tbl_medium_instruction_application.approve_status','0');  //--		$this->db->where('tbl_medium_instruction_application.id', $this->uri->segment(2));		$result = $this->db->get('tbl_medium_instruction_application');		return $result->row();		// $result = $result->row();		// echo "<pre>";print_r($result);exit;	}	public function student_apply_inst_medium_letter()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount'			=> $this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			// 'approve_status' 	=> $this->input->post('approve_status'),  //--			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_medium_instruction_application', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_medium_instruction_application', $data);			return 1;		}	}	public function get_all_inst_medium_application()	{		$this->db->where('is_deleted', '0');		// $this->db->where('status','1');		$this->db->where('approve_status', '0');  //--		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_medium_instruction_application');		return $result->result();	}	public function set_update_letter_transfer_university()	{		$data = array(			'tranfer_university' => $this->input->post('tranfer_university')		);		$this->db->where('id', $this->input->post('id'));		$this->db->update($this->input->post('tbl'), $data);	}	public function get_all_req_inst_medium_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_medium_instruction_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'Medium of Instruction Letter' as certificate_type, 'update_payment_inst_medium' as certificate_link");		$this->db->where('tbl_medium_instruction_application.is_deleted', '0');		$this->db->where('tbl_medium_instruction_application.status', '1');		$this->db->where('tbl_medium_instruction_application.application_status', '0');		$this->db->where('tbl_medium_instruction_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_medium_instruction_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_medium_instruction_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_medium_instruction_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_medium_instruction_application.enrollment_no', $search);			$this->db->or_where('\'Medium of Instruction Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_medium_instruction_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_medium_instruction_application.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_medium_instruction_application');		return $result->result();	}	public function get_all_req_inst_medium_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_medium_instruction_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'Medium of Instruction Letter' as certificate_type, 'update_payment_inst_medium' as certificate_link");		$this->db->where('tbl_medium_instruction_application.is_deleted', '0');		$this->db->where('tbl_medium_instruction_application.status', '1');		$this->db->where('tbl_medium_instruction_application.application_status', '0');		$this->db->where('tbl_medium_instruction_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_medium_instruction_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_medium_instruction_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_medium_instruction_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_medium_instruction_application.enrollment_no', $search);			$this->db->or_where('\'Medium of Instruction Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_medium_instruction_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_medium_instruction_application.id', 'DESC');		$result = $this->db->get('tbl_medium_instruction_application');		return $result->num_rows();	}	public function update_payment_inst_medium()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id'		=>	$this->input->post('signature'),			'approval_date'	=>	date("Y-m-d", strtotime($this->input->post('issue_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_medium_instruction_application', $data);		return true;	}	public function approve_inst_medium_application()	{		$data = array(			'application_status' =>	'1',			'approve_status'	=>	'1', //--			'approval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_medium_instruction_application', $data);		return true;	}	public function disapprove_inst_medium_application()	{		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status' =>	'0',			'approve_status'	=>	'0', //--			'disapproval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_medium_instruction_application', $data);		return true;	}	public function student_approved_inst_medium_letter()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->where('approve_status', '1');  //--		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_medium_instruction_application');		return $result->result();	}	public function get_all_approve_inst_medium_list($length, $start, $search)	{		$this->db->select("tbl_medium_instruction_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_medium_instruction_application.is_deleted', '0');		$this->db->where('tbl_medium_instruction_application.status', '1');		// $this->db->where('tbl_medium_instruction_application.application_status','1');				$this->db->where('tbl_medium_instruction_application.approve_status', '1');		 //--		$this->db->where('tbl_medium_instruction_application.payment_status', '1');		 //--		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_medium_instruction_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_medium_instruction_application.enrollment_no");		$this->db->order_by('tbl_medium_instruction_application.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_medium_instruction_application');		return $result->result();	}	public function get_all_approve_inst_medium_list_count($search)	{		$this->db->select("tbl_medium_instruction_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_medium_instruction_application.is_deleted', '0');		$this->db->where('tbl_medium_instruction_application.status', '1');		// $this->db->where('tbl_medium_instruction_application.application_status','1');			$this->db->where('tbl_medium_instruction_application.approve_status', '1');		 //--		$this->db->where('tbl_medium_instruction_application.payment_status', '1');		 //--		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_medium_instruction_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_medium_instruction_application.enrollment_no");		$this->db->order_by('tbl_medium_instruction_application.id', 'DESC');		$result = $this->db->get('tbl_medium_instruction_application');		return $result->num_rows();	}	public function get_single_inst_medium_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_medium_instruction_application.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_medium_instruction_application.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_medium_instruction_application.signature_id", "left");		$this->db->where('tbl_medium_instruction_application.is_deleted', '0');		$this->db->where('tbl_medium_instruction_application.status', '1');		$this->db->where('tbl_medium_instruction_application.id', $id);		$result = $this->db->get('tbl_medium_instruction_application');		return $result->row();	}	public function get_single_no_backlog_letter_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_no_backlog_application');		return $result->row();	}	public function get_single_no_backlog_application_new()	{		$this->db->select("tbl_no_backlog_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_backlog_application.enrollment_no");		$this->db->where('tbl_no_backlog_application.is_deleted', '0');		$this->db->where('tbl_no_backlog_application.status', '1');		$this->db->where('tbl_no_backlog_application.id', $this->uri->segment(2));		$result = $this->db->get('tbl_no_backlog_application');		return $result->row();	}	public function student_apply_no_backlog_letter()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount'			=>	$this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			// 'approve_status'	=> $this->input->post('approve_status'),  //---			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_no_backlog_application', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_no_backlog_application', $data);			return 1;		}	}	public function get_all_no_backlog_application()	{		$this->db->where('is_deleted', '0');		// $this->db->where('status','1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_no_backlog_application');		return $result->result();	}	public function get_all_req_no_backlog_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_no_backlog_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'No Backlog Summary Letter' as certificate_type,'update_payment_no_backlog' as certificate_link");		$this->db->where('tbl_no_backlog_application.is_deleted', '0');		$this->db->where('tbl_no_backlog_application.status', '1');		$this->db->where('tbl_no_backlog_application.application_status', '0');		$this->db->where('tbl_no_backlog_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_no_backlog_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_no_backlog_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_no_backlog_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_no_backlog_application.enrollment_no', $search);			$this->db->or_where('\'No Backlog Summary Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_backlog_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_no_backlog_application.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_no_backlog_application');		return $result->result();	}	public function get_all_req_no_backlog_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_no_backlog_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'No Backlog Summary Letter' as certificate_type,'update_payment_no_backlog' as certificate_link");		$this->db->where('tbl_no_backlog_application.is_deleted', '0');		$this->db->where('tbl_no_backlog_application.status', '1');		$this->db->where('tbl_no_backlog_application.application_status', '0');		$this->db->where('tbl_no_backlog_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_no_backlog_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_no_backlog_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_no_backlog_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_no_backlog_application.enrollment_no', $search);			$this->db->or_where('\'No Backlog Summary Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_backlog_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_no_backlog_application.id', 'DESC');		$result = $this->db->get('tbl_no_backlog_application');		return $result->num_rows();	}	public function approve_no_backlog_application()	{		$data = array(			'application_status' =>	'1',			'approve_status'	=>	'1',			'approval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_no_backlog_application', $data);		return true;	}	public function update_payment_no_backlog()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id'		=>	$this->input->post('signature'),			'approval_date'		=>	date("Y-m-d", strtotime($this->input->post('application_date'))),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_no_backlog_application', $data);		return true;	}	public function disapprove_no_backlog_application()	{		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status' =>	'0',			'approve_status'	=>	'0',   //--			'disapproval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_no_backlog_application', $data);		return true;	}	public function student_approved_no_backlog_letter()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->where('approve_status', '1');  //--		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_no_backlog_application');		return $result->result();	}	public function get_all_approve_no_backlog_list($length, $start, $search)	{		$this->db->select("tbl_no_backlog_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_no_backlog_application.is_deleted', '0');		$this->db->where('tbl_no_backlog_application.status', '1');		// $this->db->where('tbl_no_backlog_application.application_status','1');			$this->db->where('tbl_no_backlog_application.approve_status', '1');		$this->db->where('tbl_no_backlog_application.payment_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_no_backlog_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_backlog_application.enrollment_no");		$this->db->order_by('tbl_no_backlog_application.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_no_backlog_application');		return $result->result();	}	public function get_all_approve_no_backlog_list_count($search)	{		$this->db->select("tbl_no_backlog_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_no_backlog_application.is_deleted', '0');		$this->db->where('tbl_no_backlog_application.status', '1');		// $this->db->where('tbl_no_backlog_application.application_status','1');			$this->db->where('tbl_no_backlog_application.approve_status', '1');		$this->db->where('tbl_no_backlog_application.payment_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_no_backlog_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_backlog_application.enrollment_no");		$this->db->order_by('tbl_no_backlog_application.id', 'DESC');		$result = $this->db->get('tbl_no_backlog_application');		return $result->num_rows();	}	public function get_single_no_backlog_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_no_backlog_application.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_backlog_application.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_no_backlog_application.signature_id", "left");		$this->db->where('tbl_no_backlog_application.is_deleted', '0');		$this->db->where('tbl_no_backlog_application.status', '1');		$this->db->where('tbl_no_backlog_application.id', $id);		$result = $this->db->get('tbl_no_backlog_application');		return $result->row();	}	//no split	public function get_single_no_split_letter_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_no_split_application');		return $result->row();	}	public function get_single_no_split_application_new()	{		$this->db->select("tbl_no_split_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_split_application.enrollment_no");		$this->db->where('tbl_no_split_application.is_deleted', '0');		$this->db->where('tbl_no_split_application.status', '1');		$this->db->where('tbl_no_split_application.id', $this->uri->segment(2));		$result = $this->db->get('tbl_no_split_application');		return $result->row();	}	public function student_apply_no_split_letter()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount'			=>	$this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			// 'approve_status' 	=> $this->input->post('approve_status'),  //--			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_no_split_application', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_no_split_application', $data);			return 1;		}	}	public function get_all_no_split_application()	{		$this->db->where('is_deleted', '0');		// $this->db->where('status','1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_no_split_application');		return $result->result();	}	public function get_all_req_no_split_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_no_split_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'No Split Issue Letter' as certificate_type, 'update_payment_no_split' as certificate_link");		$this->db->where('tbl_no_split_application.is_deleted', '0');		$this->db->where('tbl_no_split_application.status', '1');		$this->db->where('tbl_no_split_application.application_status', '0');		$this->db->where('tbl_no_split_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_no_split_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_no_split_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_no_split_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_no_split_application.enrollment_no', $search);			$this->db->or_where('\'No Split Issue Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_split_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_no_split_application.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_no_split_application');		return $result->result();	}	public function get_all_req_no_split_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_no_split_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'No Split Issue Letter' as certificate_type, 'update_payment_no_split' as certificate_link");		$this->db->where('tbl_no_split_application.is_deleted', '0');		$this->db->where('tbl_no_split_application.status', '1');		$this->db->where('tbl_no_split_application.application_status', '0');		$this->db->where('tbl_no_split_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_no_split_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_no_split_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_no_split_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_no_split_application.enrollment_no', $search);			$this->db->or_where('\'No Split Issue Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_split_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_no_split_application.id', 'DESC');		$result = $this->db->get('tbl_no_split_application');		return $result->num_rows();	}	public function approve_no_split_application()	{		$data = array(			'application_status' =>	'1',			'approve_status'	=>	'1',			'approval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_no_split_application', $data);		return true;	}	public function update_payment_no_split()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id'		=>	$this->input->post('signature'),			'approval_date'		=>	date("Y-m-d", strtotime($this->input->post('application_date'))),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_no_split_application', $data);		return true;	}	public function disapprove_no_split_application()	{		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status' =>	'0',			'approve_status'	=>	'0',			'disapproval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_no_split_application', $data);		return true;	}	public function student_approved_no_split_letter()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->where('approve_status', '1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_no_split_application');		return $result->result();	}	public function get_all_approve_no_split_list($length, $start, $search)	{		$this->db->select("tbl_no_split_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_no_split_application.is_deleted', '0');		$this->db->where('tbl_no_split_application.status', '1');		// $this->db->where('tbl_no_split_application.application_status','1');			$this->db->where('tbl_no_split_application.approve_status', '1');	 //--			$this->db->where('tbl_no_split_application.payment_status', '1');	 //--			if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_no_split_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_split_application.enrollment_no");		$this->db->order_by('tbl_no_split_application.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_no_split_application');		return $result->result();	}	public function get_all_approve_no_split_list_count($search)	{		$this->db->select("tbl_no_split_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_no_split_application.is_deleted', '0');		$this->db->where('tbl_no_split_application.status', '1');		// $this->db->where('tbl_no_split_application.application_status','1');			$this->db->where('tbl_no_split_application.approve_status', '1');	 //--			$this->db->where('tbl_no_split_application.payment_status', '1');	 //--			if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_no_split_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_split_application.enrollment_no");		$this->db->order_by('tbl_no_split_application.id', 'DESC');		$result = $this->db->get('tbl_no_split_application');		return $result->num_rows();	}	public function get_single_no_split_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_no_split_application.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_no_split_application.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_no_split_application.signature_id", "left");		$this->db->where('tbl_no_split_application.is_deleted', '0');		$this->db->where('tbl_no_split_application.status', '1');		$this->db->where('tbl_no_split_application.id', $id);		$result = $this->db->get('tbl_no_split_application');		return $result->row();	}	public function get_single_reccom_letter_application()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application');		return $result->row();	}	public function get_single_reccom_application_new()	{		$this->db->select("tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");		$this->db->where('tbl_reccom_letter_application.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application.status', '1');		$this->db->where('tbl_reccom_letter_application.id', $this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application');		return $result->row();	}	public function student_apply_reccom_letter()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount'			=> $this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			// 'approve_status'    => $this->input->post('approve_status'),  //--			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_reccom_letter_application', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_reccom_letter_application', $data);			return 1;		}	}	public function get_all_reccom_application()	{		$this->db->where('is_deleted', '0');		// $this->db->where('status','1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application');		return $result->result();	}	// public function get_all_req_reccom_list($length,$start,$search){	// 	$this->db->select("tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");	// 	$this->db->where('tbl_reccom_letter_application.is_deleted','0');	// 	$this->db->where('tbl_reccom_letter_application.status','1'); 	// 	$this->db->where('tbl_reccom_letter_application.approve_status','0');			// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_reccom_letter_application.enrollment_no',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");	// 	$this->db->order_by('tbl_reccom_letter_application.id','DESC');	// 	$this->db->limit($length,$start);	// 	$result = $this->db->get('tbl_reccom_letter_application');	// 	return $result->result();			// }	public function get_all_req_reccom_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'Recommendation Letter' as certificate_type, 'update_payment_reccom' as certificate_link");		$this->db->where('tbl_reccom_letter_application.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application.status', '1');		$this->db->where('tbl_reccom_letter_application.application_status', '0');		$this->db->where('tbl_reccom_letter_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_reccom_letter_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_reccom_letter_application.enrollment_no', $search);			$this->db->or_where('\'Recommendation Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_reccom_letter_application.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_reccom_letter_application');		return $result->result();	}	// public function get_all_req_reccom_list_count($search){	// 	$this->db->select("tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");	// 	$this->db->where('tbl_reccom_letter_application.is_deleted','0');	// 	$this->db->where('tbl_reccom_letter_application.status','1');  	// 	$this->db->where('tbl_reccom_letter_application.approve_status','0');			// 	if($search !=""){	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_reccom_letter_application.enrollment_no',$search);	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student","tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");	// 	$this->db->order_by('tbl_reccom_letter_application.id','DESC');	// 	$result = $this->db->get('tbl_reccom_letter_application');	// 	return $result->num_rows();	// }	public function get_all_req_reccom_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,'Recommendation Letter' as certificate_type, 'update_payment_reccom' as certificate_link");		$this->db->where('tbl_reccom_letter_application.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application.status', '1');		$this->db->where('tbl_reccom_letter_application.application_status', '0');		$this->db->where('tbl_reccom_letter_application.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_reccom_letter_application.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_reccom_letter_application.enrollment_no', $search);			$this->db->or_where('\'Recommendation Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_reccom_letter_application.id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application');		return $result->num_rows();	}	// public function approve_reccom_application(){	// 	$data = array( 	// 		'approve_status'    =>  '1',  	// 		'approval_date' 	=> date("Y-m-d"),		// 	);	// 	$this->db->where('id',$this->uri->segment(2));	// 	$this->db->update('tbl_reccom_letter_application',$data);	// 	return true;	// }	public function approve_reccom_application()	{		$data = array(			'approve_status'    =>  '1',			'approval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application', $data);		return true;	}	// public function update_payment_reccom(){	// 	$data = array(	// 		'transaction_id'	=>	$this->input->post('transaction_id'),	// 		'transaction_mode'	=>	$this->input->post('transaction_mode'),	// 		'amount'			=>	$this->input->post('amount'),	// 		'payment_status'	=>	$this->input->post('payment_status'),	// 		'approve_status'    => 	$this->input->post('approve_status'),   	// 		'approval_date'  	=>	date("Y-m-d",strtotime($this->input->post('application_date'))),	// 	); 	// 	$this->db->where('id',$this->uri->segment(2));	// 	$this->db->update('tbl_reccom_letter_application',$data);	// 	return true;	// }	public function update_payment_reccom()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'    => 	$this->input->post('approve_status'),			'signature_id'   	=> 	$this->input->post('signature'),			'approval_date'  	=>	date("Y-m-d", strtotime($this->input->post('application_date'))),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application', $data);		return true;	}	public function disapprove_reccom_application()	{		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status' =>	'0',			'approve_status'	=>	'0',			'disapproval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application', $data);		return true;	}	public function student_approved_reccom_letter()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->where('approve_status', '1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application');		return $result->result();	}	public function get_all_approve_reccom_list($length, $start, $search)	{		$this->db->select("tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_reccom_letter_application.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application.status', '1');		// $this->db->where('tbl_reccom_letter_application.application_status','1');		$this->db->where('tbl_reccom_letter_application.approve_status', '1');	//--		$this->db->where('tbl_reccom_letter_application.payment_status', '1');	//--		if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_reccom_letter_application');		return $result->result();	}	public function get_all_approve_reccom_list_count($search)	{		$this->db->select("tbl_reccom_letter_application.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_reccom_letter_application.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application.status', '1');		// $this->db->where('tbl_reccom_letter_application.application_status','1');			$this->db->where('tbl_reccom_letter_application.payment_status', '1');	//--			$this->db->where('tbl_reccom_letter_application.approve_status', '1');	//--			if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application.id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application');		return $result->num_rows();	}	public function get_single_reccom_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_reccom_letter_application.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_reccom_letter_application.signature_id", "left");		$this->db->where('tbl_reccom_letter_application.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application.status', '1');		$this->db->where('tbl_reccom_letter_application.id', $id);		$result = $this->db->get('tbl_reccom_letter_application');		return $result->row();	}	public function get_single_second_reccom_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_reccom_letter_application_second.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_reccom_letter_application_second.signature_id", "left");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		$this->db->where('tbl_reccom_letter_application_second.id', $id);		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->row();	}	public function get_prev_application_checked_ajax()	{		$this->db->where('enrollment_no', $this->input->post('enrollment_no'));		$this->db->where('is_deleted', '0');		$result = $this->db->get($this->input->post('table'));		$result = $result->row();		if (!empty($result)) {			echo '1';		} else {			echo '0';		}	}	public function get_single_reccom_letter_application_second()	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('id', $this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->row();	}	public function get_single_reccom_application_new_second()	{		$this->db->select("tbl_reccom_letter_application_second.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		$this->db->where('tbl_reccom_letter_application_second.id', $this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->row();	}	public function student_apply_reccom_letter_second()	{		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount'			=> $this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),			// 'approve_status'	=> $this->input->post('approve_status'),			'created_on' 		=> date("Y-m-d H:i:s"),		);		if ($this->input->post('old_id') == "") {			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_reccom_letter_application_second', $new_arr);			return 0;		} else {			$this->db->where('id', $this->input->post('old_id'));			$this->db->update('tbl_reccom_letter_application_second', $data);			return 1;		}	}	public function get_all_reccom_application_second()	{		$this->db->where('is_deleted', '0');		// $this->db->where('status','1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->result();	}	public function get_all_req_reccom_list_second($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_reccom_letter_application_second.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile, 'II Recommendation Letter' as certificate_type, 'second_update_payment_reccom' as certificate_link");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		$this->db->where('tbl_reccom_letter_application_second.application_status', '0');		$this->db->where('tbl_reccom_letter_application_second.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application_second.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application_second.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_reccom_letter_application_second.payment_status', $this->input->post('payment_status'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_reccom_letter_application_second.enrollment_no', $search);			$this->db->or_where('\'II Recommendation Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_reccom_letter_application_second.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->result();	}	public function get_all_req_reccom_list_count_second($search)	{		$this->db->select("tbl_reccom_letter_application_second.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile, 'II Recommendation Letter' as certificate_type, 'second_update_payment_reccom' as certificate_link");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		$this->db->where('tbl_reccom_letter_application_second.application_status', '0');		$this->db->where('tbl_reccom_letter_application_second.approve_status', '0');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_reccom_letter_application_second.enrollment_no', $search);			$this->db->or_where('\'II Recommendation Letter\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application_second.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_reccom_letter_application_second.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_reccom_letter_application_second.payment_status', $this->input->post('payment_status'));		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_second.id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->num_rows();	}	public function approve_reccom_application_second()	{		$data = array(			'application_status' =>	'1',			'approve_status'    => '1',			'approval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application_second', $data);		return true;	}	public function update_payment_reccom_second()	{		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'    => 	$this->input->post('approve_status'),			'signature_id'   	=> 	$this->input->post('signature'),			'approval_date'		=>	date("Y-m-d", strtotime($this->input->post('application_date'))),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application_second', $data);		return true;	}	public function disapprove_reccom_application_second()	{		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status' =>	'0',			'approve_status'    => '0',			'disapproval_date' 	=> date("Y-m-d"),		);		$this->db->where('id', $this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application_second', $data);		return true;	}	public function student_approved_reccom_letter_second()	{		$this->db->where('is_deleted', '0');		$this->db->where('application_status', '1');		$this->db->order_by('id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->result();	}	public function get_all_approve_reccom_list_second($length, $start, $search)	{		$this->db->select("tbl_reccom_letter_application_second.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		// $this->db->where('tbl_reccom_letter_application_second.application_status','1');		$this->db->where('tbl_reccom_letter_application_second.payment_status', '1');		$this->db->where('tbl_reccom_letter_application_second.approve_status', '1');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application_second.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_second.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->result();	}	public function get_all_approve_reccom_list_count_second($search)	{		$this->db->select("tbl_reccom_letter_application_second.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		// $this->db->where('tbl_reccom_letter_application_second.application_status','1');		$this->db->where('tbl_reccom_letter_application_second.payment_status', '1');		$this->db->where('tbl_reccom_letter_application_second.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application_second.enrollment_no', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_second.id', 'DESC');		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->num_rows();	}	public function get_single_reccom_print_second()	{		$this->db->select("tbl_reccom_letter_application_second.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_reccom_letter_application_second.enrollment_no");		$this->db->where('tbl_reccom_letter_application_second.is_deleted', '0');		$this->db->where('tbl_reccom_letter_application_second.status', '1');		$this->db->where('tbl_reccom_letter_application_second.id', $this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application_second');		return $result->row();	}	public function get_print_provisional_degree_certificate_regular($id)	{		// echo "<pre>";print_r($id);exit;		$_GET = $_POST;		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_student_provisional_degree.*,tbl_student.course_id,tbl_student.student_name,tbl_student.father_name,tbl_student.enrollment_number,tbl_session.session_start_date,tbl_course.course_name,tbl_stream.stream_name,tbl_course_type.in_degree");		$this->db->where("tbl_student_provisional_degree.is_deleted", "0");		$this->db->where("tbl_student_provisional_degree.payment_status", "1");		$this->db->where("tbl_student_provisional_degree.id", $id);		$this->db->join("tbl_student", "tbl_student.id = tbl_student_provisional_degree.student_id");		$this->db->join("tbl_session", "tbl_session.id = tbl_student.session_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_student_provisional_degree.signature_id", "left");		$this->db->join("tbl_course_type","tbl_course_type.id = tbl_student.course_type"); 		$result = $this->db->get("tbl_student_provisional_degree");		$result = $result->row();		// echo "<pre>";print_r($result);exit;		return $result;	}	public function get_print_division_for_degree_regular($student_id, $course_id)	{		if ($course_id != "23") {			$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");			$this->db->where("is_deleted", "0");			$this->db->where("status", "1");			$this->db->where("result", "0");			// $this->db->where("id",$student_id);			$this->db->where("student_id", $student_id);			$this->db->order_by("year_sem", "DESC");			$result = $this->db->get("tbl_exam_results")->result();			if (!empty($result)) {				$total_marks = 0;				$gained_marks = 0;				foreach ($result as $res) {					$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;					$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;				}				$percentage = $total_marks == 0 ? 0 : ($gained_marks / $total_marks) * 100;				if ($percentage >= 60) {					$data["division"] = "First Division";				} else if ($percentage < 60 & $percentage >= 45) {					$data["division"] = "Second Division";				} else {					$data["division"] = "Third Division";				}				$data["date"] = $result[0]->examination_year;				return $data;			}		} else {		}	}	public function get_all_credit_transfer_request($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_credit_transfer_certificate.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile, 'Credit Transfer Certificate' as certificate_type, 'update_credit_transfr_certificare' as certificate_link");		$this->db->where('tbl_credit_transfer_certificate.is_deleted', '0');		$this->db->where('tbl_credit_transfer_certificate.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_credit_transfer_certificate.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_credit_transfer_certificate.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_credit_transfer_certificate.payment_status', $this->input->post('payment_status'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_where('\'Credit Transfer Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_credit_transfer_certificate.student_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_credit_transfer_certificate.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_credit_transfer_certificate');		return $result->result();	}	public function get_all_credit_transfer_request_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_credit_transfer_certificate.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile, 'Credit Transfer Certificate' as certificate_type, 'update_credit_transfr_certificare' as certificate_link");		$this->db->where('tbl_credit_transfer_certificate.is_deleted', '0');		$this->db->where('tbl_credit_transfer_certificate.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_credit_transfer_certificate.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_credit_transfer_certificate.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_credit_transfer_certificate.payment_status', $this->input->post('payment_status'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_where('\'Credit Transfer Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_credit_transfer_certificate.student_id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_credit_transfer_certificate.id', 'DESC');		$result = $this->db->get('tbl_credit_transfer_certificate');		return $result->num_rows();	}	public function get_all_credit_transfer_approved($length, $start, $search)	{		$this->db->select("tbl_credit_transfer_certificate.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_credit_transfer_certificate.is_deleted', '0');		$this->db->where('tbl_credit_transfer_certificate.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_credit_transfer_certificate.student_id");		$this->db->order_by('tbl_credit_transfer_certificate.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_credit_transfer_certificate');		return $result->result();	}	public function get_all_credit_transfer_approved_count($search)	{		$this->db->select("tbl_credit_transfer_certificate.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_credit_transfer_certificate.is_deleted', '0');		$this->db->where('tbl_credit_transfer_certificate.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_credit_transfer_certificate.student_id");		$this->db->order_by('tbl_credit_transfer_certificate.id', 'DESC');		$result = $this->db->get('tbl_credit_transfer_certificate');		return $result->num_rows();	}	public function get_update_crdit_transfer_certificate()	{		$this->db->select("tbl_credit_transfer_certificate.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_credit_transfer_certificate.is_deleted', '0');		$this->db->where('tbl_credit_transfer_certificate.student_id', $this->uri->segment(2));		$this->db->join("tbl_student", "tbl_student.id = tbl_credit_transfer_certificate.student_id");		$result = $this->db->get('tbl_credit_transfer_certificate');		return $result->row();	}	public function update_credit_transfer_certificate_details()	{		$data = array(			'transaction_id' => $this->input->post('transaction_id'),			'previous_university' => $this->input->post('previous_university'),			'amount' => $this->input->post('amount'),			'issue_date' => date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_date' => date("Y-m-d", strtotime($this->input->post('payment_date'))),			'payment_status' => $this->input->post('payment_status'),			'approve_status' => $this->input->post('approve_status'),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_credit_transfer_certificate', $data);	}	public function get_print_crdit_transfer_certificate($id)	{		$this->db->select("tbl_credit_transfer_certificate.*,tbl_student.student_name,tbl_student.father_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->where('tbl_credit_transfer_certificate.is_deleted', '0');		$this->db->where('tbl_credit_transfer_certificate.id', $id);		$this->db->join("tbl_student", "tbl_student.id = tbl_credit_transfer_certificate.student_id");		$result = $this->db->get('tbl_credit_transfer_certificate');		return $result->row();	}	public function sent_bonofied_for_print()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_bonafide_cer_application', $data);			}		}		return true;	}	public function sent_medium_letter_for_print()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_medium_instruction_application', $data);			}		}		return true;	}	public function sent_no_backlog_letter_for_print()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_no_backlog_application', $data);			}		}		return true;	}	public function sent_no_split_letter_for_print()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_no_split_application', $data);			}		}		return true;	}	public function sent_reccom_letter_letter_for_print()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_reccom_letter_application', $data);			}		}		return true;	}	public function sent_reccom_letter_letter_for_print_second()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_reccom_letter_application_second', $data);			}		}		return true;	}	public function sent_credit_transfer_for_print_second()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_credit_transfer_certificate', $data);			}		}		return true;	}	//character certificate	public function get_all_student_charector_certificate_requests_list($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_character_certificate.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.pcc,tbl_center.center_name,'Character Certificate' as certificate_type, 'student_character_certificate_update' as certificate_link");		$this->db->where('tbl_character_certificate.is_deleted', '0');		$this->db->where('tbl_character_certificate.issue_status', '0');		$this->db->where('tbl_character_certificate.payment_status', '0');		$this->db->where('tbl_character_certificate.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_character_certificate.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_character_certificate.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_character_certificate.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student.email', $search);			$this->db->or_like('tbl_student.mobile', $search);			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Character Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_character_certificate.student_id");		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_character_certificate.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_character_certificate');		return $result->result();	}	public function get_all_student_charector_certificate_requests_list_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_character_certificate.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.pcc,tbl_center.center_name,'Character Certificate' as certificate_type, 'student_character_certificate_update' as certificate_link");		$this->db->where('tbl_character_certificate.is_deleted', '0');		$this->db->where('tbl_character_certificate.issue_status', '0');		$this->db->where('tbl_character_certificate.payment_status', '0');		$this->db->where('tbl_character_certificate.approve_status', '0');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_character_certificate.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_character_certificate.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_character_certificate.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_student.email', $search);			$this->db->or_like('tbl_student.mobile', $search);			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Character Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_character_certificate.student_id");		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_character_certificate.id', 'DESC');		$result = $this->db->get('tbl_character_certificate');		return $result->num_rows();	}	public function get_all_student_charector_certificate_approved_list($length, $start, $search)	{		$this->db->select("tbl_character_certificate.*,tbl_student.pcc,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_character_certificate.is_deleted', '0');		// $this->db->where('tbl_character_certificate.issue_status','1'); 		$this->db->where('tbl_character_certificate.payment_status', '1');		$this->db->where('tbl_character_certificate.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_character_certificate.student_id");		$this->db->order_by('tbl_character_certificate.id', 'DESC');		$this->db->limit($length, $start);		$result = $this->db->get('tbl_character_certificate');		return $result->result();	}	public function get_all_student_charector_certificate_approved_list_count($search)	{		$this->db->select("tbl_character_certificate.*,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile");		$this->db->where('tbl_character_certificate.is_deleted', '0');		// $this->db->where('tbl_character_certificate.issue_status','1');		$this->db->where('tbl_character_certificate.payment_status', '1');		$this->db->where('tbl_character_certificate.approve_status', '1');		if ($this->input->post('type') != "") {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.id = tbl_character_certificate.student_id");		$this->db->order_by('tbl_character_certificate.id', 'DESC');		$result = $this->db->get('tbl_character_certificate');		return $result->num_rows();	}	public function get_print_character_certificate($id)	{		$this->db->select("tbl_signature.signature,tbl_signature.dispalay_signature,tbl_character_certificate.*,tbl_student.student_name,tbl_student.father_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id,auth_tbl_signature.name as auth_signature_name,auth_tbl_signature.signature as auth_signature,auth_tbl_signature.dispalay_signature as auth_dispalay_signature");		$this->db->where('tbl_character_certificate.is_deleted', '0');		// $this->db->where('tbl_character_certificate.issue_status','1'); 		$this->db->where('tbl_character_certificate.approve_status', '1');		$this->db->where('tbl_character_certificate.id', $id);		$this->db->join("tbl_student", "tbl_student.id = tbl_character_certificate.student_id");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_character_certificate.signature_id", "left");		$this->db->join("tbl_signature as auth_tbl_signature", "auth_tbl_signature.id = tbl_character_certificate.auth_signature_id", 'left');		$result = $this->db->get('tbl_character_certificate');		return $result->row();	}	public function get_single_character_certificate($id)	{		$this->db->select("tbl_character_certificate.*,tbl_student.student_name,tbl_student.father_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->where('tbl_character_certificate.is_deleted', '0');		$this->db->where('tbl_character_certificate.id', $id);		$this->db->join("tbl_student", "tbl_student.id = tbl_character_certificate.student_id");		$result = $this->db->get('tbl_character_certificate');		return $result->row();	}	public function get_single_character_certificate_print($id)	{		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_character_certificate.*,tbl_student.father_name,tbl_student.gender,tbl_student.student_name,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile,tbl_student.session_id,tbl_student.course_id,tbl_student.stream_id");		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_character_certificate.enrollment_no");		$this->db->join("tbl_signature", "tbl_signature.id = tbl_character_certificate.signature_id", "left");		$this->db->where('tbl_character_certificate.is_deleted', '0');		$this->db->where('tbl_character_certificate.status', '1');		$this->db->where('tbl_character_certificate.id', $id);		$result = $this->db->get('tbl_character_certificate');		return $result->row();	}	public function set_update_character_details()	{		$data = array(			'transaction_id'	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			// 'issue_status' 	=> $this->input->post('issue_status'),			'approve_status' 	=> $this->input->post('approve_status'),			'payment_status' 	=> $this->input->post('payment_status'),			'payment_status' 	=> $this->input->post('payment_status'),			'signature_id' 		=> $this->input->post('signature'),			'auth_signature_id' => $this->input->post('auth_signature'),			'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_date' 		=> date("Y-m-d", strtotime($this->input->post('payment_date'))),		);		$this->db->where('id', $this->input->post('id'));		$this->db->update('tbl_character_certificate', $data);		return true;	}	public function sent_character_for_print()	{		$ids = $this->input->post('ids');		if (!empty($ids)) {			for ($i = 0; $i < count($ids); $i++) {				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id', $ids[$i]);				$this->db->update('tbl_character_certificate', $data);			}		}		return true;	}	public function get_certificate_amount($type)	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('certificate_type', $type);		$result = $this->db->get('tbl_certificate_fees_relation');		return $result->row();		// echo "<pre>";print_r($result);exit;	}	public function get_unique_certificate_type()	{		$this->db->where('certificate_type', $this->input->post('certificate_type'));		if ($this->input->post('id') != '0') {			$this->db->where('id !=', $this->input->post('id'));		}		$this->db->where('is_deleted', '0');		$result = $this->db->get('tbl_certificate_fees_relation');		echo $result->num_rows();	}	public function get_transfer_certificate_amount($id)	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		// $this->db->where('id',$id);		$this->db->where('certificate_type', '1');		$result = $this->db->get('tbl_certificate_fees_relation');		return $result->row();	}	public function get_student_degree_certificate_amount($id)	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		// $this->db->where('id',$id);		$this->db->where('certificate_type', '2');		$result = $this->db->get('tbl_certificate_fees_relation');		return $result->row();	}	public function get_character_certificate_fees($id)	{		$this->db->where('is_deleted', '0');		$this->db->where('status', '1');		$this->db->where('certificate_type', '10');		$result =  $this->db->get('tbl_certificate_fees_relation');		return $result->row();	}	public function get_single_transfer_student()	{		$this->db->select('tbl_student_transfer.*,tbl_student.enrollment_number,tbl_student.student_name,tbl_student.father_name');		$this->db->where('tbl_student_transfer.id', $this->uri->segment(2));		$this->db->where('tbl_student_transfer.is_deleted', '0');		$this->db->join('tbl_student', 'tbl_student.id = tbl_student_transfer.student_id', 'left');		$result = $this->db->get('tbl_student_transfer');		return $result->row();	}	public function set_transfer_application()	{		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			'signature_id' 		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		if ($this->input->post('id') == "") {			$this->db->insert('tbl_student_transfer', $data);		} else {			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'transaction_id' 	=> $this->input->post('transaction_id'),				'amount' 			=> $this->input->post('amount'),				'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),				'payment_status' 	=> $this->input->post('payment_status'),				'approve_status' 	=> $this->input->post('approve_status'),				'signature_id' 		=> $this->input->post('signature'),			);			$this->db->where('id', $this->input->post('id'));			$this->db->update('tbl_student_transfer', $data);		}		return true;	}	public function get_single_character_student()	{		$this->db->select('tbl_character_certificate.*,tbl_student.enrollment_number,tbl_student.student_name,tbl_student.father_name');		$this->db->where('tbl_character_certificate.id', $this->uri->segment(2));		$this->db->where('tbl_character_certificate.is_deleted', '0');		$this->db->join('tbl_student', 'tbl_student.id = tbl_character_certificate.student_id', 'left');		$result = $this->db->get('tbl_character_certificate');		return $result->row();	}	public function set_character_application()	{		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			'signature_id' 		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		if ($this->input->post('id') == "") {			$this->db->insert('tbl_character_certificate', $data);		} else {			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'transaction_id' 	=> $this->input->post('transaction_id'),				'amount' 			=> $this->input->post('amount'),				'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),				'payment_status' 	=> $this->input->post('payment_status'),				'approve_status' 	=> $this->input->post('approve_status'),				'signature_id' 		=> $this->input->post('signature'),			);			$this->db->where('id', $this->input->post('id'));			$this->db->update('tbl_character_certificate', $data);		}		return true;	}	public function get_single_degree_student()	{		$this->db->select('tbl_student_degree.*,tbl_student.enrollment_number,tbl_student.student_name,tbl_student.father_name');		$this->db->where('tbl_student_degree.id', $this->uri->segment(2));		$this->db->where('tbl_student_degree.is_deleted', '0');		$this->db->join('tbl_student', 'tbl_student.id = tbl_student_degree.student_id', 'left');		$result = $this->db->get('tbl_student_degree');		return $result->row();	}	public function set_degree_application()	{		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			'signature_id' 		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		if ($this->input->post('id') == "") {			$this->db->insert('tbl_student_degree', $data);		} else {			$data = array(				'student_id' 		=> $this->input->post('student_id'),				'transaction_id' 	=> $this->input->post('transaction_id'),				'amount' 			=> $this->input->post('amount'),				'issue_date' 		=> date("Y-m-d", strtotime($this->input->post('issue_date'))),				'payment_status' 	=> $this->input->post('payment_status'),				'approve_status' 	=> $this->input->post('approve_status'),				'signature_id' 		=> $this->input->post('signature'),			);			$this->db->where('id', $this->input->post('id'));			$this->db->update('tbl_student_degree', $data);		}		return true;	}	public function check_student_certificate_history()	{		$this->db->where('is_deleted', '0');		$this->db->where('enrollment_number', $this->input->post('enrollment_number'));		$result = $this->db->get('tbl_student');		$result = $result->row();		if (!empty($result)) {			redirect('student_certificate_history_activity/' . $result->id);		} else {			return false;		}	}	public function get_student_all_certificate_activities()	{		$enrollment = 0;		$activity = array();		$this->db->select('student_name,created_on,enrollment_date,enrollment_number');		$this->db->where('id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$admission = $this->db->get('tbl_student');		$admission = $admission->row();		// $this->db->where('enrollment_number',$enrollment);		// $this->db->where('is_deleted','0');		// $this->db->order_by('id','DESC');		// $transcript = $this->db->get('tbl_transcript');		// $transcript = $transcript->result();		// if(!empty($transcript)){		// 	foreach($transcript as $transcript_result){		// 		$activity[]= array(		// 			'title'				=> 'TRANSCRIPT',		// 			'created_on' 		=> $transcript_result->created_on,		// 			'description' 		=> $admission->student_name.' has applied transcript', 		// 			'remark' 			=> '', 		// 			'single_file' 		=> '', 		// 			'multiple_files'	=> '',		// 			'link'				=> '',		// 			'edit_status'		=> '0',		// 			'id'				=> '0',		// 			'file'				=> '',		// 		);		// 	}		// }		// $this->db->where('enrollment',$enrollment);		// $this->db->where('is_deleted','0');		// $this->db->order_by('id','DESC');		// $consolidate = $this->db->get('tbl_consolidated_marksheet');		// $consolidate = $consolidate->result();		// if(!empty($consolidate)){		// 	foreach($consolidate as $consolidate_result){		// 		$activity[] = array(		// 			'title'				=> 'CONSOLIDATE MARKSHEET',		// 			'created_on' 		=> $consolidate_result->created_on,		// 			'description' 		=> $admission->student_name.' has applied consolidated marksheet', 		// 			'remark' 			=> '', 		// 			'single_file' 		=> '', 		// 			'multiple_files'	=> '',		// 			'link'				=> '',		// 			'edit_status'		=> '0',		// 			'id'				=> '0',		// 			'file'				=> '',		// 		);		// 	}		// }		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$migration = $this->db->get('tbl_student_migration');		$migration = $migration->result();		if (!empty($migration)) {			foreach ($migration as $migration_result) {				$activity[] = array(					'title'				=> 'MIGRATION CERTIFICATE',					'created_on' 		=> $migration_result->created_on,					'description' 		=> $admission->student_name . ' has applied migration',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$transfer = $this->db->get('tbl_student_transfer');		$transfer = $transfer->result();		if (!empty($transfer)) {			foreach ($transfer as $transfer_result) {				$activity[] = array(					'title'				=> 'TRANSFER CERTIFICATE',					'created_on' 		=> $transfer_result->created_on,					'description' 		=> $admission->student_name . ' has applied transfer',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$degree = $this->db->get('tbl_student_degree');		$degree = $degree->result();		if (!empty($degree)) {			foreach ($degree as $degree_result) {				$activity[] = array(					'title'				=> 'DEGREE CERTIFICATE',					'created_on' 		=> $degree_result->created_on,					'description' 		=> $admission->student_name . ' has applied degree',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$provisional_degree = $this->db->get('tbl_student_provisional_degree');		$provisional_degree = $provisional_degree->result();		if (!empty($provisional_degree)) {			foreach ($provisional_degree as $provisional_degree_result) {				$activity[] = array(					'title'				=> 'PROVISIONAL DEGREE CERTIFICATE',					'created_on' 		=> $provisional_degree_result->created_on,					'description' 		=> $admission->student_name . ' has applied provisional degree',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$bonafide = $this->db->get('tbl_bonafide_cer_application');		$bonafide = $bonafide->result();		if (!empty($bonafide)) {			foreach ($bonafide as $bonafide_result) {				$activity[] = array(					'title'				=> 'BONAFIDE CERTIFICATE',					'created_on' 		=> $bonafide_result->created_on,					'description' 		=> $admission->student_name . ' has applied bonafide',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$medium_of_instruction = $this->db->get('tbl_medium_instruction_application');		$medium_of_instruction = $medium_of_instruction->result();		if (!empty($medium_of_instruction)) {			foreach ($medium_of_instruction as $medium_of_instruction_result) {				$activity[] = array(					'title'				=> 'MEDIUM OF INSTRUCTION LETTER',					'created_on' 		=> $medium_of_instruction_result->created_on,					'description' 		=> $admission->student_name . ' has applied medium of instruction',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$no_backlog = $this->db->get('tbl_no_backlog_application');		$no_backlog = $no_backlog->result();		if (!empty($no_backlog)) {			foreach ($no_backlog as $no_backlog_result) {				$activity[] = array(					'title'				=> 'NO BACKLOG LETTER',					'created_on' 		=> $no_backlog_result->created_on,					'description' 		=> $admission->student_name . ' has applied no backlog',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$no_split = $this->db->get('tbl_no_split_application');		$no_split = $no_split->result();		if (!empty($no_split)) {			foreach ($no_split as $no_split_result) {				$activity[] = array(					'title'				=> 'NO SPLIT ISSUE LETTER',					'created_on' 		=> $no_split_result->created_on,					'description' 		=> $admission->student_name . ' has applied no split',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$recommendation = $this->db->get('tbl_student_recommendation_letter');		$recommendation = $recommendation->result();		if (!empty($recommendation)) {			foreach ($recommendation as $recommendation_result) {				$activity[] = array(					'title'				=> 'RECOMMENDATION LETTER',					'created_on' 		=> $recommendation_result->created_on,					'description' 		=> $admission->student_name . ' has applied recommendation letter',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$second_recommendation = $this->db->get('tbl_reccom_letter_application_second');		$second_recommendation = $second_recommendation->result();		if (!empty($second_recommendation)) {			foreach ($second_recommendation as $second_recommendation_result) {				$activity[] = array(					'title'				=> 'SECOND RECOMMENDATION LETTER',					'created_on' 		=> $second_recommendation_result->created_on,					'description' 		=> $admission->student_name . ' has applied second recommendation letter',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		$this->db->where('student_id', $this->uri->segment(2));		$this->db->where('is_deleted', '0');		$this->db->order_by('id', 'DESC');		$character = $this->db->get('tbl_character_certificate');		$character = $character->result();		if (!empty($character)) {			foreach ($character as $character_result) {				$activity[] = array(					'title'				=> 'CHARACTER CERTIFICATE',					'created_on' 		=> $character_result->created_on,					'description' 		=> $admission->student_name . ' has applied character certificate',					'remark' 			=> '',					'single_file' 		=> '',					'multiple_files'	=> '',					'link'				=> '',					'edit_status'		=> '0',					'id'				=> '0',					'file'				=> '',				);			}		}		usort($activity, $this->sortByDate('created_on'));		return $activity;	}	function sortByDate($key)	{		return function ($a, $b) use ($key) {			$t1 = strtotime($a[$key]);			$t2 = strtotime($b[$key]);			return $t2 - $t1;		};	}	public function get_single_student_info()	{		$this->db->select('tbl_student.*,tbl_id_management.id_name,countries.name as country_name,states.name as state_name,cities.name as city_name,tbl_session.session_name,tbl_faculty.faculty_name,tbl_course.course_name,tbl_stream.stream_name,tbl_course_type.course_type as course_type_name,tbl_center.center_name');		$this->db->where('tbl_student.is_deleted', '0');		$this->db->where('tbl_student.id', $this->uri->segment(2));		$this->db->join('tbl_center', 'tbl_center.id = tbl_student.center_id');		$this->db->join('tbl_course', 'tbl_course.id = tbl_student.course_id');		$this->db->join('tbl_course_type', 'tbl_course_type.id = tbl_student.course_type');		$this->db->join('tbl_stream', 'tbl_stream.id = tbl_student.stream_id');		$this->db->join('tbl_faculty', 'tbl_faculty.id = tbl_student.faculty_id');		$this->db->join('tbl_session', 'tbl_session.id = tbl_student.session_id');		$this->db->join('tbl_id_management', 'tbl_id_management.id = tbl_student.id_type');		$this->db->join('countries', 'countries.id = tbl_student.country', 'left');		$this->db->join('states', 'states.id = tbl_student.state', 'left');		$this->db->join('cities', 'cities.id = tbl_student.city', 'left');		$result = $this->db->get('tbl_student');		return $result->row();	}	public function get_consolidated_student_certificate_requests_list($length, $start, $search)	{		// $query1 = $this->attendance_cum_charector_certificate_request_ajax('', '', $search);		$query2 = $this->get_all_migration_certificate_requests_list('', '', $search);		$query3 = $this->get_all_transfer_certificate_requests_list('', '', $search);		$query4 = $this->get_all_student_charector_certificate_requests_list('', '', $search);		$query5 = $this->get_all_student_provisional_degree_requests_list('', '', $search);		$query6 = $this->get_all_student_degree_requests_list('', '', $search);		$query7 = $this->get_all_req_bonafide_list('', '', $search);		// $query8 = $this->get_all_req_appeared_bonafide_list('', '', $search);		$query9 = $this->get_all_req_inst_medium_list('', '', $search);		$query10 = $this->get_all_req_no_backlog_list('', '', $search);		$query11 = $this->get_all_req_no_split_list('', '', $search);		$query12 = $this->get_all_req_reccom_list('', '', $search);		$query13 = $this->get_all_req_reccom_list_second('', '', $search);		$query14 = $this->get_all_credit_transfer_request('', '', $search);		$all_data = array_merge(			// $query1,			$query2,			$query3,			$query4,			$query5,			$query6,			$query7,			// $query8,			$query9,			$query10,			$query11,			$query12,			$query13,			$query14		);		usort($all_data, function ($a, $b) {			return strtotime($b->created_on) - strtotime($a->created_on);		});		$paginated_data = array_slice($all_data, $start, $length);		return $paginated_data;	}	public function get_consolidated_student_certificate_requests_list_count($search)	{		// $query1 = $this->attendance_cum_charector_certificate_request_ajax_count($search);		$query2 = $this->get_all_migration_certificate_requests_list_count($search);		$query3 = $this->get_all_transfer_certificate_requests_list_count($search);		$query4 = $this->get_all_student_charector_certificate_requests_list_count($search);		$query5 = $this->get_all_student_provisional_degree_requests_list_count($search);		$query6 = $this->get_all_student_degree_requests_list_count($search);		$query7 = $this->get_all_req_bonafide_list_count($search);		// $query8 = $this->get_all_req_appeared_bonafide_list_count($search);		$query9 = $this->get_all_req_inst_medium_list_count($search);		$query10 = $this->get_all_req_no_backlog_list_count($search);		$query11 = $this->get_all_req_no_split_list_count($search);		$query12 = $this->get_all_req_reccom_list_count($search);		$query13 = $this->get_all_req_reccom_list_count_second($search);		$query14 = $this->get_all_credit_transfer_request_count($search);		$total_count =			// $query1 +			$query2 + $query3 + $query4 + $query5 +			$query6 + $query7 +			// $query8 + 			$query9 + $query10 +			$query11 + $query12 + $query13 + $query14;		return $total_count;	}	// public function attendance_cum_charector_certificate_request_ajax_count($search)	// {	// 	$this->db->select("tbl_attendance_letter.*,tbl_student.pcc,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name,'Attendance Certificate' as certificate_type,'attendance_cum_charector_certificate_apply' as certificate_link");	// 	$this->db->where('tbl_attendance_letter.is_deleted', '0');	// 	$this->db->where('tbl_attendance_letter.approve_status', '0');	// 	if ($this->input->post('type') != '') {	// 		$this->db->where('tbl_student.course_for', $this->input->post('type'));	// 	}	// 	if ($search != "") {	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name', $search);	// 		$this->db->or_like('tbl_student.enrollment_number', $search);	// 		$this->db->or_like('tbl_attendance_letter.transaction_id', $search);	// 		$this->db->or_like('tbl_attendance_letter.created_on', $search);	// 		$this->db->or_like('tbl_center.center_name', $search);	// 		$this->db->or_where('\'Attendance Certificate\' LIKE', '%' . $search . '%');	// 		$this->db->group_end();	// 	}	// 	if ($this->input->post('payment_status') != "") {	// 		$this->db->where('tbl_attendance_letter.payment_status', $this->input->post('payment_status'));	// 	}	// 	if ($this->input->post('from_date') != "") {	// 		$this->db->where('DATE(tbl_attendance_letter.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));	// 	}	// 	if ($this->input->post('to_date') != "") {	// 		$this->db->where('DATE(tbl_attendance_letter.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));	// 	}	// 	$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_attendance_letter.enrollment_number");	// 	$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");	// 	$this->db->order_by('tbl_attendance_letter.id', 'DESC');	// 	$result = $this->db->get('tbl_attendance_letter');	// 	return $result->num_rows();	// }	// public function get_all_req_appeared_bonafide_list_count($search)	// {	// 	$this->db->select("tbl_appeared_bonafide_cer_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile, 'Appeared Bonafide Certificate' as certificate_type, 'update_payment_appeared_bonafide' as certificate_link");	// 	$this->db->where('tbl_appeared_bonafide_cer_application.is_deleted', '0');	// 	$this->db->where('tbl_appeared_bonafide_cer_application.status', '1');	// 	$this->db->where('tbl_appeared_bonafide_cer_application.application_status', '0');	// 	if ($this->input->post('type') != "") {	// 		$this->db->where('tbl_student.course_for', $this->input->post('type'));	// 	}	// 	if ($this->input->post('payment_status') != "") {	// 		$this->db->where('tbl_appeared_bonafide_cer_application.payment_status', $this->input->post('payment_status'));	// 	}	// 	if ($this->input->post('from_date') != "") {	// 		$this->db->where('DATE(tbl_appeared_bonafide_cer_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));	// 	}	// 	if ($this->input->post('to_date') != "") {	// 		$this->db->where('DATE(tbl_appeared_bonafide_cer_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));	// 	}	// 	if ($search != "") {	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name', $search);	// 		$this->db->or_like('tbl_student.enrollment_number', $search);	// 		$this->db->or_like('tbl_appeared_bonafide_cer_application.enrollment_no', $search);	// 		$this->db->or_where('\'Appeared Bonafide Certificate\' LIKE', '%' . $search . '%');	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_appeared_bonafide_cer_application.enrollment_no");	// 	$this->db->order_by('tbl_appeared_bonafide_cer_application.id', 'DESC');	// 	$result = $this->db->get('tbl_appeared_bonafide_cer_application');	// 	return $result->num_rows();	// }	public function attendance_cum_charector_certificate_request_ajax_approved_count($search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_attendance_letter.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name");		$this->db->where('tbl_attendance_letter.is_deleted', '0');		$this->db->where('tbl_attendance_letter.approve_status', '1');		if ($this->input->post('type') != '') {			$this->db->where('tbl_student.course_for', $this->input->post('type'));		}		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_attendance_letter.transaction_id', $search);			$this->db->or_like('tbl_attendance_letter.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->group_end();		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_attendance_letter.enrollment_number");		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_attendance_letter.id', 'DESC');		$result = $this->db->get('tbl_attendance_letter');		return $result->num_rows();	}	public function attendance_cum_charector_certificate_request_ajax($length, $start, $search)	{		$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_attendance_letter.*,tbl_student.pcc,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.old_migration,tbl_center.center_name,'Attendance Certificate' as certificate_type,'attendance_cum_charector_certificate_apply' as certificate_link");		$this->db->where('tbl_attendance_letter.is_deleted', '0');		$this->db->where('tbl_attendance_letter.approve_status', '0');		if ($search != "") {			$this->db->group_start();			$this->db->or_like('tbl_student.student_name', $search);			$this->db->or_like('tbl_student.enrollment_number', $search);			$this->db->or_like('tbl_attendance_letter.transaction_id', $search);			$this->db->or_like('tbl_attendance_letter.created_on', $search);			$this->db->or_like('tbl_center.center_name', $search);			$this->db->or_where('\'Attendance Certificate\' LIKE', '%' . $search . '%');			$this->db->group_end();		}		if ($this->input->post('payment_status') != "") {			$this->db->where('tbl_attendance_letter.payment_status', $this->input->post('payment_status'));		}		if ($this->input->post('from_date') != "") {			$this->db->where('DATE(tbl_attendance_letter.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));		}		if ($this->input->post('to_date') != "") {			$this->db->where('DATE(tbl_attendance_letter.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));		}		$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_attendance_letter.enrollment_number");		$this->db->join("tbl_center", "tbl_student.center_id = tbl_center.id");		$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");		$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");		$this->db->order_by('tbl_attendance_letter.id', 'DESC');		if ($length != "" && $length != "") {			$this->db->limit($length, $start);		}		$result = $this->db->get('tbl_attendance_letter');		return $result->result();	}	// public function get_all_req_appeared_bonafide_list($length, $start, $search)	// {	// 	$this->db->select("tbl_course.course_name,tbl_stream.stream_name,tbl_appeared_bonafide_cer_application.*,tbl_student.student_name,tbl_student.course_for,tbl_student.enrollment_number,tbl_student.email,tbl_student.mobile, 'Appeared Bonafide Certificate' as certificate_type, 'update_payment_appeared_bonafide' as certificate_link");	// 	$this->db->where('tbl_appeared_bonafide_cer_application.is_deleted', '0');	// 	$this->db->where('tbl_appeared_bonafide_cer_application.status', '1');	// 	$this->db->where('tbl_appeared_bonafide_cer_application.application_status', '0');	// 	if ($this->input->post('type') != "") {	// 		$this->db->where('tbl_student.course_for', $this->input->post('type'));	// 	}	// 	if ($this->input->post('payment_status') != "") {	// 		$this->db->where('tbl_appeared_bonafide_cer_application.payment_status', $this->input->post('payment_status'));	// 	}	// 	if ($this->input->post('from_date') != "") {	// 		$this->db->where('DATE(tbl_appeared_bonafide_cer_application.created_on) >=', date('Y-m-d', strtotime($this->input->post('from_date'))));	// 	}	// 	if ($this->input->post('to_date') != "") {	// 		$this->db->where('DATE(tbl_appeared_bonafide_cer_application.created_on) <=', date('Y-m-d', strtotime($this->input->post('to_date'))));	// 	}	// 	if ($search != "") {	// 		$this->db->group_start();	// 		$this->db->or_like('tbl_student.student_name', $search);	// 		$this->db->or_like('tbl_student.enrollment_number', $search);	// 		$this->db->or_like('tbl_appeared_bonafide_cer_application.enrollment_no', $search);	// 		$this->db->or_where('\'Appeared Bonafide Certificate\' LIKE', '%' . $search . '%');	// 		$this->db->group_end();	// 	}	// 	$this->db->join("tbl_student", "tbl_student.enrollment_number = tbl_appeared_bonafide_cer_application.enrollment_no");	// 	$this->db->join("tbl_course", "tbl_course.id = tbl_student.course_id");	// 	$this->db->join("tbl_stream", "tbl_stream.id = tbl_student.stream_id");	// 	$this->db->order_by('tbl_appeared_bonafide_cer_application.id', 'DESC');	// 	if ($length != "" && $length != "") {	// 		$this->db->limit($length, $start);	// 	}	// 	$result = $this->db->get('tbl_appeared_bonafide_cer_application');	// 	return $result->result();	// }}