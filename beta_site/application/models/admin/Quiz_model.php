<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class Quiz_model extends CI_Model { 	function __construct(){    	parent::__construct();    }	public function check_student_login(){		$this->db->where('mobile_number',$this->input->post('student_email'));		$this->db->where('password',$this->input->post('student_password'));		$this->db->where('payment_status','1');		$result = $this->db->get('tbl_phd_registration_form');		$result = $result->row();		// echo "<pre>";print_r($result);exit;		if(!empty($result)){			$data = array(				'stud_id' => $result->id,				'student_email' => $result->email_id,				'student_name'  => $result->student_name,				'stream_id'     => $result->stream,			);				$this->session->set_userdata($data);			return true;		}else{			return false;		}	}	public function get_examination_list(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$result = $this->db->get('tbl_test_title_for_phd');		return $result->result();		// $result = $result->result();		// echo "<pre>";print_r($result);exit;	}	public function get_score_of_student($student_email,$exam_id){		$this->db->select('score');		$this->db->where('student_email',$student_email);		$this->db->where('test_id',$exam_id);		$this->db->where('is_deleted','0');		$result = $this->db->get('tbl_phd_ent_scores');		return $result->row();	}	// public function get_question_paper(){	// 	$row=$this->get_question_limit($this->uri->segment(2));    //     // print_r($row);exit();  	// 	$this->db->where('test_id',$this->uri->segment(2));	// 	$this->db->where('status','1');	// 	$this->db->where('is_deleted','0');	// 	$this->db->where('question_type','0');	// 	$this->db->order_by('id','RANDOM');	// 	$this->db->limit($row->common_question_limit);	// 	$result_1 = $this->db->get('tbl_question_ans');	// 	$result_1 = $result_1->result();			// 	$this->db->where('test_id',$this->uri->segment(2));	// 	$this->db->where('status','1');	// 	$this->db->where('is_deleted','0');	// 	$this->db->where('question_type','1');	// 	$this->db->order_by('id','RANDOM');	// 	$this->db->limit($row->stream_question_limit);	// 	$result_2   = $this->db->get('tbl_question_ans');	// 	$result_2 = $result_2->result();	// 	$total = array_merge($result_1,$result_2);	// 	return $total;	// }	public function get_question_paper(){		$row=$this->get_question_limit($this->uri->segment(2));		$this->db->where('test_id',$this->uri->segment(2));		$this->db->where('status','1');		$this->db->where('is_deleted','0');		$this->db->where('question_type','1');		$this->db->order_by('id','RANDOM');		$this->db->limit($row->common_question_limit);		$result_1 = $this->db->get('tbl_question_ans');		$result_1 = $result_1->result();		$this->db->where('test_id',$this->uri->segment(2));		$this->db->where('status','1');		$this->db->where('is_deleted','0');		$this->db->where('question_type','2');		$this->db->order_by('id','RANDOM');		$this->db->limit($row->stream_question_limit);		$result_2   = $this->db->get('tbl_question_ans');		$result_2 = $result_2->result();		$total = array_merge($result_1,$result_2);		return $total;		// echo "<pre>";print_r($total);exit;	}	public function get_test_title(){		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_test_title_for_phd');		if($result->num_rows() > 1){			return "";		}else{			return $result->row()->test_name;		}	}	public function save_test_answers($test_no){		// echo "<pre>";print_r($_POST);exit;				$exam_data = array(			'student_id' 	=> $this->session->userdata('stud_id'),			'student_email' => $this->session->userdata('student_email'),			'test_id' 		=> $test_no,			'score' 		=> '0',			"created_on" 	=>  date("Y-m-d H:i:s"),		);		$this->db->insert('tbl_phd_ent_scores',$exam_data);		$last_id = $this->db->insert_id();		$data = array();		$correct_answer = 0;		$question = $this->input->post('question');		if(!empty($question)){			for($i=0;$i<count($question);$i++){				$given_answer = '0';				if($this->input->post('option'.$question[$i])){					$ans = $this->input->post('option'.$question[$i]);					$given_answer = $ans[0];				}				// echo "<pre>";print_r($given_answer);exit;				$this->db->where('test_id',$test_no);				$this->db->where('id',$question[$i]);				$this->db->where('correct_ans',$given_answer);				$exist = $this->db->get('tbl_question_ans');				$exist = $exist->row();				if(!empty($exist)){					$correct_answer = $correct_answer+1;				}				$data[] = array(					'student_id' 		=> $this->session->userdata('stud_id'),					'student_exam_id'	=> $last_id,					'question_id'		=> $question[$i],					'given_answer'		=> $given_answer,					'test_id' 			=> $test_no, //					'created_on'		=> date("Y-m-d H:i:s"),				);				// echo "<pre>";print_r($data);exit;			}			$this->db->insert_batch('tbl_phd_entrance_details',$data);		}		$update_data = array(			'score' => $correct_answer		);		$this->db->where('id',$last_id);		$this->db->update('tbl_phd_ent_scores',$update_data);		if($correct_answer>=33){			// load email library			$this->load->library('email');			$config['protocol'] = 'sendmail';			$config['mailpath'] = '/usr/sbin/sendmail';			$config['charset'] = 'iso-8859-1';			$config['wordwrap'] = TRUE;			$this->email->initialize($config);			// prepare email			$this->email				->from(no_reply_mail)				->to($student_email)				->subject("Entrance Exam Result |" . no_reply_name)				->message('<h2>Dear Scholar</h2>,				<br>				<p>You have cleared the entrance exam.</p>				<br>				<p>Please follow the further process for admission.</p>								')				->set_mailtype('html');			// send email			//$this->email->send();		}	}	public function save_phd_entrance_score($student_email,$test_no){		$this->db->where("student_email",$student_email);		$this->db->where("test_id",$test_no);		$result = $this->db->get('tbl_test_phd_students');		$data = $result->row()->test_ans;		$json = json_decode($data,true);				$answers = $this->get_question_id_ans($test_no);		$question_ans = array();		foreach ($answers as $key) {			$question_ans[$key->id] = $key->correct_ans;		}		$score = 0;		foreach ($json as $key) {			$q_id = $key['q_id'];			$j_ans = json_decode($key['ans'],true);			if($question_ans[$q_id] == $j_ans['selected_ans']){				$score++;			}								}				$this->set_phd_score($score,$student_email,$test_no);	}	// public function set_phd_score($score,$student_email,$test_no){			// 	$data = array(	// 		'student_id' 	=> $this->session->userdata('stud_id'),	// 		'student_email' => $student_email,	// 		'test_id' 		=> $test_no,	// 		'score' 		=> $score,	// 		"created_on" 	=>  date("Y-m-d H:i:s"),	// 	);	// 	if($score>=33){			// 		// load email library	// 		$this->load->library('email');	// 		$config['protocol'] = 'sendmail';	// 		$config['mailpath'] = '/usr/sbin/sendmail';	// 		$config['charset'] = 'iso-8859-1';	// 		$config['wordwrap'] = TRUE;	// 		$this->email->initialize($config);	// 		// prepare email	// 		$this->email	// 			->from('no-reply@tgu.ac.in', 'THE GLOBAL UNIVERSITY')	// 			->to($student_email)	// 			->subject("Entrance Exam Result")	// 			->message('<h2>Dear Scholar</h2>,	// 			<br>	// 			<p>You have cleared the entrance exam.</p>	// 			<br>	// 			<p>Please follow the further process for admission.</p>					// 			')	// 			->set_mailtype('html');	// 		// send email	// 		//$this->email->send();	// 	}			// 	$this->db->insert('tbl_phd_ent_scores',$data);	// }	public function set_phd_score($score,$student_email,$test_no){				$data = array(			'student_id' 	=> $this->session->userdata('stud_id'),			'student_email' => $student_email,			'test_id' 		=> $test_no,			'score' 		=> $score,			"created_on" 	=>  date("Y-m-d H:i:s"),		);		if($score>=33){					$this->load->library('email'); 			$config['protocol'] = 'sendmail'; 			$config['mailpath'] = '/usr/sbin/sendmail'; 			$config['mailtype'] = 'html'; 			$config['charset'] = 'iso-8859-1'; 			$config['wordwrap'] = TRUE;  			$this->email->initialize($config);   			$this->email->from(no_reply_mail); 			$this->email->to($student_email); 			$this->email->subject('Entrance Exam Result | '.no_reply_name);  			$this->email->set_mailtype('html'); 			$message = "<h2>Dear Scholar</h2>,				<br>				<p>You have cleared the entrance exam.</p>				<br>				<p>Please follow the further process for admission.</p>"; 			$message .="<br>Regards,<br>IT Team";			// print_r($message);exit;			$this->email->message($message); 			if($this->email->send()){  			}else{ 			}		}				$this->db->insert('tbl_phd_ent_scores',$data);	}	public function get_question_ids_of_test($test){		$this->db->select('id');		$this->db->where('test_id',$test);		$this->db->where('status','1');		$result = $this->db->get('tbl_question_ans');		return $result->result();	}	public function get_question_id_ans($test_no){		$this->db->select('id,correct_ans');		$this->db->where('test_id',$test_no);		$this->db->where('status','1');		$result = $this->db->get('tbl_question_ans');		return $result->result();	}	/*public function get_quiz_by_test_id($test_id){		$this->db->where('status','0');		$this->db->where('test_id',$test_id);		$result = $this->db->get('tbl_question_ans');		return $result->result();	}	public function get_question_by_id($id){		$this->db->where('status','0');		$this->db->where('id',$id);		$result = $this->db->get('tbl_question_ans');		return $result->row();	}*/		public function get_question_limit($tbl_test_title_for_phd_id){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$tbl_test_title_for_phd_id);		$result = $this->db->get('tbl_test_title_for_phd');		return $result->row();	}} 