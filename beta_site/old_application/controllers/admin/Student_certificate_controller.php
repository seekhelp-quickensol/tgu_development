<?php if (! defined('BASEPATH')) exit('No direct script access allowed');class Student_certificate_controller extends CI_Controller{	public function __construct()	{		parent::__construct();		$this->is_logged();		$this->check_access();	}	public function is_logged()	{		if ($this->session->userdata('admin_id') == "") {			redirect('erp-access');		}	}	public function check_access()	{		$access = $this->Setting_model->get_user_privilege_link();		if (!in_array($this->uri->segment(1), $access)) {			//$this->session->set_flashdata('message','Sorry! You dont have access to this module!');			//redirect(base_url());		}	}	public function student_migration_certificate_requests()	{		$this->load->view("admin/student_migration_certificate_requests");	}	public function student_migration_certificate_add_requests()	{		$this->form_validation->set_rules("enrollment_number", "enrollment number", "required");		$data['single'] = $this->Student_certificate_model->get_single_migration_student();		$data['signature'] = $this->Setting_model->get_all_signature();		$data['amount'] = $this->Student_certificate_model->get_certificate_amount('0');		// echo "<pre>";print_r($data['amount']);exit;		if ($this->form_validation->run() === FALSE) {			$this->load->view("admin/student_migration_certificate_add_requests", $data);		} else {			$this->Student_certificate_model->set_migration_application();			$this->session->set_flashdata("success", "Application added successfully");			redirect('student_migration_certificate_requests');		}	}	public function student_migration_certificates()	{		$this->load->view("admin/student_migration_certificate");	}	public function print_student_migration_certificate()	{		$data["migration"] = $this->Student_certificate_model->get_print_migration_certificate($this->uri->segment(2));		$this->load->view("admin/print_migration_certificate", $data);	}	public function student_migration_send_to_print()	{		$this->Student_certificate_model->student_migration_send_to_print();		$this->session->set_flashdata("success", "Migration certificates sent to print successfully");		redirect('student_migration_certificates');	}	public function student_transfer_cer_send_to_print()	{		$this->Student_certificate_model->student_transfer_cer_send_to_print();		$this->session->set_flashdata("success", "Transfer certificates sent to print successfully");		redirect('approved_student_transfer_certificate');	}	public function print_transfer_certificate()	{		$data['transfer'] = $this->Student_certificate_model->get_print_transfer_regular_certificate($this->uri->segment(2));		$html = $this->load->view('admin/print_transfer_regular', $data);	}	public function student_consolidated_send_to_print()	{		$this->Student_certificate_model->student_consolidated_send_to_print();		$this->session->set_flashdata("success", "Consolidated marksheet sent to print successfully");		redirect('consolidated_list');	}	public function student_transcript_send_to_print()	{		$this->Student_certificate_model->student_transcript_send_to_print();		$this->session->set_flashdata("success", "Student transcript sent to print successfully");		redirect('student_transcript_certificate_approved');	}	public function student_degree_send_to_print()	{		$this->Student_certificate_model->student_degree_send_to_print();		$this->session->set_flashdata("success", "Student Degrees sent to print successfully");		redirect('approved_student_degrees');	}	public function print_provisional_degree_certificate_regular()	{		$data['provisional_degree'] = $this->Student_certificate_model->get_print_provisional_degree_certificate_regular($this->uri->segment(2));		$data["division"] = $this->Student_certificate_model->get_print_division_for_degree_regular($data['provisional_degree']->student_id, $data['provisional_degree']->course_id);		// echo "<pre>";print_r($data['division']);exit;		$this->load->view("admin/print_provisional_degree_regular", $data);	}	public function student_prov_degree_send_to_print()	{		$this->Student_certificate_model->student_prov_degree_send_to_print();		$this->session->set_flashdata("success", "Student Provisional Degrees sent to print successfully");		redirect('student_approved_provisional_degrees');	}	public function verify_student_migration_requests()	{		$this->form_validation->set_rules("issue_date", "issue date", "required");		if ($this->form_validation->run() === FALSE) {			$data['migration'] = $this->Student_certificate_model->get_single_migration();			$this->load->view("admin/update_migration_issue_date", $data);		} else {			$this->Student_certificate_model->update_migration_issue_date();			$this->session->set_flashdata("success", "Verified and Migration Certificate generated successfully");			redirect('student_migration_certificate_requests');		}	}	public function unverify_student_migration_certificate()	{		$this->Student_certificate_model->unverify_student_migration_certificate();		$this->session->set_flashdata("success", "Un-Verified and Migration Certificate deactivated successfully");		redirect($_SERVER["HTTP_REFERER"]);	}	public function student_transfer_certificate_requests()	{		$this->form_validation->set_rules("reason_of_transfer", "reason", "required");		if ($this->form_validation->run() === FALSE) {			$this->load->view("admin/student_transfer_certificate_requests");		} else {			$this->Student_certificate_model->approve_student_transfer_certificate_requests();			$this->session->set_flashdata("success", "Approved and Transfer Certificate Generated successfully");			redirect($_SERVER["HTTP_REFERER"]);		}		//$this->load->view("admin/student_transfer_certificate_requests");	}	public function approved_student_transfer_certificate()	{		$this->load->view("admin/approved_student_transfer_certificate");	}	public function approved_student_certificate()	{		$this->form_validation->set_rules("issue_date", "issue date", "required");		if ($this->form_validation->run() === FALSE) {			$data['transfer'] = $this->Student_certificate_model->get_single_transfer();			$data['signature'] = $this->Setting_model->get_all_signature();			// $data['amount'] = $this->Student_certificate_model->get_transfer_certificate_amount($this->uri->segment(2));			// echo "<pre>";print_r($data['amount']);exit;			$this->load->view("admin/update_transfer_issue_date", $data);		} else {			$this->Student_certificate_model->update_transfer_issue_date();			$this->session->set_flashdata("success", "Verified and Transfer Certificate generated successfully");			redirect('student_transfer_certificate_requests');		}	}	public function unapproved_student_transfer_certificate()	{		$this->Student_certificate_model->unapproved_student_transfer_certificate();		$this->session->set_flashdata("success", "Un-Approved and Transfer Certificate deactivated successfully");		redirect($_SERVER["HTTP_REFERER"]);	}	public function student_reccomendation_letter_requests()	{		$this->load->view("admin/student_reccomendation_letter_requests");	}	public function approve_student_recommendation_letter()	{		$this->Student_certificate_model->approve_student_recommendation_letter();		$this->session->set_flashdata("success", "Approved and Reccomendation Letter Activated successfully");		redirect($_SERVER["HTTP_REFERER"]);	}	public function approved_student_recommendation_letters()	{		$this->load->view("admin/approved_student_recommendation_letters");	}	public function unapproved_student_recommendation_letter()	{		$this->Student_certificate_model->unapproved_student_recommendation_letter();		$this->session->set_flashdata("success", "Un-Approved and Reccomendation Letter Deactivated successfully");		redirect($_SERVER["HTTP_REFERER"]);	}	public function student_degree_failed_payment()	{		$this->load->view("admin/student_degree_failed_payment");	}	public function student_degree_requests()	{		$this->load->view("admin/student_degree_requests");	}	public function approved_student_degree_request()	{		$this->form_validation->set_rules("issue_date", "issue date", "required");		if ($this->form_validation->run() === FALSE) {			$data['degree'] = $this->Student_certificate_model->get_single_degree();			$data['signature'] = $this->Setting_model->get_all_signature();			$data['amount'] = $this->Student_certificate_model->get_student_degree_certificate_amount($this->uri->segment(2));			// echo "<pre>";print_r($data['amount']);exit;			$this->load->view("admin/update_degree_issue_date", $data);		} else {			$this->Student_certificate_model->update_degree_issue_date();			$this->session->set_flashdata("success", "Verified and Migration Certificate generated successfully");			// redirect('student_degree_requests');			redirect('student_degree_failed_payment');		}	}	public function unapproved_student_degree()	{		$this->Student_certificate_model->unapproved_student_degree();		$this->session->set_flashdata("success", "Un-Approved and Degree Deactivated successfully");		redirect($_SERVER["HTTP_REFERER"]);	}	public function approved_student_degrees()	{		$this->load->view("admin/approved_student_degrees");	}	public function print_degree()	{		$data["degree"] = $this->Student_certificate_model->get_student_degree($this->uri->segment(2));		$data["division_degree"] = $this->Student_certificate_model->get_student_division_for_degree_new_degree($data["degree"]->student_id);		//print_r($data["division_degree"]);exit;		$this->load->view("admin/print_degree", $data);	}	public function student_provisional_degree_requests()	{		$this->load->view("admin/student_provisional_degree_requests");	}	public function student_approved_provisional_degrees()	{		$this->load->view("admin/approved_student_provisional_degrees");	}	public function apply_student_provisional_degrees()	{		$this->form_validation->set_rules("issue_date", "issue date", "required");		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_provisional_student();			$data['signature'] = $this->Setting_model->get_all_signature();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('3');			// echo "<pre>";print_r($data['amount']);exit;			$this->load->view("admin/apply_student_provisional_degrees", $data);		} else {			$this->Student_certificate_model->apply_student_provisional_degrees();			$this->session->set_flashdata("success", "Details updated successfully");			redirect('student_provisional_degree_requests');		}	}	public function approved_student_provisional_degrees()	{		$this->form_validation->set_rules("issue_date", "issue date", "required");		if ($this->form_validation->run() === FALSE) {			$data['provisional_degree'] = $this->Student_certificate_model->get_single_provisional_degree();			$this->load->view("admin/update_provisional_degree_issue_date", $data);		} else {			$this->Student_certificate_model->update_provisional_degree_issue_date();			$this->session->set_flashdata("success", "Verified and Migration Certificate generated successfully");			redirect('student_provisional_degree_requests');		}	}	public function student_transcript_certificate_failed()	{		$this->load->view("admin/student_transcript_certificate_failed");	}	public function student_transcript_certificate_success()	{		$this->load->view("admin/student_transcript_certificate_success");	}	public function student_transcript_certificate_approved()	{		$this->load->view("admin/student_transcript_certificate_approved");	}	public function print_admin_transcript()	{		$data['transcript'] = $this->Student_certificate_model->get_print_transcript($this->uri->segment(2));		$this->load->view('admin/print_transcript', $data);	}	public function add_student_transcript_certificate()	{		if ($this->input->post('next') == "next") {			$result = $this->Student_certificate_model->get_vlaidate_student();		}		$this->form_validation->set_rules('enrollment_number', 'enrollment number', 'required');		if ($this->form_validation->run() === FALSE) {			$data['student_details'] = $this->Consolidated_model->get_student_details();			//$data['subject'] = $this->Consolidated_model->get_student_result();			if (!empty($data['student_details'])) {				$data['consolidate'] = $this->Consolidated_model->get_sinlge_consolidate_result_for_transcript($data['student_details']->enrollment_number);				if (empty($data['consolidate'])) {					$this->session->set_flashdata("message", "Please add consolidate marksheet before applying transcript");					redirect('add_student_transcript_certificate');				}				$data['subject_details'] = $this->Consolidated_model->get_consolidate_result_for_transcript($data['consolidate']->id);			}			$this->load->view("admin/add_student_transcript_certificate", $data);		} else {			$result = $this->Student_certificate_model->set_transcript_form();			$this->session->set_flashdata("success", "Transcript added successfully");			redirect('add_student_transcript_certificate');		}	}	public function edit_transcript()	{		$this->form_validation->set_rules('enrollment_number', 'enrollment number', 'required');		if ($this->form_validation->run() === FALSE) {			$data['transcript'] = $this->Student_certificate_model->get_single_transcript();			$data['details'] = $this->Student_certificate_model->get_single_transcript_details();			$this->load->view("admin/edit_transcript", $data);		} else {			$result = $this->Student_certificate_model->update_transcript();			$this->session->set_flashdata("success", "Transcript updated successfully");			redirect($_SERVER['HTTP_REFERER']);		}	}	public function update_transcript_payment()	{		$this->form_validation->set_rules('bank', 'bank', 'required');		if ($this->form_validation->run() === FALSE) {			$data['bank'] = $this->Setting_model->get_all_bank_list();			$data['transcript'] = $this->Student_certificate_model->get_single_transcript();			$data['signature'] = $this->Setting_model->get_all_signature();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('11');			// echo "<pre>";print_r($data['amount']);exit;			$this->load->view("admin/update_transcript_payment", $data);		} else {			$result = $this->Student_certificate_model->update_transcript_payment();			$this->session->set_flashdata("success", "Transcript payment updated successfully");			// redirect($_SERVER['HTTP_REFERER']);			redirect('student_transcript_certificate_failed');		}	}	public function approve_transcript()	{		$this->form_validation->set_rules('issue_date', 'issue date', 'required');		if ($this->form_validation->run() === FALSE) {			$data['transcript'] = $this->Student_certificate_model->get_single_transcript();			$this->load->view("admin/update_transcript_issue_date", $data);		} else {			$result = $this->Student_certificate_model->approve_transcript();			$this->session->set_flashdata("success", "Transcript updated successfully");			redirect('student_transcript_certificate_success');		}	}	public function disapprove_transcript()	{		$result = $this->Student_certificate_model->disapprove_transcript();		$this->session->set_flashdata("success", "Transcript unapproved successfully");		redirect($_SERVER['HTTP_REFERER']);	}	//letters on 18 july	public function student_apply_bonafide_cer()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_bona_application();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('4');			// echo "<pre>";print_r($data['amount'] );exit;			$this->load->view('admin/student_apply_bonafide_cer', $data);		} else {			$res = $this->Student_certificate_model->student_apply_bonafide_cer();			if ($res == 0) {				$this->session->set_flashdata("success", "Bonafide Certificate application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'Bonafide Certificate application updated successfully!!');			}			redirect('student_req_bonafide_cer');		}	}	public function student_req_bonafide_cer()	{		$data['application'] = $this->Student_certificate_model->get_all_bona_application();		// echo"<pre>";print_r($data['application']);exit();		$this->load->view('admin/student_req_bonafide_cer', $data);	}	public function approve_bona_application()	{		$result = $this->Student_certificate_model->approve_bona_application();		$this->session->set_flashdata("success", "Bonafid Certificate application approved successfully");		redirect('student_approved_bonafide_cer');	}	public function update_payment_bonafide()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_bona_application_new();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/approve_bona_application", $data);		} else {			$result = $this->Student_certificate_model->update_payment_bonafide();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('student_req_bonafide_cer');		}	}	public function disapprove_bona_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_bona_application_new();			$this->load->view("admin/disapprove_bona_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_bona_application();			$this->session->set_flashdata("success", "Bonafid Certificate application disapproved successfully");			redirect('student_req_bonafide_cer');		}	}	public function student_approved_bonafide_cer()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_bonofied_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_approved_bonafide_cer');		}		$data['application'] = $this->Student_certificate_model->student_approved_bonafide_cer();		$this->load->view('admin/student_approved_bonafide_cer', $data);	}	public function print_bonafide_cer()	{		$data['single'] = $this->Student_certificate_model->get_single_bona_application_print($this->uri->segment(2));		$data['division'] = $this->Admin_model->get_student_division_for_degree($data['single']->student_id);		$this->load->view('admin/print_bonafide_cer', $data);	}	public function student_apply_bonafide_scholarship_cer()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_bona_scholarship_application();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('5');			// echo "<pre>";print_r($data['amount'] );exit;			$this->load->view('admin/student_apply_bonafide_scholarship_cer', $data);		} else {			$res = $this->Student_certificate_model->student_apply_bonafide_scholarship_cer();			if ($res == 0) {				$this->session->set_flashdata("success", "Bonafide Certificate application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'Bonafide Certificate application updated successfully!!');			}			redirect('student_req_bonafide_scholarship_cer');		}	}	public function student_req_bonafide_scholarship_cer()	{		$data['application'] = $this->Student_certificate_model->get_all_bona_scholarship_application();		$this->load->view('admin/student_req_bonafide_scholarship_cer', $data);	}	public function approve_bona_scholarship_application()	{		$result = $this->Student_certificate_model->approve_bona_application();		$this->session->set_flashdata("success", "Bonafid Certificate application approved successfully");		redirect('student_approved_bonafide_cer');	}	public function update_payment_bonafide_scholarship()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_bona_scholarship_application_new();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/approve_bona_scholarship_application", $data);		} else {			$result = $this->Student_certificate_model->update_payment_bonafide_scholarship();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('student_req_bonafide_scholarship_cer');		}	}	public function disapprove_bona_scholarship_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_bona_application_new();			$this->load->view("admin/disapprove_bona_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_bona_application();			$this->session->set_flashdata("success", "Bonafid Certificate application disapproved successfully");			redirect('student_req_bonafide_cer');		}	}	public function student_approved_bonafide_scholarship_cer()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_bonofied_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_approved_bonafide_scholarship_cer');		}		$data['application'] = $this->Student_certificate_model->student_approved_bonafide_scholarship_cer();		$this->load->view('admin/student_approved_bonafide_scholarship_cer', $data);	}	public function print_bonafide_scholarship_cer()	{		$data['single'] = $this->Student_certificate_model->get_single_bona_scholarship_application_print($this->uri->segment(2));		$data['division'] = $this->Admin_model->get_student_division_for_degree($data['single']->student_id);		$this->load->view('admin/print_bonafide_scholarship_cer', $data);	}	public function student_apply_inst_medium_letter()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_inst_medium_letter_application();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('5');			$this->load->view('admin/student_apply_inst_medium_letter', $data);		} else {			$res = $this->Student_certificate_model->student_apply_inst_medium_letter();			if ($res == 0) {				$this->session->set_flashdata("success", "Medium of Instruction Letter application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'Medium of Instruction Letter application updated successfully!!');			}			redirect('student_req_inst_medium_letter');		}	}	public function student_req_inst_medium_letter()	{		$data['application'] = $this->Student_certificate_model->get_all_inst_medium_application();		$this->load->view('admin/student_req_inst_medium_letter', $data);	}	public function approve_inst_medium_application()	{		$result = $this->Student_certificate_model->approve_inst_medium_application();		$this->session->set_flashdata("success", "Medium of Instruction letter application approved successfully");		redirect('student_approved_inst_medium_letter');	}	public function update_payment_inst_medium()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_inst_medium_letter_application_new();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/approve_inst_medium_application", $data);		} else {			$result = $this->Student_certificate_model->update_payment_inst_medium();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('student_req_inst_medium_letter');		}	}	public function disapprove_inst_medium_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_inst_medium_letter_application_new();			$this->load->view("admin/disapprove_inst_medium_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_inst_medium_application();			$this->session->set_flashdata("success", "Medium of Instruction Letter application disapproved successfully");			redirect('student_req_inst_medium_letter');		}	}	public function student_approved_inst_medium_letter()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_medium_letter_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_approved_inst_medium_letter');		}		$data['application'] = $this->Student_certificate_model->student_approved_inst_medium_letter();		$this->load->view('admin/student_approved_inst_medium_letter', $data);	}	public function print_inst_medium_letter()	{		$data['single'] = $this->Student_certificate_model->get_single_inst_medium_print($this->uri->segment(2));		$this->load->view('admin/print_inst_medium_letter', $data);	}	public function student_apply_no_backlog_letter()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_no_backlog_letter_application();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('6');			$this->load->view('admin/student_apply_no_backlog_letter', $data);		} else {			$res = $this->Student_certificate_model->student_apply_no_backlog_letter();			if ($res == 0) {				$this->session->set_flashdata("success", "No Backlog Summary application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'No Backlog Summary application updated successfully!!');			}			redirect('student_req_no_backlog_letter');		}	}	public function student_req_no_backlog_letter()	{		$data['application'] = $this->Student_certificate_model->get_all_no_backlog_application();		// echo "<pre>";print_r($data['application']);exit;		$this->load->view('admin/student_req_no_backlog_letter', $data);	}	public function update_payment_no_backlog()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_no_backlog_application_new();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/approve_no_backlog_application", $data);		} else {			$result = $this->Student_certificate_model->update_payment_no_backlog();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('student_req_no_backlog_letter');		}	}	public function approve_no_backlog_application()	{		$result = $this->Student_certificate_model->approve_no_backlog_application();		$this->session->set_flashdata("success", "No Backlog Summary application approved successfully");		redirect('student_approved_no_backlog_letter');	}	public function disapprove_no_backlog_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_no_backlog_application_new();			$this->load->view("admin/disapprove_no_backlog_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_no_backlog_application();			$this->session->set_flashdata("success", "No Backlog Summary application disapproved successfully");			redirect('student_req_no_backlog_letter');		}	}	public function student_approved_no_backlog_letter()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_no_backlog_letter_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_approved_no_backlog_letter');		}		$data['application'] = $this->Student_certificate_model->student_approved_no_backlog_letter();		$this->load->view('admin/student_approved_no_backlog_letter', $data);	}	public function print_no_backlog_letter()	{		$data['single'] = $this->Student_certificate_model->get_single_no_backlog_print($this->uri->segment(2));		$this->load->view('admin/print_no_backlog_letter', $data);	}	public function student_apply_no_split_letter()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_no_split_letter_application();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('7');			$this->load->view('admin/student_apply_no_split_letter', $data);		} else {			$res = $this->Student_certificate_model->student_apply_no_split_letter();			if ($res == 0) {				$this->session->set_flashdata("success", "No Split Issue application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'No Split Issue application updated successfully!!');			}			redirect('student_req_no_split_letter');		}	}	public function student_req_no_split_letter()	{		$data['application'] = $this->Student_certificate_model->get_all_no_split_application();		$this->load->view('admin/student_req_no_split_letter', $data);	}	public function update_payment_no_split()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_no_split_application_new();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/approve_no_split_application", $data);		} else {			$result = $this->Student_certificate_model->update_payment_no_split();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('student_req_no_split_letter');		}	}	public function approve_no_split_application()	{		$result = $this->Student_certificate_model->approve_no_split_application();		$this->session->set_flashdata("success", "No Split Issue application approved successfully");		redirect('student_approved_no_split_letter');	}	public function disapprove_no_split_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_no_split_application_new();			$this->load->view("admin/disapprove_no_split_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_no_split_application();			$this->session->set_flashdata("success", "No Split Issue application disapproved successfully");			redirect('student_req_no_split_letter');		}	}	public function student_approved_no_split_letter()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_no_split_letter_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_approved_no_split_letter');		}		$data['application'] = $this->Student_certificate_model->student_approved_no_split_letter();		$this->load->view('admin/student_approved_no_split_letter', $data);	}	public function print_no_split_letter()	{		$data['single'] = $this->Student_certificate_model->get_single_no_split_print($this->uri->segment(2));		// echo "<pre>";print_r($data['single']);exit;		$this->load->view('admin/print_no_split_letter', $data);	}	public function student_apply_reccom_letter()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_reccom_letter_application();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('8');			$this->load->view('admin/student_apply_reccom_letter', $data);		} else {			$res = $this->Student_certificate_model->student_apply_reccom_letter();			if ($res == 0) {				$this->session->set_flashdata("success", "Recommendation Letter application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'Recommendation Letter application updated successfully!!');			}			redirect('student_req_reccom_letter');		}	}	public function student_req_reccom_letter()	{		$data['application'] = $this->Student_certificate_model->get_all_reccom_application();		$this->load->view('admin/student_req_reccom_letter', $data);	}	public function update_payment_reccom()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_reccom_application_new();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/update_payment_reccom", $data);		} else {			$result = $this->Student_certificate_model->update_payment_reccom();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('student_req_reccom_letter');		}	}	public function approve_reccom_application()	{		$result = $this->Student_certificate_model->approve_reccom_application();		$this->session->set_flashdata("success", "Recommendation Letter application approved successfully");		redirect('student_approved_reccom_letter');	}	public function disapprove_reccom_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_reccom_application_new();			$this->load->view("admin/disapprove_reccom_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_reccom_application();			$this->session->set_flashdata("success", "Recommendation Letter application disapproved successfully");			redirect('student_req_reccom_letter');		}	}	public function student_approved_reccom_letter()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_reccom_letter_letter_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_approved_reccom_letter');		}		$data['application'] = $this->Student_certificate_model->student_approved_reccom_letter();		// echo "<pre>"; print_r($data['application']); exit();		$this->load->view('admin/student_approved_reccom_letter', $data);	}	public function print_reccom_letter()	{		$data['single'] = $this->Student_certificate_model->get_single_reccom_print($this->uri->segment(2));		$this->load->view('admin/print_reccom_letter', $data);	}	public function second_student_apply_reccom_letter()	{		$this->form_validation->set_rules('enrollment_no', 'Enrollment No', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_reccom_letter_application_second();			$data['amount'] = $this->Student_certificate_model->get_certificate_amount('9');			$this->load->view('admin/second_student_apply_reccom_letter', $data);		} else {			$res = $this->Student_certificate_model->student_apply_reccom_letter_second();			if ($res == 0) {				$this->session->set_flashdata("success", "Recommendation Letter application submitted successfully!");			} else {				$this->session->set_flashdata('sucess', 'Recommendation Letter application updated successfully!!');			}			redirect('second_student_req_reccom_letter');		}	}	public function second_student_req_reccom_letter()	{		$data['application'] = $this->Student_certificate_model->get_all_reccom_application_second();		$this->load->view('admin/second_student_req_reccom_letter', $data);	}	public function second_update_payment_reccom()	{		$this->form_validation->set_rules('transaction_id', 'Transaction ID', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_reccom_application_new_second();			$data['signature'] = $this->Setting_model->get_all_signature();			$this->load->view("admin/second_update_payment_reccom", $data);		} else {			$result = $this->Student_certificate_model->update_payment_reccom_second();			$this->session->set_flashdata("success", "Payment details updated successfully");			redirect('second_student_req_reccom_letter');		}	}	public function second_approve_reccom_application()	{		$result = $this->Student_certificate_model->approve_reccom_application_second();		$this->session->set_flashdata("success", "Recommendation Letter application approved successfully");		redirect('second_student_approved_reccom_letter');	}	public function second_disapprove_reccom_application()	{		$this->form_validation->set_rules('remark', 'Remark', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_reccom_application_new_second();			$this->load->view("admin/second_disapprove_reccom_application", $data);		} else {			$result = $this->Student_certificate_model->disapprove_reccom_application_second();			$this->session->set_flashdata("success", "Recommendation Letter application disapproved successfully");			redirect('second_student_req_reccom_letter');		}	}	public function second_student_approved_reccom_letter()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_reccom_letter_letter_for_print_second();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('second_student_approved_reccom_letter');		}		$data['application'] = $this->Student_certificate_model->student_approved_reccom_letter_second();		// echo "<pre>"; print_r($data['application']); exit();		$this->load->view('admin/second_student_approved_reccom_letter', $data);	}	public function second_print_reccom_letter()	{		$data['single'] = $this->Student_certificate_model->get_single_second_reccom_print($this->uri->segment(2));		$this->load->view('admin/second_print_reccom_letter', $data);	}	public function credit_transfer_certificate_request()	{		$this->load->view('admin/credit_transfer_certificate_request');	}	public function update_credit_transfr_certificare()	{		$this->form_validation->set_rules('transaction_id', 'transaction id', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_update_crdit_transfer_certificate();			$this->load->view('admin/update_credit_transfr_certificare', $data);		} else {			$this->Student_certificate_model->update_credit_transfer_certificate_details();			$this->session->set_flashdata("success", "Details updated successfully");			redirect('credit_transfer_certificate_request');		}	}	public function credit_transfer_certificate_approved()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_credit_transfer_for_print_second();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('credit_transfer_certificate_approved');		}		$this->load->view('admin/credit_transfer_certificate_approved');	}	public function print_credit_transfr_certificare()	{		$data['single'] = $this->Student_certificate_model->get_print_crdit_transfer_certificate($this->uri->segment(2));		$this->load->view('admin/print_credit_transfr_certificare', $data);	}	//character certificate	public function student_character_certificate_requests()	{		$this->load->view('admin/student_character_certificate_requests');	}	public function student_character_certificate_approved()	{		if ($this->input->post('send_btn') == "send_btn") {			$this->Student_certificate_model->sent_character_for_print();			$this->session->set_flashdata("success", "Certificate sent to print successfully");			redirect('student_character_certificate_approved');		}		$this->load->view('admin/student_character_certificate_approved');	}	public function student_character_certificate_update()	{		$this->form_validation->set_rules('transaction_id', 'transaction no', 'required');		if ($this->form_validation->run() === FALSE) {			$data['single'] = $this->Student_certificate_model->get_single_character_certificate($this->uri->segment(2));			$data['signature'] = $this->Setting_model->get_all_signature();			$data['amount'] = $this->Student_certificate_model->get_character_certificate_fees($this->uri->segment(2));			// echo "<pre>";print_r($data['amount']);exit;			$this->load->view('admin/student_character_certificate_update', $data);		} else {			$this->Student_certificate_model->set_update_character_details();			$this->session->set_flashdata("success", "Certificate updated successfully");			redirect('student_character_certificate_approved');		}	}	public function print_character_certificate()	{		$data['single'] = $this->Student_certificate_model->get_print_character_certificate($this->uri->segment(2));		$this->load->view('admin/print_character_certificate', $data);	}	public function add_student_transfer_requests()	{		$this->form_validation->set_rules("enrollment_number", "enrollment number", "required");		$data['single'] = $this->Student_certificate_model->get_single_transfer_student();		$data['signature'] = $this->Setting_model->get_all_signature();		$data['amount'] = $this->Student_certificate_model->get_certificate_amount('1');		// echo "<pre>";print_r($data['amount']);exit;		if ($this->form_validation->run() === FALSE) {			$this->load->view("admin/add_student_transfer_requests", $data);		} else {			$this->Student_certificate_model->set_transfer_application();			$this->session->set_flashdata("success", "Application added successfully");			redirect('student_transfer_certificate_requests');		}	}	public function add_student_character_requests()	{		$this->form_validation->set_rules("enrollment_number", "enrollment number", "required");		$data['single'] = $this->Student_certificate_model->get_single_character_student();		$data['signature'] = $this->Setting_model->get_all_signature();		$data['amount'] = $this->Student_certificate_model->get_certificate_amount('10');		// echo "<pre>";print_r($data['amount']);exit;		if ($this->form_validation->run() === FALSE) {			$this->load->view("admin/add_student_character_requests", $data);		} else {			$this->Student_certificate_model->set_character_application();			$this->session->set_flashdata("success", "Application added successfully");			redirect('student_character_certificate_requests');		}	}	public function add_student_degree_requests()	{		$this->form_validation->set_rules("enrollment_number", "enrollment number", "required");		$data['single'] = $this->Student_certificate_model->get_single_degree_student();		$data['signature'] = $this->Setting_model->get_all_signature();		$data['amount'] = $this->Student_certificate_model->get_certificate_amount('2');		// echo "<pre>";print_r($data['amount']);exit;		if ($this->form_validation->run() === FALSE) {			$this->load->view("admin/add_student_degree_requests", $data);		} else {			$this->Student_certificate_model->set_degree_application();			$this->session->set_flashdata("success", "Application added successfully");			redirect('student_degree_failed_payment');		}	}	public function student_certificate_history()	{		$this->form_validation->set_rules('enrollment_number', 'enrollment number', 'required');		if ($this->form_validation->run() === FALSE) {			$this->load->view('admin/student_certificate_history');		} else {			$this->Student_certificate_model->check_student_certificate_history();			$this->session->set_flashdata('message', 'Please enter correct enrollment number!');			redirect('student_certificate_history');		}	}	public function student_certificate_history_activity()	{		$data['activity'] = $this->Student_certificate_model->get_student_all_certificate_activities();		$data['student'] = $this->Student_certificate_model->get_single_student_info();		// echo "<pre>";print_r($data['student']);exit;		$this->load->view('admin/student_certificate_history_activity', $data);	}	public function consolidated_student_certificate_requests()	{		$this->load->view("admin/consolidated_student_certificate_requests");	}}