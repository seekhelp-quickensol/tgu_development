<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class Online_controller extends CI_Controller { 	public function __construct(){		parent::__construct();		$this->is_logged();	}	public function is_logged(){		if($this->session->userdata('admin_id') == ""){			redirect('erp-access');		}	} 	public function check_access(){		if($this->session->userdata('admin_id') != "1"){			$access = $this->Setting_model->get_user_privilege_link();			if(!in_array($this->uri->segment(1),$access)){				$this->session->set_flashdata('message','Sorry! You dont have access to this module!');				redirect(base_url());			}		}	}	public function create_topic(){		$this->form_validation->set_rules('course_name','course name','required');		if($this->form_validation->run() === FALSE){			$data['course'] = $this->Course_model->get_active_course();			$data['single'] = $this->Online_model->get_single_topic();			if(!empty($data['single'])){				$data['stream'] = $this->Online_model->get_selected_stream($data['single']->course_id);			}			$this->load->view('admin/create_topic',$data);		}else{ 			$result = $this->Online_model->set_topic();			if($result == "0"){				$this->session->set_flashdata('success','Topic added successfully!');			}else{				$this->session->set_flashdata('success','Topic updateds successfully!');			}			redirect('topic_list');		}	}	public function get_course_stream_year_sem_ajax(){		$this->Online_model->get_course_stream_year_sem_ajax();	}	public function topic_list(){		$this->load->view('admin/topic_list');	} 	public function get_all_topic_ajax(){		$draw = intval($this->input->post("draw"));        $start = intval($this->input->post("start"));        $length = intval($this->input->post("length"));        $order = $this->input->post("order");        $search = $this->input->post("search");		$search = $search['value'];		$col = 0;        $dir = "";		if(!empty($order)){            foreach($order as $o){                $col = $o['column'];                $dir= $o['dir'];            }        }		if($dir != "asc" && $dir != "desc"){            $dir = "desc";        }				$document = $this->Online_model->get_all_topic_ajax($length,$start,$search);        $data = array();        if(!empty($document)){			$zz=1;			foreach($document as $print){				$sub_array = array();				$sub_array[] = $zz++;				$sub_array[] = $print->course_name;				$sub_array[] = $print->stream_name;				$sub_array[] = $print->year_sem;				$sub_array[] = $print->topic_name;				$sub_array[] = date("d/m/Y",strtotime($print->created_on));				$sub_array[] = "<a data-toggle='tooltip' title='PDF' href=" . base_url() . "topic_files/" . $print->id . " class='btn btn-success btn-sm'><i class='mdi mdi-file'></i></a>   								<a type='button' title='Videos' data-toggle='tooltip' href=" . base_url() . "topic_video/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-video'></i></a>							";								if($print->status == "1"){					$sub_array[] = "Active";				}else{					$sub_array[] = "Inactive";				}				if($print->status == "1"){					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to deactivate this record?')\"' data-toggle='tooltip' title='Deactivate' href=" . base_url() . "inactive/" . $print->id . "/tbl_course_topic class='btn btn-success btn-sm inactivate_clas'><i class='mdi mdi-bookmark-check'></i></a>   									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_course_topic class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "create_topic/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit'></i></a>";				}else{					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to activate this record?')\"' data-toggle='tooltip' title='Activate' href=" . base_url() . "active/" . $print->id . "/tbl_course_topic class='btn btn-danger btn-sm activate_clas'><i class='mdi mdi-playlist-remove'></i></a>									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_course_topic class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "create_topic/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit edit_class'></i></a>";				}								$data[] = $sub_array; 			}		}		$TotalProducts = $this->Online_model->get_all_topic_ajax_count($search);         $output = array(            "draw" 				=> $draw,            "recordsTotal" 		=> $TotalProducts,            "recordsFiltered" 	=> $TotalProducts,            "data" 				=> $data        );        echo json_encode($output);        exit();	}	public function topic_files(){		$this->form_validation->set_rules('topic_id','topic name','required');		if($this->form_validation->run() === FALSE){			$data['topic'] = $this->Online_model->get_single_topic();			$data['single'] = $this->Online_model->get_single_topic_file();			$this->load->view('admin/topic_files',$data);		}else{			$result = $this->Online_model->set_topic_file();			if($result == "0"){				$this->session->set_flashdata('success','File added successfully!');			}else{				$this->session->set_flashdata('success','File updateds successfully!');			}			redirect('topic_files/'.$this->input->post('topic_id'));		}	}	public function get_all_topic_file_ajax(){		$draw = intval($this->input->post("draw"));        $start = intval($this->input->post("start"));        $length = intval($this->input->post("length"));        $order = $this->input->post("order");        $search = $this->input->post("search");		$search = $search['value'];		$col = 0;        $dir = "";		if(!empty($order)){            foreach($order as $o){                $col = $o['column'];                $dir= $o['dir'];            }        }		if($dir != "asc" && $dir != "desc"){            $dir = "desc";        }				$document = $this->Online_model->get_all_topic_file_ajax($length,$start,$search);        $data = array();        if(!empty($document)){			$zz=1;			foreach($document as $print){				$file_path = "NA";				if($print->file != ""){					$files = $this->Digitalocean_model->get_photo('uploads/topic/'.$print->file);					$file_path = "<a type='button' title='File' target='_blank' data-toggle='tooltip' href=" . $files . "  class='btn btn-success btn-sm'><i class='fa fa-file'></i></a>";				}				$sub_array = array();				$sub_array[] = $zz++;				$sub_array[] = $print->title;				$sub_array[] = $file_path; 				$sub_array[] = date("d/m/Y",strtotime($print->created_on)); 				if($print->status == "1"){					$sub_array[] = "Active";				}else{					$sub_array[] = "Inactive";				}				if($print->status == "1"){					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to deactivate this record?')\"' data-toggle='tooltip' title='Deactivate' href=" . base_url() . "inactive/" . $print->id . "/tbl_topic_pdf class='btn btn-success btn-sm inactivate_clas'><i class='mdi mdi-bookmark-check'></i></a>   									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_topic_pdf class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "topic_files/".$print->topic_id."/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit'></i></a>";				}else{					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to activate this record?')\"' data-toggle='tooltip' title='Activate' href=" . base_url() . "active/" . $print->id . "/tbl_topic_pdf class='btn btn-danger btn-sm activate_clas'><i class='mdi mdi-playlist-remove'></i></a>									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_topic_pdf class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "topic_files/".$print->topic_id."/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit edit_class'></i></a>";				}								$data[] = $sub_array; 			}		}		$TotalProducts = $this->Online_model->get_all_topic_file_ajax_count($search);         $output = array(            "draw" 				=> $draw,            "recordsTotal" 		=> $TotalProducts,            "recordsFiltered" 	=> $TotalProducts,            "data" 				=> $data        );        echo json_encode($output);        exit();	}	public function topic_video(){		$this->form_validation->set_rules('topic_id','topic name','required');		if($this->form_validation->run() === FALSE){			$data['topic'] = $this->Online_model->get_single_topic();			$data['single'] = $this->Online_model->get_single_topic_video();			$this->load->view('admin/topic_video',$data);		}else{			$result = $this->Online_model->set_topic_video();			if($result == "0"){				$this->session->set_flashdata('success','Video added successfully!');			}else{				$this->session->set_flashdata('success','Video updateds successfully!');			}			redirect('topic_video/'.$this->input->post('topic_id'));		}	}	public function get_all_topic_video_ajax(){		$draw = intval($this->input->post("draw"));        $start = intval($this->input->post("start"));        $length = intval($this->input->post("length"));        $order = $this->input->post("order");        $search = $this->input->post("search");		$search = $search['value'];		$col = 0;        $dir = "";		if(!empty($order)){            foreach($order as $o){                $col = $o['column'];                $dir= $o['dir'];            }        }		if($dir != "asc" && $dir != "desc"){            $dir = "desc";        }				$document = $this->Online_model->get_all_topic_video_ajax($length,$start,$search);        $data = array();        if(!empty($document)){			$zz=1;			foreach($document as $print){				$file_path = "NA";				if($print->file != ""){					$files = $this->Digitalocean_model->get_photo('uploads/topic/'.$print->file);					$file_path = "<a type='button' title='File' target='_blank' data-toggle='tooltip' href=" . $files . "  class='btn btn-success btn-sm'><i class='fa fa-file'></i></a>";				}				$sub_array = array();				$sub_array[] = $zz++;				$sub_array[] = $print->title;				$sub_array[] = $file_path; 				$sub_array[] = date("d/m/Y",strtotime($print->created_on)); 				if($print->status == "1"){					$sub_array[] = "Active";				}else{					$sub_array[] = "Inactive";				}				if($print->status == "1"){					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to deactivate this record?')\"' data-toggle='tooltip' title='Deactivate' href=" . base_url() . "inactive/" . $print->id . "/tbl_topic_pdf class='btn btn-success btn-sm inactivate_clas'><i class='mdi mdi-bookmark-check'></i></a>   									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_topic_pdf class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "topic_files/".$print->topic_id."/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit'></i></a>";				}else{					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to activate this record?')\"' data-toggle='tooltip' title='Activate' href=" . base_url() . "active/" . $print->id . "/tbl_topic_pdf class='btn btn-danger btn-sm activate_clas'><i class='mdi mdi-playlist-remove'></i></a>									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_topic_pdf class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "topic_files/".$print->topic_id."/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit edit_class'></i></a>";				}								$data[] = $sub_array; 			}		}		$TotalProducts = $this->Online_model->get_all_topic_video_ajax_count($search);         $output = array(            "draw" 				=> $draw,            "recordsTotal" 		=> $TotalProducts,            "recordsFiltered" 	=> $TotalProducts,            "data" 				=> $data        );        echo json_encode($output);        exit();	}	public function create_exam(){		$this->form_validation->set_rules('exam_name','exam name','required');		if($this->form_validation->run() === FALSE){			$data['course'] = $this->Course_model->get_active_course();			$data['single'] = $this->Online_model->get_single_exam_name();			if(!empty($data['single'])){				$data['stream'] = $this->Online_model->get_selected_stream($data['single']->course_id);			}			$this->load->view('admin/create_exam',$data);		}else{			$result = $this->Online_model->set_exam_name();			if($result == "0"){				$this->session->set_flashdata('success','Exam created successfully!');			}else{				$this->session->set_flashdata('success','exam updated successfully!');			}			redirect('create_exam');		}	}	public function created_exam_list(){		$this->load->view('admin/created_exam_list');	}	public function get_all_created_exam_ajax(){		$draw = intval($this->input->post("draw"));        $start = intval($this->input->post("start"));        $length = intval($this->input->post("length"));        $order = $this->input->post("order");        $search = $this->input->post("search");		$search = $search['value'];		$col = 0;        $dir = "";		if(!empty($order)){            foreach($order as $o){                $col = $o['column'];                $dir= $o['dir'];            }        }		if($dir != "asc" && $dir != "desc"){            $dir = "desc";        }				$document = $this->Online_model->get_all_created_exam_ajax($length,$start,$search);        $data = array();        if(!empty($document)){			$zz=1;			foreach($document as $print){ 				$sub_array = array();				$sub_array[] = $zz++;				$available_set = $this->Online_model->get_exam_availbale_sets($print->id);  				 				$sub_array[] = $print->course_name; 				$sub_array[] = $print->stream_name; 				$sub_array[] = $print->year_sem; 				$sub_array[] = $print->exam_name;				$sub_array[] = date("d-m-Y",strtotime($print->exam_date)); 				$sub_array[] = $print->start_time.'-'.$print->end_time;   				$sub_array[] = $print->total_marks;  				$sub_array[] = $print->first_name.' '.$print->last_name; 				$sub_array[] = $available_set; 								if($print->status == "1"){					$sub_array[] = "Active";				}else{					$sub_array[] = "Inactive";				}				if($print->status == "1"){					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to deactivate this record?')\"' data-toggle='tooltip' title='Deactivate' href=" . base_url() . "inactive/" . $print->id . "/tbl_yearly_exam class='btn btn-success btn-sm '><i class='mdi mdi-bookmark-check'></i></a>   									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_yearly_exam class='btn btn-danger btn-sm '><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "create_exam/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit'></i></a>									<a type='button' title='Question Bank' data-toggle='tooltip' href=" . base_url() . "created_exam_question/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-comment-question-outline'></i></a>									<a type='button' title='Created Question Bank' data-toggle='tooltip' href=" . base_url() . "created_exam_question_banks/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-credit-card-multiple'></i></a>									";				}else{					$sub_array[] = "<a onclick=\"return confirm('Are you sure, you want to activate this record?')\"' data-toggle='tooltip' title='Activate' href=" . base_url() . "active/" . $print->id . "/tbl_yearly_exam class='btn btn-danger btn-sm '><i class='mdi mdi-playlist-remove'></i></a>									<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_yearly_exam class='btn btn-danger btn-sm '><i class='mdi mdi-delete'></i></a>									<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "create_exam/".$print->id."  class='btn btn-success btn-sm'><i class='mdi comment-help-outline edit_class'></i></a>									<a type='button' title='Question Bank' data-toggle='tooltip' href=" . base_url() . "created_exam_question/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-comment-question-outline'></i></a>									<a type='button' title='Created Question Bank' data-toggle='tooltip' href=" . base_url() . "created_exam_question_banks/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-credit-card-multiple'></i></a>									";				}								$data[] = $sub_array; 			}		}		$TotalProducts = $this->Online_model->get_all_created_exam_ajax_count($search);         $output = array(            "draw" 				=> $draw,            "recordsTotal" 		=> $TotalProducts,            "recordsFiltered" 	=> $TotalProducts,            "data" 				=> $data        );        echo json_encode($output);        exit();	}	public function created_exam_question(){		$this->form_validation->set_rules('exam_id','exam name','required');		if ($this->form_validation->run()=== FALSE){			$this->load->view('admin/created_exam_question');		}else{			//$question_data_id=$this->Online_model->set_question_data();			if ($this->input->post('question_type')==1) {				if($this->input->post('upload_type')==1){					redirect("add_mcq_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));				}else{ 					$this->mcq_bulk_upload($_FILES["userfile"],$this->input->post('paper_set'),$this->input->post('exam_id'));				}			}			if ($this->input->post('question_type')==2) {				if($this->input->post('upload_type')==1){ 					redirect("add_fill_in_blanks_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));				}else{					$this->fill_blank_bulk_upload($_FILES["userfile"],$this->input->post('paper_set'),$this->input->post('exam_id'));									}			}			if ($this->input->post('question_type')==3) {				if($this->input->post('upload_type')==1){					redirect("add_one_word_ans_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));				}else{					$this->one_word_bulk_upload($_FILES["userfile"],$this->input->post('paper_set'),$this->input->post('exam_id'));				}			}			if ($this->input->post('question_type')==4) {				redirect("add_picture_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));			}			if($this->input->post('question_type')==5) {				if($this->input->post('upload_type')==1){					redirect("add_tick_mark_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));				}else{					$this->tick_mark_bulk_upload($_FILES["userfile"],$this->input->post('paper_set'),$this->input->post('exam_id'));				} 			}			if($this->input->post('question_type')==6){				redirect("add_passage_reading_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));			}			if($this->input->post('question_type')==7){				redirect("add_audio_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));			}			if($this->input->post('question_type')==8){				if($this->input->post('upload_type')==1){					redirect("add_match_the_following_question/".$this->input->post('paper_set').'/'.$this->input->post('exam_id'));				}else{					$this->match_the_following_bulk_upload($_FILES["userfile"],$this->input->post('paper_set'),$this->input->post('exam_id'));				}			} 		}	}	public function add_mcq_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$data['added_mark'] = $this->Online_model->get_total_added_mark($this->uri->segment(2),$this->uri->segment(3));			$this->load->view('admin/add_mcq_question',$data);		}else{			$result=$this->Online_model->add_mcq_question();			if (!empty($result)){				$this->session->set_flashdata('success','Record added successfully');												if($this->input->post('finish') == "Finish"){					redirect('created_exam_question_banks/'.$this->uri->segment(3).'?set='.$this->uri->segment(2).'&type=1');				}else{					redirect('add_mcq_question/'.$this->uri->segment(2).'/'.$this->uri->segment(3));				}			}else{				$this->session->set_flashdata('success','Record updated successfully');				redirect('created_exam_question_banks/'.$this->uri->segment(3).'?set='.$this->uri->segment(2).'&type=1');			}		} 	}	public function mcq_bulk_upload($file,$paper_set,$exam_id){		if($file) {			$this->load->library('excel');			if(isset($file["name"])){				$path = $file["tmp_name"]; 				$object = PHPExcel_IOFactory::load($path);				ini_set('memory_limit', '-1');				foreach($object->getWorksheetIterator() as $worksheet){					$highestRow = $worksheet->getHighestRow();					$highestColumn = $worksheet->getHighestColumn();					$current_adding_mark = 0; 					for($row=3; $row<=$highestRow; $row++){						if($worksheet->getCellByColumnAndRow(1, $row)->getValue() != ''){							$question 			    = $worksheet->getCellByColumnAndRow(1,$row)->getValue();							$option_a               = $worksheet->getCellByColumnAndRow(2,$row)->getValue();							$option_b 			    = $worksheet->getCellByColumnAndRow(3,$row)->getValue();							$option_c		 	    = $worksheet->getCellByColumnAndRow(4,$row)->getValue();							$option_d 			    = $worksheet->getCellByColumnAndRow(5,$row)->getValue();							$marks 			        = $worksheet->getCellByColumnAndRow(6,$row)->getValue();							$correct_answer 		= $worksheet->getCellByColumnAndRow(7,$row)->getValue(); 							$current_adding_mark = $current_adding_mark+$marks;								$data[] = array( 								'exam_id'			=>	$exam_id,								'paper_set'			=>	$paper_set,								'question'			=>	$question,								'option_a'			=>	$option_a,								'option_b'	        =>	$option_b,								'option_c'		    =>	$option_c,								'option_d'			=>	$option_d,								'marks'		        =>	$marks,								'correct_answer'	=>	$correct_answer,								'created_on'		=>	date("Y-m-d H:i:s"),							);						}					}				}  								$this->db->where('id',$exam_id);				$this->db->where('is_deleted','0');				$exam_row = $this->db->get('tbl_yearly_exam');				$exam_row = $exam_row->row();								$this->db->select('SUM(marks) as total');				$this->db->where('exam_id',$exam_id);				$this->db->where('paper_set',$paper_set);				$this->db->where('is_deleted','0');				$exist_mark = $this->db->get('tbl_mcq_question');				$exist_mark = $exist_mark->row();				$complted_mark = $exist_mark->total+$current_adding_mark;				if($complted_mark <= $exam_row->total_marks){					if(!empty($data)){						$this->Online_model->mcq_bulk_upload($data);						$this->session->set_flashdata('success','Data imported successfullY!');					}else{						$this->session->set_flashdata('message','Data not importing.');					}					redirect('mcq_question_list');				}else{					$this->session->set_flashdata('message','You can not add maximum marks from the exam total marks');					redirect('mcq_question_list');				}			}  		}else{			redirect($_SERVER['HTTP_REFERER']);		}		}	public  function update_mcq_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_mcq_question();			$this->load->view('admin/update_mcq_question',$data);		}else{		$result=$this->Online_model->update_mcq_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('mcq_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('mcq_question_list');			}		}	}	public function get_mcq_question_list_ajax(){		$this->Online_model->get_mcq_question_list_ajax();	}	public function mcq_question_list(){		$data['question']=$this->Online_model->get_mcq_question_list(); 		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/mcq_question_list',$data);	}		public function add_fill_in_blanks_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if ($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$this->load->view('admin/add_fill_in_blanks_question',$data);		}else{			$result=$this->Online_model->add_fill_in_blanks_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record added successfully');				redirect('fill_in_blanks_question_list');			}else{				$this->session->set_flashdata('success','Record updated successfully');				redirect('fill_in_blanks_question_list');			}		} 	}	public function update_fill_in_blank_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_fill_in_blank_question();			$this->load->view('admin/update_fill_in_blank_question',$data);		}else{			$result=$this->Online_model->update_fill_in_blank_question();			if($result){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('fill_in_blanks_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('fill_in_blanks_question_list');			}		}	}	public function fill_blank_bulk_upload($file,$paper_set,$exam_id){		if ($file) {			$this->load->library('excel');			if(isset($file["name"])){				$path = $file["tmp_name"];				$object = PHPExcel_IOFactory::load($path);				ini_set('memory_limit', '-1'); 				foreach($object->getWorksheetIterator() as $worksheet){					$highestRow = $worksheet->getHighestRow();					$highestColumn = $worksheet->getHighestColumn();					for($row=3; $row<=$highestRow; $row++){						if($worksheet->getCellByColumnAndRow(1, $row)->getValue() != ''){							$question 			    = $worksheet->getCellByColumnAndRow(1,$row)->getValue();							$fill_blank_option      = $worksheet->getCellByColumnAndRow(2,$row)->getValue();							$correct_answer 	    = $worksheet->getCellByColumnAndRow(3,$row)->getValue();							$marks 			        = $worksheet->getCellByColumnAndRow(4,$row)->getValue(); 							$data[] = array( 								'exam_id'			=>	$exam_id,								'paper_set'			=>	$paper_set,								'question'			=>	$question,								'fill_blank_option'	=>	$fill_blank_option,								'correct_answer'	=>	$correct_answer,								'marks'		        =>	$marks,								'created_on'		=>	date("Y-m-d H:i:s"),							);						}					}				} 				if(!empty($data)){					$this->Online_model->fill_in_the_blank_bulk_upload($data);					$this->session->set_flashdata('success','Data imported successfullY!');				}else{					$this->session->set_flashdata('message','Data Imported Is Empty.');				}				redirect('fill_in_blanks_question_list');			}  		}else{			redirect($_SERVER['HTTP_REFERER']); 		}		}	public function fill_in_blanks_question_list(){		$data['question']=$this->Online_model->get_fill_in_blanks_question_list(); 		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/fill_in_blanks_question_list',$data);	} 	public function add_one_word_ans_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if ($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$this->load->view('admin/add_one_word_ans_question',$data);		}else{			$result=$this->Online_model->add_one_word_ans_question();			if (!empty($result)){				$this->session->set_flashdata('success','Record added successfully');				redirect('one_word_ans_question_list');			}else{				$this->session->set_flashdata('success','Record updated successfully');				redirect('create_question');			}		} 	}	public function update_one_word_ans_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_one_word_ans_question();			$this->load->view('admin/update_one_word_ans_question',$data);		}else{		$result=$this->Online_model->update_one_word_ans_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('one_word_ans_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('one_word_ans_question_list');			}		}	}	public function one_word_ans_question_list(){		$data['question']=$this->Online_model->get_one_word_ans_question_list();		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/one_word_ans_question_list',$data);	}	public function one_word_bulk_upload($file,$question_description_id){		if ($file) {			$this->load->library('excel');			if(isset($file["name"])){				$path = $file["tmp_name"];				$object = PHPExcel_IOFactory::load($path);				ini_set('memory_limit', '-1');				// echo $path;exit();				foreach($object->getWorksheetIterator() as $worksheet){					$highestRow = $worksheet->getHighestRow();					$highestColumn = $worksheet->getHighestColumn();					for($row=3; $row<=$highestRow; $row++){						if($worksheet->getCellByColumnAndRow(1, $row)->getValue() != ''){							$question 			    = $worksheet->getCellByColumnAndRow(1,$row)->getValue();							$fill_blank_option      = $worksheet->getCellByColumnAndRow(2,$row)->getValue();							$correct_answer 	    = $worksheet->getCellByColumnAndRow(3,$row)->getValue();							$marks 			        = $worksheet->getCellByColumnAndRow(4,$row)->getValue(); 														$data[] = array( 								'exam_id'			=>	$exam_id,								'paper_set'			=>	$paper_set,								'question'			=>	$question,								'fill_blank_option'	=>	$fill_blank_option,								'correct_answer'	=>	$correct_answer,								'marks'		        =>	$marks,								'created_on'		=>	date("Y-m-d H:i:s"),							);						}					}				} 				if(!empty($data)){					$this->Online_model->one_word_bulk_upload($data);					$this->session->set_flashdata('success','Data imported successfullY!');				}else{					$this->session->set_flashdata('message','Data Imported Is Empty.');				}				redirect('one_word_ans_question_list');			}  		}else{			redirect($_SERVER['HTTP_REFERER']);		}		} 	public function add_picture_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if ($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$data['added_mark'] = $this->Online_model->get_total_added_mark($this->uri->segment(2),$this->uri->segment(3));			$this->load->view('admin/add_picture_question',$data);		}else{			$file ='';			$file = $this->Digitalocean_model->upload_photo_multiple($filename="question_img",$path="uploads/question_image/");			$result=$this->Online_model->add_picture_question($file);			if (!empty($result)){				$this->session->set_flashdata('success','Record added successfully');				// redirect('picture_question_list');				if($this->input->post('finish') == "Finish"){					redirect('created_exam_question_banks/'.$this->uri->segment(3).'?set='.$this->uri->segment(2).'&type=4');				}else{					redirect('add_picture_question/'.$this->uri->segment(2).'/'.$this->uri->segment(3));				}				redirect('created_exam_question_banks/'.$this->uri->segment(3).'?set='.$this->uri->segment(2).'&type=4');			}else{				$this->session->set_flashdata('success','Record updated successfully');				// redirect('picture_question_list');				if($this->input->post('finish') == "Finish"){					redirect('created_exam_list');				}else{					redirect($_SERVER['HTTP_REFERER']);				}			}		} 	}	public function picture_question_list(){		$data['question'] = $this->Online_model->get_picture_question_list();		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/picture_question_list',$data);	}	public function update_picture_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_picture_question();			$this->load->view('admin/update_picture_question',$data);		}else{			$result=$this->Online_model->update_picture_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('picture_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('picture_question_list');			}		}	}	public function add_tick_mark_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if ($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$this->load->view('admin/add_tick_mark_question',$data);		}else{			$result=$this->Online_model->add_tick_mark_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record added successfully');				redirect('tick_mark_question_list');			}else{				$this->session->set_flashdata('success','Record updated successfully');				redirect('create_question');			}		} 	}	public function tick_mark_question_list(){		$data['question']=$this->Online_model->get_tick_mark_question_list();		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/tick_mark_question_list',$data);	}	public  function update_tick_mark_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_tick_mark_question();			$this->load->view('admin/update_tick_mark_question',$data);		}else{		$result=$this->Online_model->update_tick_mark_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('tick_mark_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('tick_mark_question_list');			}		}	}	public function tick_mark_bulk_upload($file,$paper_set,$exam_id){		if ($file) {			$this->load->library('excel');			if(isset($file["name"])){				$path = $file["tmp_name"];				$object = PHPExcel_IOFactory::load($path);				ini_set('memory_limit', '-1');				foreach($object->getWorksheetIterator() as $worksheet){					$highestRow = $worksheet->getHighestRow();					$highestColumn = $worksheet->getHighestColumn();					for($row=3; $row<=$highestRow; $row++){						if($worksheet->getCellByColumnAndRow(1, $row)->getValue() != ''){							$question 			    = $worksheet->getCellByColumnAndRow(1,$row)->getValue();							$option_a               = $worksheet->getCellByColumnAndRow(2,$row)->getValue();							$option_b 			    = $worksheet->getCellByColumnAndRow(3,$row)->getValue();							$marks 			        = $worksheet->getCellByColumnAndRow(4,$row)->getValue();							$correct_answer 		= $worksheet->getCellByColumnAndRow(5,$row)->getValue();  							$data[] = array( 								'exam_id'			=>	$exam_id,								'paper_set'			=>	$paper_set,								'question'			=>	$question,								'option_a'			=>	$option_a,								'option_b'	        =>	$option_b,								'marks'		        =>	$marks,								'correct_answer'	=>	$correct_answer,								'created_on'		=>	date("Y-m-d H:i:s"),							);						}					}				} 				if(!empty($data)){					$this->Online_model->tick_mark_bulk_upload($data);					$this->session->set_flashdata('success','Data imported successfullY!');				}else{					$this->session->set_flashdata('message','Data Imported Is Empty.');				}				redirect('tick_mark_question_list');			} 		}else{			redirect($_SERVER['HTTP_REFERER']); 		}		}	public function add_passage_reading_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if ($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$data['added_mark'] = $this->Online_model->get_total_added_mark($this->uri->segment(2),$this->uri->segment(3));			$this->load->view('admin/add_passage_reading_question',$data);		}else{			$result=$this->Online_model->add_passage_reading_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record added successfully');					if($this->input->post('finish') == "Finish"){					redirect('created_exam_question_banks/'.$this->uri->segment(3).'?set='.$this->uri->segment(2).'&type=6');				}else{					redirect('add_passage_reading_question/'.$this->uri->segment(2).'/'.$this->uri->segment(3));				}							}else{				$this->session->set_flashdata('success','Record updated successfully');				// redirect('create_question');				redirect('created_exam_question_banks/'.$this->uri->segment(3).'?set='.$this->uri->segment(2).'&type=6');			}		} 	}	public function passage_reading_question_list(){		$data['question']=$this->Online_model->get_passage_reading_question_list();		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/passage_reading_question_list',$data);	}	public function update_passage_reading_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_passage_reading_question();			$this->load->view('admin/update_passage_reading_question',$data);		}else{		$result=$this->Online_model->update_passage_reading_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('passage_reading_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('passage_reading_question_list');			}		}	}	public function add_match_the_following_question(){		$this->form_validation->set_rules('number_of_questions','number_of_questions','required');		if($this->form_validation->run()=== FALSE){			$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(3));			$this->load->view('admin/add_match_the_following_question',$data);		}else{			$result=$this->Online_model->add_match_the_following_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record added successfully');				redirect('match_the_following_question_list');			}else{				$this->session->set_flashdata('success','Record updated successfully');				redirect('match_the_following_question_list');			}		}	}	public function match_the_following_question_list(){		$data['question']=$this->Online_model->get_match_the_following_question_list();		$data['course'] = $this->Course_model->get_active_course();		$this->load->view('admin/match_the_following_question_list',$data);	}	public function update_match_the_following_question(){		$this->form_validation->set_rules('question','question','required');		if ($this->form_validation->run()=== FALSE){			$data['question']=$this->Online_model->get_update_match_the_following_question();			$this->load->view('admin/update_match_the_following_question',$data);		}else{			$result=$this->Online_model->update_match_the_following_question();			if(!empty($result)){				$this->session->set_flashdata('success','Record updated successfully!');				redirect('match_the_following_question_list');			}else{				$this->session->set_flashdata('message','Record not updated!');				redirect('match_the_following_question_list');			}		}	}	public function match_the_following_bulk_upload($file,$paper_set,$exam_id){		if ($file) {			$this->load->library('excel');			if(isset($file["name"])){				$path = $file["tmp_name"];				$object = PHPExcel_IOFactory::load($path);				ini_set('memory_limit', '-1');				foreach($object->getWorksheetIterator() as $worksheet){					$highestRow = $worksheet->getHighestRow();					$highestColumn = $worksheet->getHighestColumn();					for($row=3; $row<=$highestRow; $row++){						if($worksheet->getCellByColumnAndRow(1, $row)->getValue() != ''){							$question 			    = $worksheet->getCellByColumnAndRow(1,$row)->getValue();							$question_a             = $worksheet->getCellByColumnAndRow(2,$row)->getValue();							$answer_a			    = $worksheet->getCellByColumnAndRow(3,$row)->getValue();							$question_b             = $worksheet->getCellByColumnAndRow(4,$row)->getValue();							$answer_b			    = $worksheet->getCellByColumnAndRow(5,$row)->getValue();							$question_c             = $worksheet->getCellByColumnAndRow(6,$row)->getValue();							$answer_c			    = $worksheet->getCellByColumnAndRow(7,$row)->getValue();							$question_d             = $worksheet->getCellByColumnAndRow(8,$row)->getValue();							$answer_d			    = $worksheet->getCellByColumnAndRow(9,$row)->getValue();							$question_e             = $worksheet->getCellByColumnAndRow(10,$row)->getValue();							$answer_e			    = $worksheet->getCellByColumnAndRow(11,$row)->getValue();							$marks 			        = $worksheet->getCellByColumnAndRow(12,$row)->getValue();																				$data[] = array( 								'exam_id'			=>	$exam_id,								'paper_set'			=>	$paper_set,								'question'			=>	$question,								'question_a'		=>	$question_a,								'answer_a'	        =>	$answer_a,								'question_b'		=>	$question_b,								'answer_b'	        =>	$answer_b,								'question_c'		=>	$question_c,								'answer_c'	        =>	$answer_c,								'question_d'		=>	$question_d,								'answer_d'	        =>	$answer_d,								'question_e'		=>	$question_e,								'answer_e'	        =>	$answer_e,								'marks'		        =>	$marks,								'created_on'		=>	date("Y-m-d H:i:s"),							);						}					}				} 				if(!empty($data)){					$this->Online_model->match_the_following_bulk_upload($data);					$this->session->set_flashdata('success','Data imported successfullY!');				}else{					$this->session->set_flashdata('message','Data Imported Is Empty.');				}				redirect('match_the_following_question_list');			} 		}else{			redirect($_SERVER['HTTP_REFERER']);		}		}	public function yearly_exam_questions_list(){		$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(2));		$data['mcq_question'] = $this->Online_model->get_exam_wise_mcq_question($this->uri->segment(2));		$data['fill_question'] = $this->Online_model->get_exam_wise_fill_in_question($this->uri->segment(2));		$data['one_word_question'] = $this->Online_model->get_exam_wise_one_word_question($this->uri->segment(2));		$data['picture_question'] = $this->Online_model->get_exam_wise_picture_question($this->uri->segment(2));		$data['tick_mark_question']=$this->Online_model->get_exam_wise_tick_mark_question($this->uri->segment(2));		$data['passage_question']=$this->Online_model->get_exam_wise_passage_reading_question_list($this->uri->segment(2));		$data['match_question']=$this->Online_model->get_exam_wise_match_the_following_question_list($this->uri->segment(2));		$this->load->view('admin/yearly_exam_questions_list',$data);	}	public function created_exam_question_banks(){		$data['exam'] = $this->Online_model->get_question_exam_name($this->uri->segment(2));		$this->load->view('admin/created_exam_question_banks',$data);	}	public function get_all_created_exam_questions_ajax(){		$draw = intval($this->input->post("draw"));        $start = intval($this->input->post("start"));        $length = intval($this->input->post("length"));        $order = $this->input->post("order");        $search = $this->input->post("search");		$search = $search['value'];		$col = 0;        $dir = "";		if(!empty($order)){            foreach($order as $o){                $col = $o['column'];                $dir= $o['dir'];            }        }		if($dir != "asc" && $dir != "desc"){            $dir = "desc";        }				$document = $this->Online_model->get_all_created_exam_questions($length,$start,$search);		// echo"hi";print_r($document);exit();        $data = array();        if(!empty($document)){			$zz=1;			foreach($document as $print){				$sub_array = array();				$sub_array[] = $zz++;				 				$sub_array[] = $print->question; 				$sub_array[] = $print->option_a; 				$sub_array[] = $print->option_b; 				$sub_array[] = $print->option_c; 				$sub_array[] = $print->option_d; 				$sub_array[] = $print->correct_answer; 				$sub_array[] = $print->marks; 				// if($print->status == "1"){				// 	$sub_array[] = "<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "create_exam/".$print->id."  class='btn btn-success btn-sm'><i class='mdi mdi-table-edit'></i></a>				// 					<a onclick=\"return confirm('Are you sure, you want to deactivate this record?')\"' data-toggle='tooltip' title='Deactivate' href=" . base_url() . "inactive/" . $print->id . "/tbl_mcq_question class='btn btn-success btn-sm inactivate_clas'><i class='mdi mdi-bookmark-check'></i></a>   				// 					<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_mcq_question class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>				// 					";				// }else{				// 	$sub_array[] = "<a type='button' title='Edit' data-toggle='tooltip' href=" . base_url() . "create_exam/".$print->id."  class='btn btn-success btn-sm'><i class='mdi comment-help-outline edit_class'></i></a>				// 					<a onclick=\"return confirm('Are you sure, you want to activate this record?')\"' data-toggle='tooltip' title='Activate' href=" . base_url() . "active/" . $print->id . "/tbl_mcq_question class='btn btn-danger btn-sm activate_clas'><i class='mdi mdi-playlist-remove'></i></a>				// 					<a onclick=\"return confirm('Are you sure, you want to delete this record permanently?')\"' data-toggle='tooltip' title='Permanently Delete' href=" . base_url() . "delete/" . $print->id . "/tbl_mcq_question class='btn btn-danger btn-sm delete_class'><i class='mdi mdi-delete'></i></a>				// 					";				// }								$data[] = $sub_array; 			}		}		$TotalProducts = $this->Online_model->get_all_created_exam_questions_count($search);         $output = array(            "draw" 				=> $draw,            "recordsTotal" 		=> $TotalProducts,            "recordsFiltered" 	=> $TotalProducts,            "data" 				=> $data        );        echo json_encode($output);        exit();	}	public function edit_question(){		if($this->input->post('submit_mcq') != 'submit_mcq'){			$data['single'] = $this->Online_model->get_single_question();			if(!empty($data['single'])){				$data['exam'] = $this->Online_model->get_question_exam_name($data['single']->exam_id);				$data['added_mark'] = $this->Online_model->get_total_added_mark($data['single']->paper_set,$data['single']->exam_id);			}			$this->load->view('admin/edit_question',$data);		}else{			$this->Online_model->update_mcq_question_new();			$this->session->set_flashdata('success','Question updated successfullY!');			redirect('created_exam_question_banks/'.$this->input->post('exam_id').'?set='.$this->input->post('paper_set').'&type=1');		}	}	public function edit_picture_question(){		if($this->input->post('submit_pic') != 'submit_pic'){			$data['single'] = $this->Online_model->get_single_picture_question();			$data['all_que'] = $this->Online_model->get_all_picture_question($data['single']); 			if(!empty($data['single'])){				$data['exam'] = $this->Online_model->get_question_exam_name($data['single']->exam_id);				$data['added_mark'] = $this->Online_model->get_total_added_mark($data['single']->paper_set,$data['single']->exam_id);			}			$this->load->view('admin/edit_picture_question',$data);		}else{			$file ='';			$file = $this->Digitalocean_model->upload_photo_multiple($filename="question_img",$path="uploads/question_image/");			// print_r($file);exit();			$this->Online_model->update_pic_question($file);			$this->session->set_flashdata('success','Question updated successfullY!');			redirect('created_exam_question_banks/'.$this->input->post('exam_id').'?set='.$this->input->post('paper_set').'&type=4');		}	}	public function edit_passage_question(){		if($this->input->post('submit_pass') != 'submit_pass'){			$data['single'] = $this->Online_model->get_single_passage_question();			$data['all_que'] = $this->Online_model->get_all_passage_question($data['single']);			if(!empty($data['single'])){				$data['exam'] = $this->Online_model->get_question_exam_name($data['single']->exam_id);				$data['added_mark'] = $this->Online_model->get_total_added_mark($data['single']->paper_set,$data['single']->exam_id);			}			$this->load->view('admin/edit_passage_question',$data);		}else{			$this->Online_model->update_passage_question();			$this->session->set_flashdata('success','Question updated successfullY!');			redirect('created_exam_question_banks/'.$this->input->post('exam_id').'?set='.$this->input->post('paper_set').'&type=6');		}	}}	