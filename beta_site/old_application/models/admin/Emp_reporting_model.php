<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class Emp_reporting_model extends CI_Model { 	public function set_my_reporting($files){		$data = array(			'emp_id' 		=> $this->session->userdata('admin_id'),			'title' 		=> $this->input->post('title'),			'report' 		=> $this->input->post('report'),			'files' 		=> $files, 			'report_date' 	=> date("Y-m-d"), 			'created_on' 	=> date("Y-m-d H:i:s"), 		); 		// $this->db->insert('tbl_emp_reporting',$data);		if ($this->input->post('id') == "") {			$date = array(				'created_on'	=> date("Y-m-d H:i:s")			);			$new_arr = array_merge($data, $date);			$this->db->insert('tbl_emp_reporting', $new_arr);			redirect('create_my_report');			return 0;		} else {			$this->db->where('id', $this->input->post('id'));			$this->db->update('tbl_emp_reporting', $data);						redirect('create_my_report');			return 1;		}		return 0;	}	public function get_single_reporting_emp(){		$this->db->select('tbl_emp_reporting.*,tbl_employees.first_name,tbl_employees.last_name');		$this->db->where('tbl_emp_reporting.id',$this->uri->segment(2));		$this->db->join('tbl_employees','tbl_employees.id = tbl_emp_reporting.emp_id');		$result = $this->db->get('tbl_emp_reporting');		return $result->row();	}	public function set_update_reporting(){		$data = array(			'verified_by' 	=> $this->session->userdata('admin_id'),			'report_status' => $this->input->post('report_status'),			'remark' 		=> $this->input->post('remark'),  		); 		$this->db->where('id',$this->input->post('id'));		$this->db->update('tbl_emp_reporting',$data);		return 0;	}	public function get_my_reporting(){		$this->db->select('tbl_emp_reporting.*,tbl_employees.first_name,tbl_employees.last_name');		$this->db->where('tbl_emp_reporting.is_deleted','0');		$this->db->where('tbl_emp_reporting.status','1');		$this->db->where('tbl_emp_reporting.emp_id',$this->session->userdata('admin_id'));		$this->db->order_by('tbl_emp_reporting.id','DESC'); 		$this->db->join('tbl_employees','tbl_employees.id = tbl_emp_reporting.emp_id');		$result = $this->db->get('tbl_emp_reporting');		return $result->result();	}	public function get_today_reporting(){		$this->db->select('tbl_emp_reporting.*,tbl_employees.first_name,tbl_employees.last_name');		$this->db->where('tbl_emp_reporting.is_deleted','0');		$this->db->where('tbl_emp_reporting.status','1');		$this->db->where('tbl_emp_reporting.report_date',date("Y-m-d"));		$this->db->order_by('tbl_emp_reporting.id','DESC'); 		$this->db->join('tbl_employees','tbl_employees.id = tbl_emp_reporting.emp_id');		$result = $this->db->get('tbl_emp_reporting');		return $result->result();	}	public function get_all_reporting(){		$this->db->select('tbl_emp_reporting.*,tbl_employees.first_name,tbl_employees.last_name');		$this->db->where('tbl_emp_reporting.is_deleted','0');		$this->db->where('tbl_emp_reporting.status','1'); 		$this->db->order_by('tbl_emp_reporting.id','DESC'); 		$this->db->join('tbl_employees','tbl_employees.id = tbl_emp_reporting.emp_id');		$result = $this->db->get('tbl_emp_reporting');		return $result->result();	}	public function check_global_search(){		$this->db->where('is_deleted','0');		$this->db->where('enrollment_number',$this->input->post('enrollment_number'));		$result = $this->db->get('tbl_student');		$result = $result->row();		if(!empty($result)){			redirect('student_activity/'.$result->id);		}else{			return false;		}	}	public function check_global_blended_search(){		$this->db->where('is_deleted','0');		$this->db->where('enrollment_number',$this->input->post('enrollment_number'));		$result = $this->db->get('tbl_separate_student');		$result = $result->row();		if(!empty($result)){			redirect('blended_student_activity/'.$result->id);		}else{			return false;		}	}	public function get_all_student_query($length,$start,$search){		$this->db->select('tbl_student_feedback.*,tbl_center.center_name,tbl_student.student_name,tbl_student.enrollment_number');		$this->db->where('tbl_student_feedback.is_deleted','0'); 		$this->db->where('tbl_student_feedback.status','1');  		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_student.student_name',$search);			$this->db->or_like('tbl_student.father_name',$search);			$this->db->or_like('tbl_student.mother_name',$search); 			$this->db->group_end();		} 		$this->db->join('tbl_student','tbl_student.id = tbl_student_feedback.student_id');		$this->db->join('tbl_center','tbl_center.id = tbl_student.center_id'); 		$this->db->order_by('tbl_student_feedback.id','DESC');		$result = $this->db->get('tbl_student_feedback');		return $result->result();				} 	public function get_all_student_query_count($search){		$this->db->select('tbl_student_feedback.*,tbl_center.center_name,tbl_student.student_name,tbl_student.enrollment_number');		$this->db->where('tbl_student_feedback.is_deleted','0'); 		$this->db->where('tbl_student_feedback.status','1');  		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_student.student_name',$search);			$this->db->or_like('tbl_student.father_name',$search);			$this->db->or_like('tbl_student.mother_name',$search); 			$this->db->group_end();		} 		$this->db->join('tbl_student','tbl_student.id = tbl_student_feedback.student_id');		$this->db->join('tbl_center','tbl_center.id = tbl_student.center_id'); 		$result = $this->db->get('tbl_student_feedback');		return $result->num_rows();	}  		// public function get_reporting($id) {	// 	$this->db->where('id', $id);	// 	$this->db->where('is_deleted', '0');	// 	$result = $this->db->get('tbl_emp_reporting');	// 	return $result->num_rows();	// }	public function get_report(){		$this->db->where('tbl_emp_reporting.is_deleted','0'); 		$this->db->where('tbl_emp_reporting.status','1');  		if ($this->input->post('id') != "0") {			$this->db->where('id !=', $this->input->post('id'));		}		$result = $this->db->get('tbl_emp_reporting');		echo $result->num_rows();	}	public function get_emp_report_details_ajax(){ 		$this->db->select('tbl_emp_reporting.*,tbl_employees.first_name,tbl_employees.last_name');		$this->db->where('tbl_emp_reporting.is_deleted','0'); 		$this->db->where('tbl_emp_reporting.status','1');   		$this->db->where('tbl_emp_reporting.id',$this->input->post('id')); 		$this->db->join('tbl_employees','tbl_employees.id = tbl_emp_reporting.emp_id');		$result = $this->db->get('tbl_emp_reporting');		$result = $result->row();		// echo "<pre>";print_r($result);exit;		if(!empty($result)){			$select_one = "";			if($result->report_status == "0"){				$select_one = "selected='selected'";			}			$select_two = "";			if($result->report_status == "1"){				$select_two = "selected='selected'";			}			$select_three = "";			if($result->report_status == "2"){				$select_three = "selected='selected'";			}		$form = '		<form method="post" name="report_form" id="report_form" enctype="multipart/form-data">			<div class="modal-content">				<div class="modal-header" style="border-bottom:none;">					<h5 class="modal-title" id="exampleModalLabel">Report</h5>										<button type="button" class="close" data-dismiss="modal" aria-label="Close">					<span aria-hidden="true">&times;</span>					</button>				</div>				<div class="subheader">					<h5>Employee Name:'.$result->first_name.' '.$result->last_name.'</h5>					<h5>Title:'.$result->title.'</h5>				</div>				<div class="modal-body">					<div class="form-group">						<strong>Report:</strong><br>						<div id="report_details_text">						'.$result->report.'						</div> 						<hr>						<strong>Remark*:</strong><br>						<textarea id="remark_view" name="remark" class="form-control">'.$result->remark.'</textarea>						<hr>						 						<strong>Status*:</strong><br>						<input type="hidden" name="id" id="id" value="'.$result->id.'">						<select class="form-control" id="report_status" name="report_status">							<option value="">Select Status</option>							<option value="0">Pending</option>							<option value="1">Approve</option>							<option value="2">Reject</option>						</select>						<br>						<button type="submit" class="btn btn-primary">Submit</button>					</div>				</div>				<div class="modal-footer">					<button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>				</div>			</div>		</form>';				}		echo $form;	}		public function get_transaction_details(){		if(isset($_GET['transaction_no']) && $_GET['transaction_no'] != ""){			$transaction = $_GET['transaction_no'];			$tables = [				array(					'table'					=>	'tbl_attendance_letter',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'',					'student_enrollment'	=>	'enrollment_number',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Attendance Letter Fee',					'page_link'             =>  base_url() . 'attendance_cum_charector_certificate_apply/' 				),					array(					'table'					=>	'tbl_appeared_bonafide_cer_application',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Appeared Bonafied Fee',					'page_link'             =>  base_url() . 'update_payment_appeared_bonafide/'				),					array(					'table'					=>	'tbl_student_migration',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Migration Certificate',					'page_link'             =>  base_url() . 'student_migration_certificate_add_requests/'				),				array(					'table'					=>	'tbl_reccom_letter_application_second',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Recommendation Letter II',					'page_link'             =>  base_url() . 'second_update_payment_reccom/'				),				array(					'table'					=>	'tbl_reccom_letter_application',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Recommendation Letter',					'page_link'             =>  base_url() . 'update_payment_reccom/'				),				array(					'table'					=>	'tbl_student_transfer',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Transfer Certificate',					'page_link'             =>  base_url() . 'approved_student_certificate/'				),				array(					'table'					=>	'tbl_credit_transfer_certificate',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Credit Transfer Certificate',					'page_link'             =>  base_url() . 'update_credit_transfr_certificare/'				),				array(					'table'					=>	'tbl_character_certificate',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Character Certificate',					'page_link'             =>  base_url() . 'student_character_certificate_update/'				),				array(					'table'					=>	'tbl_student_provisional_degree',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Provisional Degree Certificate',					'page_link'             =>  base_url() . 'apply_student_provisional_degrees/'				),				array(					'table'					=>	'tbl_bonafide_cer_application',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Bonafide Certificate',					'page_link'             =>  base_url() . 'update_payment_bonafide/'				),				array(					'table'					=>	'tbl_medium_instruction_application',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Medium of Instruction Certificate',					'page_link'             =>  base_url() . 'update_payment_inst_medium/'				),				array(					'table'					=>	'tbl_no_backlog_application',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'No Backlog Certificate',					'page_link'             =>  base_url() . 'update_payment_no_backlog/'				),				array(					'table'					=>	'tbl_no_split_application',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'application_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'No Split Certificate',					'page_link'             =>  base_url() . 'update_payment_no_split/'				),				array(					'table'					=>	'tbl_transcript',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'registration_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Transcript Marksheet',					'page_link'             =>  base_url() . 'update_transcript_payment/'				),				array(					'table'					=>	'tbl_consolidated_marksheet',					'transaction_column'	=>	'payment_id',					'student_column'		=>	'',					'student_enrollment'	=>	'enrollment',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Consolidated Marksheet',					'page_link'             =>  base_url() . 'edit_consolidate/'				),				array(					'table'					=>	'tbl_student_degree',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'issue_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Degree Certificate',					'page_link'             =>  base_url() . 'approved_student_degree_request/'				),				array(					'table'					=>	'tbl_guide_payment',					'transaction_column'	=>	'transaction_no',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Guide Payment',					'page_link'             =>  base_url() . 'guide_payments/'				),				array(					'table'					=>	'tbl_co_guide_payment',					'transaction_column'	=>	'transaction_no',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					// 'payment_status_column'	=>	'',					'payment_status_column'	=>	'status',					'payment_for'			=>	'Co Guide Payment',					'page_link'             =>  base_url() . 'co_guide_payments/'				),				array(					'table'					=>	'tbl_phd_registration_form',					'transaction_column'	=>	'payment_id',					'student_column'		=>	'',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Entrance Exam Payment',					'page_link'             =>  base_url() . 'edit_phd_registration_payment/'				),				array(					'table'					=>	'tbl_phd_registration_form',					'transaction_column'	=>	'payment_id',					'student_column'		=>	'',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Entrance Exam Payment',					'page_link'             =>  base_url() . 'edit_phd_registration_payment/'				),				array(					'table'					=>	'tbl_re_appear',					'transaction_column'	=>	'payment_id',					'student_column'		=>	'',					'student_enrollment'	=>	'enrollment_number',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'amount',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Re appear Fee',					'page_link'             =>  base_url() . 'update_re_appear_exam_payment/'				),					array(					'table'					=>	'tbl_examination_form',					'transaction_column'	=>	'payment_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'total_examination_fees',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Exam Fees',					'page_link'             =>  base_url() . 'update_exam_payment/'				),				array(					'table'					=>	'tbl_student_fees',					'transaction_column'	=>	'transaction_id',					'student_column'		=>	'student_id',					'student_enrollment'	=>	'',					'payment_date_column'	=>	'payment_date',					'payment_amount_column'	=>	'total_fees',					'payment_status_column'	=>	'payment_status',					'payment_for'			=>	'Student Fee',					'page_link'             =>  base_url()				)			];			foreach ($tables as $table) {				    $page_link = $table['page_link'];								if ($table['table'] != 'tbl_phd_registration_form') {					if ($table['table'] == 'tbl_appeared_bonafide_cer_application') {						$this->db->select("tbl_appeared_bonafide_cer_application.*,tbl_appeared_bonafide_cer_application.application_date as payment_date, tbl_student.student_name, tbl_student.enrollment_number, tbl_center.center_name");					}else{						$this->db->select("$table[table].*, tbl_student.student_name, tbl_student.enrollment_number, tbl_center.center_name");					}					if (!empty($table['student_enrollment'])) {						$this->db->join('tbl_student', "$table[table].$table[student_enrollment] = tbl_student.enrollment_number");					} else {						$this->db->join('tbl_student', "$table[table].$table[student_column] = tbl_student.id");					}					$this->db->join('tbl_center', "tbl_center.id = tbl_student.center_id");				}							$this->db->where("$table[table].$table[transaction_column]", $transaction);				$result = $this->db->get($table['table'])->row();							if (!empty($result)) {					if ($table['table'] == 'tbl_student_fees') {						switch ($result->fees_type) {							case '1':								$payment_for = 'Admission Fee';								// $page_link = $page_link . 'manage_student_account/' . $result->student_id;								$page_link = $page_link . 'manage_student_account/' . $result->student_id . '/' . $result->id;								break;							case '2':								$payment_for = 'Exam Fee';								$page_link = $page_link . 'update_exam_payment/' . $result->examination_id;								break;							case '3':								$payment_for = 'Degree Fee';								// $page_link = $page_link . 'manage_student_account/' . $result->student_id;								$page_link = $page_link . 'manage_student_account/' . $result->student_id . '/' . $result->id;								break;							case '4':								$payment_for = 'Re-Registration Fee';								// $page_link = $page_link . 'manage_student_account/' . $result->student_id;								$page_link = $page_link . 'manage_student_account/' . $result->student_id . '/' . $result->id;								break;							default:								$payment_for = $table['payment_for'];								break;						}					} else {						$payment_for = $table['payment_for'];					}										if($table['table'] != 'tbl_student_fees'){						if($page_link != ""){							if ($table['table'] == 'tbl_consolidated_marksheet') {								$page_link = $page_link . '' . $result->id . '?redirect=consolidated_list';							}elseif ($table['table'] == 'tbl_guide_payment') {								$page_link = $page_link . '' . $result->student_id . '/' . $result->id;							}elseif ($table['table'] == 'tbl_co_guide_payment') {								$page_link = $page_link . '' . $result->student_id . '/' . $result->co_guide_id;							}else{								$page_link = $page_link . '' . $result->id;							}						}					}								$payment_date_column = $table['payment_date_column'];					 					$payment_status_column = $table['payment_status_column'];					$payment_amount_column = $table['payment_amount_column'];					if ($table['table'] == 'tbl_phd_registration_form') {						$enrollment_number = 'NA';						$center_name = 'NA';					}else{						$enrollment_number = $result->enrollment_number;						$center_name = $result->center_name;					}										$found_in_table = array(						'table'            	=> $table['table'],						'table_id'          => $result->id,						'status'            => '1',						'transaction_no'    => $transaction,						'student_name'      => $result->student_name,						'enrollment_no'     => $enrollment_number,						'center'            => $center_name,						'payment_for'       => $payment_for,						'payment_date'      => $result->$payment_date_column,						'payment_status'    => $result->$payment_status_column,						'page_link'         => $page_link,						'payment_amount'    => $result->$payment_amount_column					);					return $found_in_table;				}			}		}else{			return array();		}	}} 