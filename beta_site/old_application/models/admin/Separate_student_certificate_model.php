<?php if ( ! defined('BASEPATH')) exit('No direct script access allowed'); class Separate_student_certificate_model extends CI_Model{  	public function get_print_synopsis($id){		$this->db->select('tbl_separate_student.*,tbl_guide_application.name as guide_name,tbl_separate_synopsis.thesis_title,tbl_separate_synopsis.issue_date');		$this->db->join('tbl_separate_synopsis','tbl_separate_synopsis.student_id = tbl_separate_student.id');		$this->db->join('tbl_guide_application','tbl_guide_application.id = tbl_separate_synopsis.guide_id');				$this->db->where('tbl_separate_student.is_deleted','0');		$this->db->where('tbl_separate_synopsis.id',$id);   		$result = $this->db->get('tbl_separate_student');		return  $result = $result->row();	}	public function get_synopsis_certificate_details(){		$this->db->select('tbl_separate_student.*,tbl_separate_synopsis.issue_date,tbl_separate_synopsis.thesis_title,tbl_separate_synopsis.synopsis_status');		$this->db->where('tbl_separate_student.enrollment_number',$this->input->post('enrollment_number_verify'));		$this->db->join('tbl_separate_synopsis','tbl_separate_synopsis.student_id = tbl_separate_student.id','left');		$result = $this->db->get('tbl_separate_student');		return $result->row();	}  	public function get_synopsis_certificate_details_single(){		// echo "<pre>";print_r($this->uri->segment(2));exit;		$this->db->select('tbl_separate_student.*,tbl_separate_synopsis.issue_date,tbl_separate_synopsis.thesis_title,tbl_separate_synopsis.synopsis_status,tbl_separate_synopsis.signature_id');		$this->db->where('tbl_separate_student.enrollment_number',$this->uri->segment(2));		$this->db->join('tbl_separate_synopsis','tbl_separate_synopsis.student_id = tbl_separate_student.id','left');		$result = $this->db->get('tbl_separate_student');		return $result->row();	}  	public function set_separate_synopsis_certificate(){		$this->db->where('id',$this->input->post('student_id'));		$exist = $this->db->get('tbl_separate_student');		$exist = $exist->row();		$data = array(			'student_id' 		=> $this->input->post('student_id'), 			'student_name'		=> $this->input->post('student_name'), 			'father_name' 		=> $this->input->post('father_name'), 			'thesis_title' 		=> $this->input->post('thesis_title'),  			'synopsis_status' 	=> $this->input->post('synopsis_status'),  			'guide_id' 			=> $exist->guide_id,  			'stream_id' 		=> $exist->stream_id,  			'center_id' 		=> $exist->center_id,  			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))), 			'signature_id'		=> $this->input->post('signature'),  		);		$date = array(			'created_on' => date("Y-m-d H:i:s")		);		$this->db->where('is_deleted','0');		$this->db->where('student_id',$this->input->post('student_id'));		$result = $this->db->get('tbl_separate_synopsis');		$result = $result->row();		if(empty($result)){			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_separate_synopsis',$new_arr);		}else{			$this->db->where('student_id',$this->input->post('student_id'));			$this->db->update('tbl_separate_synopsis',$data);		}		return true;	}	public function get_charector_certificate_details(){		$this->db->select('tbl_separate_student.*,tbl_student_sparate_charector.transaction_id,tbl_student_sparate_charector.payment_status,tbl_student_sparate_charector.amount,tbl_student_sparate_charector.approve_status,tbl_student_sparate_charector.issue_date,tbl_student_sparate_charector.sent_for_print,tbl_student_sparate_charector.payment_date');		$this->db->where('tbl_separate_student.enrollment_number',$this->input->post('enrollment_number_verify'));		$this->db->join('tbl_student_sparate_charector','tbl_student_sparate_charector.student_id = tbl_separate_student.id','left');		$result = $this->db->get('tbl_separate_student');		return $result->row();	}  		public function sent_charector_certificates_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_student_sparate_charector',$data);			}		}		return true;	}	public function get_transfer_certificate($id){ 		$this->db->select("tbl_separate_student_transfer.*,tbl_separate_student.student_name,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_separate_student.gender,tbl_course.course_name,tbl_stream.stream_name");		$this->db->where("tbl_separate_student_transfer.is_deleted","0");		$this->db->where('tbl_separate_student_transfer.payment_status',"1");		$this->db->where("tbl_separate_student_transfer.id",$id);		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_transfer.student_id");		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id");		// $this->db->join('tbl_signature','tbl_signature.id = tbl_separate_student_transfer.signature_id'); 		$result = $this->db->get("tbl_separate_student_transfer")->row();		if(!empty($result)){			$result->bg_image = $this->Digitalocean_model->get_photo('images/marksheet-bg-with-logo.jpeg');			$result->spacial_officer = $this->Digitalocean_model->get_photo('images/spacial_officer.png');		}		return $result;		// echo "<pre>";print_r($result);exit;	}	public function get_transfer_certificate_new($id){ 		// echo "<pre>";print_r($id);exit;		$this->db->select("tbl_signature.name as signature_name,tbl_signature.signature,tbl_signature.dispalay_signature,tbl_separate_student_transfer.*,tbl_separate_student.student_name,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_separate_student.gender,tbl_course.course_name,tbl_stream.stream_name");		$this->db->where("tbl_separate_student_transfer.is_deleted","0");		$this->db->where("tbl_separate_student_transfer.status","1");		$this->db->where('tbl_separate_student_transfer.payment_status',"1");		$this->db->where("tbl_separate_student_transfer.id",$id);		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_transfer.student_id");		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id");		$this->db->join('tbl_signature','tbl_signature.id = tbl_separate_student_transfer.signature_id','left'); 		$result = $this->db->get("tbl_separate_student_transfer")->row();		// if(!empty($result)){		// 	$result->bg_image = $this->Digitalocean_model->get_photo('images/marksheet-bg-with-logo.jpeg');		// 	$result->spacial_officer = $this->Digitalocean_model->get_photo('images/spacial_officer.png');		// }		return $result;		// echo "<pre>";print_r($result);exit;	}	public function get_charector_certificate_details_single(){		$this->db->select('tbl_separate_student.*,tbl_student_sparate_charector.file,tbl_student_sparate_charector.transaction_id,tbl_student_sparate_charector.payment_status,tbl_student_sparate_charector.amount,tbl_student_sparate_charector.approve_status,tbl_student_sparate_charector.issue_date,tbl_student_sparate_charector.sent_for_print,tbl_student_sparate_charector.payment_date');		$this->db->where('tbl_separate_student.enrollment_number',$this->uri->segment(2));		$this->db->join('tbl_student_sparate_charector','tbl_student_sparate_charector.student_id = tbl_separate_student.id','left');		$result = $this->db->get('tbl_separate_student');		return $result->row();	} 	public function get_charector_certificate_details_for_print($id){		$this->db->select('tbl_separate_student.*,tbl_student_sparate_charector.file,tbl_student_sparate_charector.transaction_id,tbl_student_sparate_charector.payment_status,tbl_student_sparate_charector.amount,tbl_student_sparate_charector.approve_status,tbl_student_sparate_charector.issue_date,tbl_student_sparate_charector.sent_for_print,tbl_student_sparate_charector.payment_date,tbl_course.course_name,tbl_stream.stream_name');		$this->db->where('tbl_student_sparate_charector.id',$id);		$this->db->join('tbl_student_sparate_charector','tbl_student_sparate_charector.student_id = tbl_separate_student.id','left');		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id");		$result = $this->db->get('tbl_separate_student');		if(!empty($result)){			$result->bg_image = $this->Digitalocean_model->get_photo('images/marksheet-bg-with-logo.jpeg');			$result->spacial_officer = $this->Digitalocean_model->get_photo('images/spacial_officer.png');		}		return $result->row();	} 	public function set_separate_charector_certificate($ppc){ 		$data = array(			'student_id' 		=> $this->input->post('student_id'), 			'transaction_id' 	=> $this->input->post('transaction_id'), 			'payment_status' 	=> $this->input->post('payment_status'), 			'amount' 			=> $this->input->post('amount'), 			'approve_status' 	=> $this->input->post('approve_status'), 			'status' 			=> $this->input->post('approve_status'), 			'file' 				=> $ppc, 			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))), 			'payment_date' 		=> date("Y-m-d",strtotime($this->input->post('payment_date'))), 		);		$date = array(			'created_on' => date("Y-m-d H:i:s")		);		$this->db->where('is_deleted','0');		$this->db->where('student_id',$this->input->post('student_id'));		$result = $this->db->get('tbl_student_sparate_charector');		$result = $result->row();		if(empty($result)){			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_student_sparate_charector',$new_arr);		}else{			$this->db->where('student_id',$this->input->post('student_id'));			$this->db->update('tbl_student_sparate_charector',$data);		}		return true;	}	public function get_tranfer_certificate_details(){		$this->db->select('tbl_separate_student.*,tbl_course.print_name,tbl_separate_student_transfer.reason_of_transfer,tbl_separate_student_transfer.character_conduct,tbl_separate_student_transfer.transaction_id,tbl_separate_student_transfer.payment_status,tbl_separate_student_transfer.amount,tbl_separate_student_transfer.approve_status,tbl_separate_student_transfer.issue_date,tbl_separate_student_transfer.sent_for_print,tbl_separate_student_transfer.payment_date');		$this->db->where('tbl_separate_student.enrollment_number',$this->input->post('enrollment_number_verify'));		$this->db->join('tbl_separate_student_transfer','tbl_separate_student_transfer.student_id = tbl_separate_student.id','left');		$this->db->join('tbl_course','tbl_course.id = tbl_separate_student.course_id','left');		$result = $this->db->get('tbl_separate_student');		return $result->row();	} 	public function get_tranfer_certificate_details_single(){		$this->db->select('tbl_separate_student.*,tbl_course.print_name,tbl_separate_student_transfer.reason_of_transfer,tbl_separate_student_transfer.character_conduct,tbl_separate_student_transfer.transaction_id,tbl_separate_student_transfer.payment_status,tbl_separate_student_transfer.amount,tbl_separate_student_transfer.approve_status,tbl_separate_student_transfer.issue_date,tbl_separate_student_transfer.sent_for_print,tbl_separate_student_transfer.payment_date');		$this->db->where('tbl_separate_student.enrollment_number',$this->uri->segment(2));		$this->db->join('tbl_separate_student_transfer','tbl_separate_student_transfer.student_id = tbl_separate_student.id','left');		$this->db->join('tbl_course','tbl_course.id = tbl_separate_student.course_id','left');		$result = $this->db->get('tbl_separate_student');		return $result->row();	}	public function set_separate_transfer_certificate(){ 		$data = array(			'student_id' 		=> $this->input->post('student_id'), 			'reason_of_transfer'=> $this->input->post('reason_of_transfer'), 			'character_conduct' => $this->input->post('character_conduct'), 			'transaction_id' 	=> $this->input->post('transaction_id'), 			'payment_status' 	=> $this->input->post('payment_status'), 			'amount' 			=> $this->input->post('amount'), 			'approve_status' 	=> $this->input->post('approve_status'), 			// 'status' 			=> $this->input->post('approve_status'),			'signature_id' 		=> $this->input->post('signature'),			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))), 			'payment_date' 		=> date("Y-m-d",strtotime($this->input->post('payment_date'))), 		);		$date = array(			'created_on' => date("Y-m-d H:i:s")		);		$this->db->where('is_deleted','0');		$this->db->where('student_id',$this->input->post('student_id'));		$result = $this->db->get('tbl_separate_student_transfer');		$result = $result->row();		if(empty($result)){			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_separate_student_transfer',$new_arr);		}else{			$this->db->where('student_id',$this->input->post('student_id'));			$this->db->update('tbl_separate_student_transfer',$data);		}		return true;	}	public function get_separate_student_details(){		$this->db->where('enrollment_number',$this->input->post('enrollment_number'));		$result = $this->db->get('tbl_separate_student');		$result = $result->row();		echo json_encode($result);	}	public function get_single_available_degree(){ 		$this->db->where('enrollment_number',$this->input->post('enrollment_number'));		$this->db->where('is_deleted','0'); 		$result = $this->db->get('tbl_separate_student');		$result = $result->row();		return $result;	}	public function get_single_degree(){		$this->db->select('tbl_separate_student_degree.*,tbl_separate_student.enrollment_number,tbl_separate_student.id as new_student_id,tbl_separate_student.student_name,tbl_separate_student.father_name');		$this->db->where('tbl_separate_student.enrollment_number',$this->uri->segment(2)); 		$this->db->where('tbl_separate_student.is_deleted','0');		$this->db->where('tbl_separate_student.status','1');		$this->db->join('tbl_separate_student_degree','tbl_separate_student_degree.student_id = tbl_separate_student.id','left');		$result = $this->db->get('tbl_separate_student');		$result = $result->row();		return $result;	}	// public function get_single_degree(){	// 	$this->db->select('tbl_separate_student_degree.*,tbl_separate_student.enrollment_number,tbl_separate_student.id as new_student_id,tbl_separate_student.student_name,tbl_separate_student.father_name,tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature');	// 	$this->db->where('tbl_separate_student.enrollment_number',$this->uri->segment(2)); 	// 	$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_student_degree.student_id','left');	// 	$this->db->join("tbl_signature","tbl_signature.id = tbl_separate_student_degree.signature_id","left");	// 	$result = $this->db->get('tbl_separate_student_degree');	// 	$result = $result->row();	// 	return $result;	// }	public function get_student_division_for_degree_new_degree($student_id){  		$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");		$this->db->where("is_deleted","0");		$this->db->where("status","1");		$this->db->where("result","0");		$this->db->where("student_id",$student_id);		$this->db->order_by("year_sem","DESC");		$result = $this->db->get("tbl_separate_student_exam_results");		$result = $result->result();				$total_marks = 0;		$gained_marks = 0;		$data = array();		if(!empty($result)){			foreach($result as $res){				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			} 			$percentage = $total_marks == 0?0:($gained_marks/$total_marks)*100; 			if($percentage >= 60){				$data["division"] = "First ";			}else if($percentage < 60 & $percentage>= 45){				$data["division"] = "Second ";			}else{				$data["division"] = "Third ";			}			$data["date"] = $result[0]->examination_year;			return $data;		}	}	public function set_degree_application(){		$this->db->where('student_id',$this->input->post('student_id'));		$this->db->where('is_deleted','0');		$exist = $this->db->get('tbl_separate_student_degree');		$exist = $exist->row();		$pass_year = $this->get_student_division_for_degree_new_degree($this->input->post('student_id'));		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'payment_status' 	=> $this->input->post('payment_status'),			'amount' 			=> $this->input->post('amount'),			'approve_status' 	=> $this->input->post('approve_status'),			'signature_id' 		=> $this->input->post('signature'),			"chancellor_signature_id" => $this->input->post('chancellor_signature'),			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),			'payment_date' 		=> date("Y-m-d",strtotime($this->input->post('payment_date'))), 			// 'status' 			=> '1',			'sr_no'				=> "IDZS".$pass_year['date'].$this->input->post('student_id')		);		$date = array(			'created_on' => date("Y-m-d H:i:s"),		);		if(!empty($exist)){			$this->db->where('student_id',$exist->student_id);			$this->db->update('tbl_separate_student_degree',$data);		}else{			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_separate_student_degree',$new_arr);		} 		return true;	}	public function get_student_degree($id){		$this->db->select("tbl_separate_student_degree.*,tbl_separate_student.student_name,tbl_separate_student.course_id,tbl_separate_student.stream_id,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_separate_student.photo,tbl_session.session_start_date,tbl_course.course_name,tbl_course.print_name,tbl_stream.stream_name");		$this->db->where("tbl_separate_student_degree.is_deleted","0");		$this->db->where("tbl_separate_student_degree.payment_status","1");		$this->db->where("tbl_separate_student_degree.id",$id);  		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_degree.student_id");		$this->db->join("tbl_session","tbl_session.id = tbl_separate_student.session_id"); 		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id");  		$result = $this->db->get("tbl_separate_student_degree")->row();		return $result;	}	public function get_alumni_year_duration($course_id,$stream_id){ 		$this->db->where('course',$course_id);		$this->db->where('stream',$stream_id);		$this->db->where('is_deleted','0');		$result = $this->db->get('tbl_course_stream_relation');		$result = $result->row();		return $result;	}	/*public function get_student_division_for_degree_new_degree($student_id){  		$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");		$this->db->where("is_deleted","0");		$this->db->where("status","1");		$this->db->where("result","0");		$this->db->where("student_id",$student_id);		$this->db->order_by("year_sem","DESC");		$result = $this->db->get("tbl_separate_student_exam_results");		$result = $result->result();				$total_marks = 0;		$gained_marks = 0;		$data = array();		if(!empty($result)){			foreach($result as $res){				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			} 			$percentage = $total_marks == 0?0:($gained_marks/$total_marks)*100; 			if($percentage >= 60){				$data["division"] = "First ";			}else if($percentage < 60 & $percentage>= 45){				$data["division"] = "Second ";			}else{				$data["division"] = "Third ";			}			$data["date"] = $result[0]->examination_year;			return $data;		}	}*/	public function get_all_migration_certificate_requests_list($length,$start,$search){		$this->db->select("tbl_separate_student_migration.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_migration.is_deleted','0');		$this->db->where('tbl_separate_student_migration.status','1');		// $this->db->where('tbl_separate_student_migration.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_migration.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_migration.approve_status', '0');		$this->db->or_where('tbl_separate_student_migration.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_migration.payment_status', '1');		$this->db->where('tbl_separate_student_migration.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_migration.transaction_id',$search);			$this->db->or_like('tbl_separate_student_migration.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_migration.student_id");		$this->db->order_by('tbl_separate_student_migration.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_migration');		return $result->result();			}	public function get_all_migration_certificate_requests_list_count($search){		$this->db->select("tbl_separate_student_migration.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_migration.is_deleted','0');		$this->db->where('tbl_separate_student_migration.status','1');		// $this->db->where('tbl_separate_student_migration.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_migration.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_migration.approve_status', '0');		$this->db->or_where('tbl_separate_student_migration.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_migration.payment_status', '1');		$this->db->where('tbl_separate_student_migration.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_migration.transaction_id',$search);			$this->db->or_like('tbl_separate_student_migration.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_migration.student_id");		$this->db->order_by('tbl_separate_student_migration.id','DESC');		$result = $this->db->get('tbl_separate_student_migration');		return $result->num_rows();	}	public function update_separate_student_migration_issue_date(){		$data = array(			'approve_status' => '1',			"status"=>'1',			'issue_date' => date("Y-m-d",strtotime($this->input->post('issue_date'))),		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_migration",$data);	}	public function get_single_separate_student_migration(){		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_separate_student_migration');		return $result->row();	}	public function unverify_separate_student_migration_certificate(){		$data = array(			"status"=>'0'		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_migration",$data);	}	public function get_all_migration_certificates_list($length,$start,$search){		$this->db->select("tbl_center.center_name,tbl_separate_student_migration.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_migration.is_deleted','0');		$this->db->where('tbl_separate_student_migration.status','1');		$this->db->where('tbl_separate_student_migration.payment_status','1');		$this->db->where('tbl_separate_student_migration.approve_status','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_center.center_name',$search);			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_migration.transaction_id',$search);			$this->db->or_like('tbl_separate_student_migration.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_migration.student_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_student_migration.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_migration');		return $result->result();			}	public function get_all_migration_certificates_list_count($search){		$this->db->select("tbl_center.center_name,tbl_separate_student_migration.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_migration.is_deleted','0');		$this->db->where('tbl_separate_student_migration.status','1');		$this->db->where('tbl_separate_student_migration.payment_status','1');		$this->db->where('tbl_separate_student_migration.approve_status','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_center.center_name',$search);			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_migration.transaction_id',$search);			$this->db->or_like('tbl_separate_student_migration.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_migration.student_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_student_migration.id','DESC');		$result = $this->db->get('tbl_separate_student_migration');		return $result->num_rows();	}	// ==================================================================		public function approve_separate_student_transfer_certificate_requests(){		$data = array(			"reason_of_transfer"=>$this->input->post("reason_of_transfer"),			"character_conduct"=>$this->input->post("character_conduct"),			"status"=>"1",		);		$this->db->where("id",$this->input->post("id"));		$this->db->update("tbl_separate_student_transfer",$data);	}	public function update_separate_student_transfer_issue_date(){		$data = array(			'approve_status' => '1',			"status"=>'1',			'issue_date' => date("Y-m-d",strtotime($this->input->post('issue_date'))),		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_transfer",$data);		return true;	}	public function get_single_separate_student_transfer(){		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_separate_student_transfer');		return $result->row();	}	public function get_all_separate_student_transfer_certificate_requests_list($length,$start,$search){		$this->db->select("tbl_separate_student_transfer.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_transfer.is_deleted','0');		$this->db->where('tbl_separate_student_transfer.status','1');		// $this->db->where('tbl_separate_student_transfer.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_transfer.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_transfer.approve_status', '0');		$this->db->or_where('tbl_separate_student_transfer.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_transfer.payment_status', '1');		$this->db->where('tbl_separate_student_transfer.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_transfer.transaction_id',$search);			$this->db->or_like('tbl_separate_student_transfer.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_transfer.student_id");		$this->db->order_by('tbl_separate_student_transfer.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_transfer');		return $result->result();			}	public function get_all_separate_student_transfer_certificate_requests_list_count($search){		$this->db->select("tbl_separate_student_transfer.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_transfer.is_deleted','0');		$this->db->where('tbl_separate_student_transfer.status','1');		// $this->db->where('tbl_separate_student_transfer.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_transfer.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_transfer.approve_status', '0');		$this->db->or_where('tbl_separate_student_transfer.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_transfer.payment_status', '1');		$this->db->where('tbl_separate_student_transfer.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_transfer.transaction_id',$search);			$this->db->or_like('tbl_separate_student_transfer.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_transfer.student_id");		$this->db->order_by('tbl_separate_student_transfer.id','DESC');		$result = $this->db->get('tbl_separate_student_transfer');		return $result->num_rows();	}	public function get_recommendation_letter_new($id){		$this->db->select("tbl_signature.name as signature_name,tbl_signature.signature,tbl_signature.dispalay_signature,tbl_separate_student_recommendation_letter.*,tbl_separate_student.student_name,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_separate_student.gender,tbl_course.course_name,tbl_stream.stream_name");		$this->db->where("tbl_separate_student_recommendation_letter.is_deleted","0");		$this->db->where("tbl_separate_student_recommendation_letter.status","1");		$this->db->where('tbl_separate_student_recommendation_letter.payment_status',"1");		$this->db->where("tbl_separate_student_recommendation_letter.id",$id);		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_recommendation_letter.student_id");		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id");		$this->db->join('tbl_signature','tbl_signature.id = tbl_separate_student_recommendation_letter.signature_id','left'); 		$result = $this->db->get("tbl_separate_student_recommendation_letter")->row();		return $result;		// echo "<pre>";print_r($result);exit;	}	public function get_all_appproved_separate_student_transfer_certificate_list($length,$start,$search){		$this->db->select("tbl_center.center_name,tbl_separate_student_transfer.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_transfer.is_deleted','0');		$this->db->where('tbl_separate_student_transfer.status','1');		$this->db->where('tbl_separate_student_transfer.payment_status','1');		$this->db->where('tbl_separate_student_transfer.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_center.center_name',$search);			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_transfer.transaction_id',$search);			$this->db->or_like('tbl_separate_student_transfer.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_transfer.student_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_student_transfer.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_transfer');		return $result->result();			}	public function get_all_appproved_separate_student_transfer_certificate_list_count($search){		$this->db->select("tbl_center.center_name,tbl_separate_student_transfer.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_transfer.is_deleted','0');		$this->db->where('tbl_separate_student_transfer.status','1');		$this->db->where('tbl_separate_student_transfer.payment_status','1');		$this->db->where('tbl_separate_student_transfer.approve_status','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_center.center_name',$search);			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_transfer.transaction_id',$search);			$this->db->or_like('tbl_separate_student_transfer.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_transfer.student_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_student_transfer.id','DESC');		$result = $this->db->get('tbl_separate_student_transfer');		return $result->num_rows();	}	public function unapproved_separate_student_transfer_certificate(){		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_transfer",array("status"=>'0'));	}	public function get_all_separate_student_recommendation_letter_requests_list($length,$start,$search){		$this->db->select("tbl_separate_student_recommendation_letter.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_recommendation_letter.is_deleted','0');		$this->db->where('tbl_separate_student_recommendation_letter.status','1');		// $this->db->where('tbl_separate_student_recommendation_letter.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_recommendation_letter.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_recommendation_letter.approve_status', '0');		$this->db->or_where('tbl_separate_student_recommendation_letter.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_recommendation_letter.payment_status', '1');		$this->db->where('tbl_separate_student_recommendation_letter.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.transaction_id',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_recommendation_letter.student_id");		$this->db->order_by('tbl_separate_student_recommendation_letter.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_recommendation_letter');		return $result->result();			}	public function get_all_separate_student_recommendation_letter_requests_list_count($search){		$this->db->select("tbl_separate_student_recommendation_letter.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_recommendation_letter.is_deleted','0');		$this->db->where('tbl_separate_student_recommendation_letter.status','1');		// $this->db->where('tbl_separate_student_recommendation_letter.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_recommendation_letter.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_recommendation_letter.approve_status', '0');		$this->db->or_where('tbl_separate_student_recommendation_letter.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_recommendation_letter.payment_status', '1');		$this->db->where('tbl_separate_student_recommendation_letter.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.transaction_id',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_recommendation_letter.student_id");		$this->db->order_by('tbl_separate_student_recommendation_letter.id','DESC');		$result = $this->db->get('tbl_separate_student_recommendation_letter');		return $result->num_rows();	}	public function set_recommendation_letter_application(){ 		$data = array(			'student_id' 		=> $this->input->post('student_id'),			// 'migration_session' 	=> $this->input->post('migration_session'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))), //			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),  //			// 'status' 			=> $this->input->post('status'),			'signature_id'		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		// echo "<pre>";print_r($data);exit;		if($this->input->post('id') == ""){			$this->db->insert('tbl_separate_student_recommendation_letter',$data);		}else{			$this->db->where('id',$this->input->post('id'));			$this->db->update('tbl_separate_student_recommendation_letter',$data);		}		return true;	}	public function get_single_recommmendation_letter_student(){		$this->db->select('tbl_separate_student_recommendation_letter.*,tbl_separate_student.enrollment_number,tbl_separate_student.student_name,tbl_separate_student.father_name');		$this->db->where('tbl_separate_student_recommendation_letter.id',$this->uri->segment(2));		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_student_recommendation_letter.student_id');		$result = $this->db->get('tbl_separate_student_recommendation_letter');		return $result->row();	}	public function approve_separate_student_recommendation_letter(){		$data = array(			"status"=>"1"		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_recommendation_letter",$data);	}	public function unapproved_separate_student_recommendation_letter(){		$data = array(			"status"=>"0"		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_recommendation_letter",$data);	}	public function get_all_approved_separate_student_recommendation_letter_list($length,$start,$search){		$this->db->select("tbl_separate_student_recommendation_letter.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_recommendation_letter.is_deleted','0');		$this->db->where('tbl_separate_student_recommendation_letter.status','1');		$this->db->where('tbl_separate_student_recommendation_letter.payment_status','1');		$this->db->where('tbl_separate_student_recommendation_letter.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.transaction_id',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_recommendation_letter.student_id");		$this->db->order_by('tbl_separate_student_recommendation_letter.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_recommendation_letter');		return $result->result();			}	public function get_all_approved_separate_student_recommendation_letter_list_count($search){		$this->db->select("tbl_separate_student_recommendation_letter.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_recommendation_letter.is_deleted','0');		$this->db->where('tbl_separate_student_recommendation_letter.status','1');		$this->db->where('tbl_separate_student_recommendation_letter.payment_status','1');		$this->db->where('tbl_separate_student_recommendation_letter.approve_status','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.transaction_id',$search);			$this->db->or_like('tbl_separate_student_recommendation_letter.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_recommendation_letter.student_id");		$this->db->order_by('tbl_separate_student_recommendation_letter.id','DESC');		$result = $this->db->get('tbl_separate_student_recommendation_letter');		return $result->num_rows();	}	public function get_all_separate_student_degree_requests_list($length,$start,$search){		$this->db->select("tbl_separate_student_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_degree.is_deleted','0');		$this->db->where('tbl_separate_student_degree.status','1');		// $this->db->where('tbl_separate_student_degree.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_degree.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_degree.approve_status', '0');		$this->db->or_where('tbl_separate_student_degree.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_degree.payment_status', '1');		$this->db->where('tbl_separate_student_degree.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_degree.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_degree.student_id");		$this->db->order_by('tbl_separate_student_degree.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_degree');		return $result->result();			}	public function get_all_separate_student_degree_requests_list_count($search){		$this->db->select("tbl_separate_student_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_degree.is_deleted','0');		$this->db->where('tbl_separate_student_degree.status','1');		// $this->db->where('tbl_separate_student_degree.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_degree.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_degree.approve_status', '0');		$this->db->or_where('tbl_separate_student_degree.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_degree.payment_status', '1');		$this->db->where('tbl_separate_student_degree.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_degree.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_degree.student_id");		$this->db->order_by('tbl_separate_student_degree.id','DESC');		$result = $this->db->get('tbl_separate_student_degree');		return $result->num_rows();	}	public function update_separate_student_degree_issue_date(){		$data = array(			'approve_status' => '1',			"status"=>'1',			'issue_date' => date("Y-m-d",strtotime($this->input->post('issue_date'))),		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_degree",$data);	}	// public function get_single_degree_student(){	// 	$this->db->select('tbl_separate_student_degree.*,tbl_separate_student.enrollment_number,tbl_separate_student.student_name,tbl_separate_student.father_name');	// 	$this->db->where('tbl_separate_student_degree.id',$this->uri->segment(2));	// 	$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_student_degree.student_id');	// 	$result = $this->db->get('tbl_separate_student_degree');	// 	return $result->row();	// }	public function get_single_separate_student_degree(){		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_separate_student_degree');		return $result->row();	}	public function unapproved_separate_student_degree(){		$data = array(			"approve_status" => "0"		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_degree",$data);	}	public function get_all_approved_separate_student_degree_list($length,$start,$search){		$this->db->select("tbl_separate_student_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_degree.is_deleted','0');		$this->db->where('tbl_separate_student_degree.status','1');		$this->db->where('tbl_separate_student_degree.payment_status','1');		$this->db->where('tbl_separate_student_degree.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_degree.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_degree.student_id");		$this->db->order_by('tbl_separate_student_degree.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_degree');		return $result->result();			}	public function get_all_approved_separate_student_degree_list_count($search){		$this->db->select("tbl_separate_student_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_degree.is_deleted','0');		$this->db->where('tbl_separate_student_degree.status','1');		$this->db->where('tbl_separate_student_degree.payment_status','1');		$this->db->where('tbl_separate_student_degree.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_degree.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_degree.student_id");		$this->db->order_by('tbl_separate_student_degree.id','DESC');		$result = $this->db->get('tbl_separate_student_degree');		return $result->num_rows();	}	public function get_all_separate_student_provisional_degree_requests_list($length,$start,$search){		$this->db->select("tbl_separate_student_provisional_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_provisional_degree.is_deleted','0');		$this->db->where('tbl_separate_student_provisional_degree.status','0');		// $this->db->where('tbl_separate_student_provisional_degree.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_provisional_degree.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_provisional_degree.approve_status', '0');		$this->db->or_where('tbl_separate_student_provisional_degree.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_provisional_degree.payment_status', '1');		$this->db->where('tbl_separate_student_provisional_degree.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id");		$this->db->order_by('tbl_separate_student_provisional_degree.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_provisional_degree');		return $result->result();			}	public function get_all_separate_student_provisional_degree_requests_list_count($search){		$this->db->select("tbl_separate_student_provisional_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_student_provisional_degree.is_deleted','0');		$this->db->where('tbl_separate_student_provisional_degree.status','0');		// $this->db->where('tbl_separate_student_provisional_degree.payment_status','1');		$this->db->group_start();		$this->db->where('tbl_separate_student_provisional_degree.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_separate_student_provisional_degree.approve_status', '0');		$this->db->or_where('tbl_separate_student_provisional_degree.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_separate_student_provisional_degree.payment_status', '1');		$this->db->where('tbl_separate_student_provisional_degree.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.created_on',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id");		$this->db->order_by('tbl_separate_student_provisional_degree.id','DESC');		$result = $this->db->get('tbl_separate_student_provisional_degree');		return $result->num_rows();	}	public function get_all_approved_separate_student_provisional_degrees_list($length,$start,$search){		$this->db->select("tbl_separate_student_provisional_degree.*,tbl_separate_student.student_name,tbl_separate_student.username,tbl_separate_student.password,tbl_separate_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_separate_student_provisional_degree.is_deleted','0');		$this->db->where('tbl_separate_student_provisional_degree.status','1');		$this->db->where('tbl_separate_student_provisional_degree.payment_status','1');		$this->db->where('tbl_separate_student_provisional_degree.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.created_on',$search);			$this->db->or_like('tbl_center.center_name',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_student_provisional_degree.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_separate_student_provisional_degree');		return $result->result();			}	public function get_all_approved_separate_student_provisional_degrees_list_count($search){		$this->db->select("tbl_separate_student_provisional_degree.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_separate_student_provisional_degree.is_deleted','0');		$this->db->where('tbl_separate_student_provisional_degree.status','1');		$this->db->where('tbl_separate_student_provisional_degree.payment_status','1');		$this->db->where('tbl_separate_student_provisional_degree.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.transaction_id',$search);			$this->db->or_like('tbl_separate_student_provisional_degree.created_on',$search);			$this->db->or_like('tbl_center.center_name',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_student_provisional_degree.id','DESC');		$result = $this->db->get('tbl_separate_student_provisional_degree');		return $result->num_rows();	}	public function update_separate_student_provisional_degrees_issue_date(){		$data = array(			'approve_status' => '1',			"status"=>'1',			'issue_date' => date("Y-m-d",strtotime($this->input->post('issue_date'))),		);		$this->db->where("id",$this->uri->segment(2));		$this->db->update("tbl_separate_student_provisional_degree",$data);	}	public function get_single_separate_student_provisional_degrees(){		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_separate_student_provisional_degree');		return $result->row();	}	public function get_print_provisional_degree_certificate_regular($id){		$_GET = $_POST;  		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_separate_student_provisional_degree.*,tbl_separate_student.course_id,tbl_separate_student.student_name,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_session.session_start_date,tbl_course.course_name,tbl_stream.stream_name,tbl_course_type.in_degree");		$this->db->where("tbl_separate_student_provisional_degree.is_deleted","0");		$this->db->where("tbl_separate_student_provisional_degree.payment_status","1"); 		$this->db->where("tbl_separate_student_provisional_degree.id",$id); 		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id");		$this->db->join("tbl_session","tbl_session.id = tbl_separate_student.session_id"); 		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id"); 		$this->db->join("tbl_signature","tbl_signature.id = tbl_separate_student_provisional_degree.signature_id","left");		$this->db->join("tbl_course_type","tbl_course_type.id = tbl_separate_student.course_type"); 		$result = $this->db->get("tbl_separate_student_provisional_degree");		$result = $result->row();		// echo "<pre>";print_r($result);exit;		return $result;	}	public function get_print_division_for_degree_regular($student,$course_id){		$_GET = $_POST;		if($course_id != "23"){			$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");			$this->db->where("is_deleted","0");			$this->db->where("status","1");			$this->db->where("result","0");			$this->db->where("student_id",$student);			$this->db->order_by("year_sem","DESC");			$result = $this->db->get("tbl_separate_student_exam_results")->result(); 			$total_marks = 0;			$gained_marks = 0;			foreach($result as $res){				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			}			$percentage = $total_marks == 0?0:($gained_marks/$total_marks)*100;			if($percentage >= 60){				$data["division"] = "First Division";			}else if($percentage < 60 & $percentage>= 45){				$data["division"] = "Second Division";			}else{				$data["division"] = "Third Division";			}			$data["date"] = $result[0]->examination_year;			return $data;		}else{			 		}	}		public function get_student_division_for_degree($student){			$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");			$this->db->where("is_deleted","0");			$this->db->where("status","1");			$this->db->where("result","0");			$this->db->where("student_id",$student);			$this->db->order_by("year_sem","DESC");			$result = $this->db->get("tbl_separate_student_exam_results")->result(); 			if(empty($result)) {				return ['division' => 'No Result Found']; // or handle this case as per your requirement			}						$total_marks = 0;			$gained_marks = 0;			foreach($result as $res){				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			}			$percentage = $total_marks == 0?0:($gained_marks/$total_marks)*100;			if($percentage >= 60){				$data["division"] = "First Division";			}else if($percentage < 60 & $percentage>= 45){				$data["division"] = "Second Division";			}else{				$data["division"] = "Third Division";			}			$data["date"] = $result[0]->examination_year;			return $data;	}	public function get_student_transcript_certificate_failed($length,$start,$search){		$this->db->select("tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.payment_status','0');  		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search); 			$this->db->or_like('tbl_separate_transcript.created_on',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->order_by('tbl_separate_transcript.id','DESC');		$this->db->limit($length,$start); 		$result = $this->db->get('tbl_separate_transcript');		return $result->result();			}	public function get_student_transcript_certificate_failed_count($search){		$this->db->select("tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.payment_status','0');  		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search); 			$this->db->or_like('tbl_separate_transcript.created_on',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->order_by('tbl_separate_transcript.id','DESC'); 		$result = $this->db->get('tbl_separate_transcript');		return $result->num_rows();	}	public function get_student_transcript_certificate_success($length,$start,$search){		$this->db->select("tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.payment_status','1');		$this->db->where('tbl_separate_transcript.approve_status','0');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search); 			$this->db->or_like('tbl_separate_transcript.created_on',$search); 			$this->db->or_like('tbl_center.center_name',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_transcript.id','DESC');		$this->db->limit($length,$start); 		$result = $this->db->get('tbl_separate_transcript');		return $result->result();			}	public function get_student_transcript_certificate_success_count($search){		$this->db->select("tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_center.center_name");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.payment_status','1');		$this->db->where('tbl_separate_transcript.approve_status','0');  		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search); 			$this->db->or_like('tbl_separate_transcript.created_on',$search); 			$this->db->or_like('tbl_center.center_name',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id");		$this->db->order_by('tbl_separate_transcript.id','DESC'); 		$result = $this->db->get('tbl_separate_transcript');		return $result->num_rows();	}	public function get_student_transcript_certificate_approved($length,$start,$search){		$this->db->select("tbl_center.center_name,tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.username,tbl_separate_student.password");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.payment_status','1');		$this->db->where('tbl_separate_transcript.approve_status','1');		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->join("tbl_center","tbl_center.id = tbl_separate_student.center_id","left");		$this->db->order_by('tbl_separate_transcript.id','DESC');		$this->db->limit($length,$start); 		$result = $this->db->get('tbl_separate_transcript');		return $result->result();			}	public function get_student_transcript_certificate_approved_count($search){		$this->db->select("tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.payment_status','1');		$this->db->where('tbl_separate_transcript.approve_status','1');  		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_separate_student.student_name',$search);			$this->db->or_like('tbl_separate_student.enrollment_number',$search); 			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->order_by('tbl_separate_transcript.id','DESC'); 		$result = $this->db->get('tbl_separate_transcript');		return $result->num_rows();	}	public function approve_transcript(){	    $data = array(	        'approve_status' => '1',	         'issue_date' => date("Y-m-d",strtotime($this->input->post('issue_date'))),	        );	    $this->db->where('id',$this->input->post('id'));	    $this->db->update('tbl_separate_transcript',$data);	    return true;	}	public function disapprove_transcript(){	    $data = array(	        'approve_status' => '0'	        );	    $this->db->where('id',$this->uri->segment(2));	    $this->db->update('tbl_separate_transcript',$data);	    return true;	}	public function get_vlaidate_student(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('enrollment_number',$this->input->post('enrollment_number'));    		$result = $this->db->get('tbl_separate_transcript');		$result = $result->row();		if(!empty($result)){			redirect('s_edit_transcript/'.$result->id);		}else{			$this->db->where('is_deleted','0');			$this->db->where('status','1');			$this->db->where('enrollment_number',$this->input->post('enrollment_number'));    			$result = $this->db->get('tbl_separate_student');			$result = $result->row();			if(!empty($result)){				redirect('s_student_transcript_certificate_add/'.$result->enrollment_number);			}else{				$this->session->set_flashdata('message','Please enter valid enrollment number');				redirect('s_student_transcript_certificate_add');			}		}	} 	public function set_transcript_form(){          $data = array(                'enrollment_number' => $this->input->post('enrollment_number'),                'registration_id'   => $this->input->post('registration_id'),                'course_duration'   => $this->input->post('duration_of_course'),                'year_of_passing'   => $this->input->post('year_of_passing'),				'issue_date'   		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),                 'payment_date'      => date("Y-m-d"),                'created_on'        => date("Y-m-d H:i:s")            );            $this->db->insert('tbl_separate_transcript',$data);            $last_id = $this->db->insert_id();			// echo "<pre>";print_r($this->input->post('sem'));exit;            $sem = $this->input->post('sem');            $subject = $this->input->post('subject');            $type = $this->input->post('type');            $max_mark = $this->input->post('max_mark');            $obtained = $this->input->post('obtained');            $detail_arr = array();            for($i=0; $i < count($sem); $i++){                $detail_arr[] = array(                        'transcript_id' => $last_id,                        'sem'           => $sem[$i],                        'subject'       => $subject[$i],                        'type'          => $type[$i],                        'max_mark'      => $max_mark[$i],                        'obtained'      => $obtained[$i],                        'created_on'    => date("Y-m-d H:i:s")                    );                }            if(!empty($detail_arr)){                $this->db->insert_batch('tbl_separate_transcript_details',$detail_arr);            }            return true;    }		public function get_student_profile_with_course(){	    $this->db->select('tbl_separate_student.*,tbl_course.print_name,tbl_stream.stream_name');		$this->db->where('tbl_separate_student.enrollment_number',$this->uri->segment(2));		$this->db->join('tbl_course','tbl_course.id = tbl_separate_student.course_id');		$this->db->join('tbl_stream','tbl_stream.id = tbl_separate_student.stream_id');		$result = $this->db->get('tbl_separate_student');		return $result->row();	}		public function get_single_transcript(){	    $this->db->select("tbl_separate_transcript.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_course.print_name,tbl_stream.stream_name");		$this->db->where('tbl_separate_transcript.is_deleted','0');		$this->db->where('tbl_separate_transcript.status','1');		$this->db->where('tbl_separate_transcript.id',$this->uri->segment(2));  		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_transcript.registration_id");		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id");		$result = $this->db->get('tbl_separate_transcript');		return $result->row();	}	public function get_single_transcript_details(){ 		// echo "<pre>";print_r($this->uri->segment(2));exit;		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('transcript_id',$this->uri->segment(2));    		$result = $this->db->get('tbl_separate_transcript_details');		return $result->result();	}	public function get_single_transcript_subjects($id){ 		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('student_id',$id);    		$result = $this->db->get('tbl_separate_student_exam_results')->result();		$subjects = array();		if(!empty($result)){			foreach($result as $result_data){				$subjects[] = $this->get_separate_student_transcript_subjects($result_data->id,$result_data->year_sem);			}		}		return $subjects;	}	public function get_separate_student_transcript_subjects($id,$year_sem){		$this->db->select('tbl_separate_student_examination_result_details.*,tbl_subject.subject_name,tbl_subject.subject_type');		$this->db->join('tbl_subject','tbl_subject.id = tbl_separate_student_examination_result_details.subject_id','left');		$this->db->where('tbl_separate_student_examination_result_details.is_deleted','0');		$this->db->where('tbl_separate_student_examination_result_details.status','1');		$this->db->where('tbl_separate_student_examination_result_details.result_id',$id);    		$result_set = $this->db->get('tbl_separate_student_examination_result_details')->result();		$result = array();		foreach ($result_set as $row) {			$row->sem = $year_sem;			$result[] = $row;		}		return $result;	}	public function update_transcript(){	    $data = array(                 'course_duration'   => $this->input->post('duration_of_course'),                'year_of_passing'   => $this->input->post('year_of_passing'),                 'issue_date'   		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),             );            $this->db->where('id',$this->input->post('id'));            $this->db->update('tbl_separate_transcript',$data);                        $this->db->where('transcript_id',$this->input->post('id'));            $this->db->delete('tbl_separate_transcript_details');                      $sem = $this->input->post('sem');            $subject = $this->input->post('subject');            $type = $this->input->post('type');            $max_mark = $this->input->post('max_mark');            $obtained = $this->input->post('obtained');				if(is_array($sem) && !empty($sem)) {            $detail_arr = array();            for($i=0; $i<count($sem); $i++){                $detail_arr[] = array(                        'transcript_id' => $this->input->post('id'),                        'sem'           => $sem[$i],                        'subject'       => $subject[$i],                        'type'          => $type[$i],                        'max_mark'      => $max_mark[$i],                        'obtained'      => $obtained[$i],                        'created_on'    => date("Y-m-d H:i:s")                    );                }            if(!empty($detail_arr)){                $this->db->insert_batch('tbl_separate_transcript_details',$detail_arr);            }		}else{			return false;		}            return true;	}	public function update_transcript_payment(){	    $data = array(             'transaction_id'   	=> $this->input->post('transaction_id'),            'payment_date'   	=> date("Y-m-d",strtotime($this->input->post('payment_date'))),             'payment_mode'   	=> $this->input->post('payment_mode'), 			'bank_id'   		=> $this->input->post('bank'),             'amount'   			=> $this->input->post('amount'),            'payment_status'   	=> $this->input->post('payment_status'),			'signature_id'		=> $this->input->post('signature'),        );        $this->db->where('id',$this->input->post('id'));        $this->db->update('tbl_separate_transcript',$data);        return true;	}	public function get_new_separate_thesis_list($length,$start,$search){		$this->db->where('is_deleted', '0');		$this->db->where('thesis_status', '2');		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('thesis_title',$search);			$this->db->or_like('paper_journal1',$search);			$this->db->or_like('softcopy',$search);		}		$this->db->order_by('id','DESC');		$this->db->limit($length,$start); 		$result = $this->db->get('tbl_seprate_thesis');		return $result->result();	}	public function get_new_separate_thesis_list_count($search){		$this->db->where('is_deleted', '0');		$this->db->where('thesis_status', '2'); 		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('thesis_title',$search);			$this->db->or_like('paper_journal1',$search);			$this->db->or_like('softcopy',$search);			$this->db->group_end();		}		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_seprate_thesis');		return $result->num_rows();	}	public function get_single_separate_thesis(){		$this->db->where('is_deleted', '0'); 		$this->db->where('status', '1');		$result = $this->db->get('tbl_seprate_thesis');		return $result->row();	}		public function get_active_separate_guide_list(){		$this->db->where('is_deleted', '0'); 		$this->db->where('status', '1');		$this->db->where('appliation_status','1');		$result = $this->db->get('tbl_guide_application');		return $result->result();	}	public function get_update_separate_thesis($file1){		if($file1 == ""){			$file1 = $this->input->post("softcopy");		}		$data = array(			'thesis_title'	  =>$this->input->post('thesis_title'),			'paper_journal1'  =>$this->input->post('paper_journal1'),			'softcopy'        =>$file1,			'guide_id'        =>$this->input->post('guide_name'),			'thesis_status'        =>$this->input->post('thesis_status'),			'remarks'        =>$this->input->post('remarks'),			'submission_date' =>date("Y-m-d",strtotime($this->input->post('submission_date'))),							);		$this->db->where('id',$this->input->post('id'));		$this->db->update('tbl_seprate_thesis',$data);		return 1;	}	public function get_separate_complete_thesis_list($length,$start,$search){		$this->db->where('is_deleted', '0'); 		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('thesis_title',$search);			$this->db->or_like('paper_journal1',$search);			$this->db->or_like('softcopy',$search);		}		$this->db->order_by('id','DESC');		$this->db->limit($length,$start);		$this->db->where('thesis_status','0');		$result = $this->db->get('tbl_seprate_thesis');		return $result->result();	}	public function get_separate_complete_thesis_list_count($search){		$this->db->where('is_deleted', '0'); 		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('thesis_title',$search);			$this->db->or_like('paper_journal1',$search);			$this->db->or_like('softcopy',$search);			$this->db->group_end();		}		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_seprate_thesis');		return $result->num_rows();	}	public function get_new_separate_synopsis_list($length,$start,$search){		$this->db->select('tbl_separate_synopsis.*,tbl_separate_student.enrollment_number');		$this->db->where('tbl_separate_synopsis.is_deleted', '0');		$this->db->where('tbl_separate_synopsis.synopsis_status', '2');		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('tbl_separate_synopsis.thesis_title',$search);			$this->db->or_like('tbl_separate_synopsis.soft_copy',$search);			$this->db->group_end();		}		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_synopsis.student_id');		$this->db->order_by('tbl_separate_synopsis.id','DESC');		$this->db->limit($length,$start); 		$result = $this->db->get('tbl_separate_synopsis');		return $result->result();	}	public function get_new_separate_synopsis_list_count($search){		$this->db->select('tbl_separate_synopsis.*,tbl_separate_student.enrollment_number');		$this->db->where('tbl_separate_synopsis.is_deleted', '0');		$this->db->where('tbl_separate_synopsis.synopsis_status', '2');		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('tbl_separate_synopsis.thesis_title',$search);			$this->db->or_like('tbl_separate_synopsis.soft_copy',$search);			$this->db->group_end();		} 		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_synopsis.student_id');		$result = $this->db->get('tbl_separate_synopsis');		return $result->num_rows();	}	public function get_single_separate_synopsis(){		$this->db->where('is_deleted', '0'); 		$this->db->where('status', '1');		$result = $this->db->get('tbl_separate_synopsis');		return $result->row();	}		public function get_active_separate_synopsis_guide_list(){		$this->db->where('is_deleted', '0'); 		$this->db->where('status', '1');		$this->db->where('appliation_status','1');		$result = $this->db->get('tbl_guide_application');		return $result->result();	}	public function get_update_separate_synopsis($file1){		if($file1 == ""){			$file1 = $this->input->post("soft_copy");		}		$data = array(			'thesis_title'	  =>$this->input->post('thesis_title'),			'soft_copy'        =>$file1,			'guide_id'        =>$this->input->post('guide'),			'synopsis_status'        =>$this->input->post('synopsis_status'),			'issue_date'=>date("Y-m-d",strtotime($this->input->post('issue_date'))),							);		$this->db->where('id',$this->input->post('id'));		$this->db->update('tbl_separate_synopsis',$data);		return 1;	}	public function get_separate_complete_synopsis_list($length,$start,$search){		$this->db->select('tbl_separate_synopsis.*,tbl_separate_student.enrollment_number');		$this->db->where('tbl_separate_synopsis.is_deleted', '0');		$this->db->where('tbl_separate_synopsis.synopsis_status !=', '2');		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('tbl_separate_synopsis.thesis_title',$search);			$this->db->or_like('tbl_separate_synopsis.soft_copy',$search);			$this->db->group_end();		}		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_synopsis.student_id');		$this->db->order_by('tbl_separate_synopsis.id','DESC');		$this->db->limit($length,$start); 		$result = $this->db->get('tbl_separate_synopsis');		return $result->result();	}	public function get_separate_complete_synopsis_list_count($search){		$this->db->select('tbl_separate_synopsis.*,tbl_separate_student.enrollment_number');		$this->db->where('tbl_separate_synopsis.is_deleted', '0');		$this->db->where('tbl_separate_synopsis.synopsis_status !=', '2');		if($search !=""){			$this->db->group_start(); 			$this->db->or_like('tbl_separate_synopsis.thesis_title',$search);			$this->db->or_like('tbl_separate_synopsis.soft_copy',$search);			$this->db->group_end();		}		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_synopsis.student_id');		$result = $this->db->get('tbl_separate_synopsis');		return $result->num_rows();	}	public function apply_separate_student_provisional_degrees(){ 		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			// 'status' 			=> $this->input->post('status'),			'signature_id' 		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		if($this->input->post('id') == ""){			$this->db->insert('tbl_separate_student_provisional_degree',$data);		}else{			$this->db->where('id',$this->input->post('id'));			$this->db->update('tbl_separate_student_provisional_degree',$data);		}		return true;	}	public function get_single_provisional_student(){		// echo "<pre>";print_r($this->uri->segment(2));exit;		$this->db->select('tbl_separate_student_provisional_degree.*,tbl_separate_student.enrollment_number,tbl_separate_student.student_name,tbl_separate_student.father_name');		$this->db->where('tbl_separate_student_provisional_degree.id',$this->uri->segment(2));		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id');		$result = $this->db->get('tbl_separate_student_provisional_degree');		return $result->row();	}  	public function get_student_details(){		$this->db->where('enrollment_number',$this->input->post('enrollment_number'));		$result = $this->db->get('tbl_separate_student');		echo json_encode($result->row()); 	}	public function get_single_migration_student(){		$this->db->select('tbl_separate_student_migration.*,tbl_separate_student.enrollment_number,tbl_separate_student.student_name,tbl_separate_student.father_name');		$this->db->where('tbl_separate_student_migration.id',$this->uri->segment(2));		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_student_migration.student_id');		$result = $this->db->get('tbl_separate_student_migration');		return $result->row();	}	public function set_migration_application(){ 		$data = array(			'student_id' 		=> $this->input->post('student_id'),			'migration_session' => $this->input->post('migration_session'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			// 'status' 			=> $this->input->post('status'),			'signature_id'		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		// echo "<pre>";print_r($data);exit;		if($this->input->post('id') == ""){			$this->db->insert('tbl_separate_student_migration',$data);		}else{			$this->db->where('id',$this->input->post('id'));			$this->db->update('tbl_separate_student_migration',$data);		}		return true;	}	public function get_single_transfer_student(){		// echo "<pre>";print_r($this->uri->segment(2));exit;		$this->db->select('tbl_separate_student_transfer.*,tbl_separate_student.enrollment_number,tbl_separate_student.student_name,tbl_separate_student.father_name');		$this->db->where('tbl_separate_student_transfer.id',$this->uri->segment(2));		$this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_student_transfer.student_id');		$result = $this->db->get('tbl_separate_student_transfer');		return $result->row();		// $result = $result->row();		// echo "<pre>";print_r($result);exit;	}		public function get_certificate_fees($type){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('certificate_type',$type);		$result = $this->db->get('tbl_certificate_fees_relation');		return $result->row();	}	public function set_transfer_application(){ 		$data = array(			'student_id' 		=> $this->input->post('student_id'),			// 'transfer_session' => $this->input->post('transfer_session'),			'transaction_id' 	=> $this->input->post('transaction_id'),			'amount' 			=> $this->input->post('amount'),			'issue_date' 		=> date("Y-m-d",strtotime($this->input->post('issue_date'))),			'payment_status' 	=> $this->input->post('payment_status'),			'approve_status' 	=> $this->input->post('approve_status'),			// 'status' 			=> $this->input->post('status'),			'signature_id'		=> $this->input->post('signature'),			'created_on'		=> date("Y-m-d H:i:s")		);		// echo "<pre>";print_r($data);exit;		if($this->input->post('id') == ""){			$this->db->insert('tbl_separate_student_transfer',$data);		}else{			$this->db->where('id',$this->input->post('id'));			$this->db->update('tbl_separate_student_transfer',$data);		}		return true;	}	 public function get_print_transcript($id){        $this->db->select('tbl_separate_transcript.*,tbl_separate_transcript_details.sem,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_course.print_name,tbl_stream.stream_name,tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature');        $this->db->where('tbl_separate_transcript.id',$id);        $this->db->where('tbl_separate_transcript.is_deleted','0');        $this->db->where('tbl_separate_transcript.status','1');        $this->db->where('tbl_separate_transcript.approve_status','1');        $this->db->join('tbl_separate_transcript_details','tbl_separate_transcript_details.transcript_id = tbl_separate_transcript.id');        $this->db->join('tbl_separate_student','tbl_separate_student.id = tbl_separate_transcript.registration_id');        $this->db->join('tbl_course','tbl_course.id = tbl_separate_student.course_id');        $this->db->join('tbl_stream','tbl_stream.id = tbl_separate_student.stream_id');		$this->db->join('tbl_signature','tbl_signature.id = tbl_separate_transcript.signature_id','left');         $this->db->group_by('tbl_separate_transcript_details.sem');		$this->db->order_by('tbl_separate_transcript_details.sem','DESC');        $result = $this->db->get('tbl_separate_transcript');        return $result->row();    }	 public function get_this_transcript_subject($sem,$id){  		$this->db->where('sem',$sem);		$this->db->where('transcript_id',$id);		$this->db->order_by('type','DESC');		$result = $this->db->get('tbl_separate_transcript_details');		return $result->result(); 	}  	public function get_this_transcript_total($id){ 		$this->db->select('sum(obtained) as total_obt,sum(max_mark) as total_mk');		$this->db->where('transcript_id',$id);		$result = $this->db->get('tbl_separate_transcript_details');		return $result->row(); 	}	public function get_migration_certificate($id){		$this->db->select("tbl_separate_student_migration.*,tbl_stream.stream_name,tbl_separate_student.student_name,tbl_separate_student.year_sem,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_course.course_name,tbl_course.sort_name,tbl_session.session_start_date,tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature");		$this->db->where("tbl_separate_student_migration.is_deleted","0");		$this->db->where('tbl_separate_student_migration.payment_status',"1");		$this->db->where("tbl_separate_student_migration.id",$id);		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_migration.student_id");		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id"); 		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id"); 		$this->db->join("tbl_session","tbl_session.id = tbl_separate_student.session_id"); 		$this->db->join("tbl_signature","tbl_signature.id = tbl_separate_student_migration.signature_id","left");		$result = $this->db->get("tbl_separate_student_migration")->row();		return $result;	}	public function sent_transcript_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_separate_transcript',$data);			}		}		return true;	}	public function sent_provisional_degrees_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_separate_student_provisional_degree',$data);			}		}		return true;	}	public function get_provisional_degrees_for_print($id){ 		$this->db->select("tbl_separate_student_provisional_degree.*,tbl_separate_student.course_id,tbl_separate_student.student_name,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_session.session_start_date,tbl_course.course_name,tbl_course.print_name,tbl_stream.stream_name");		$this->db->where("tbl_separate_student_provisional_degree.is_deleted","0");		$this->db->where("tbl_separate_student_provisional_degree.payment_status","1"); 		$this->db->where("tbl_separate_student_provisional_degree.id",$id); 		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_provisional_degree.student_id");		$this->db->join("tbl_session","tbl_session.id = tbl_separate_student.session_id"); 		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id"); 		$result = $this->db->get("tbl_separate_student_provisional_degree");		$result = $result->row();		return $result;		if(!empty($result)){ 			$result->bg_image = $this->Digitalocean_model->get_photo('images/new_marksheet-without.jpeg');			$result->top_logo = $this->Digitalocean_model->get_photo('images/only-logo.png');						$result->seal = $this->Digitalocean_model->get_photo('images/btu-seal.png');			$result->logo = $this->Digitalocean_model->get_photo('images/logo.png');		}		$data = array(			'sent_for_print' => '0'		);		$this->db->where('id',$this->input->post('id'));		$this->db->update('tbl_separate_student_provisional_degree',$data);		echo json_encode($result);	}	public function get_print_division_for_degree($student,$course_id){		$_GET = $_POST;		if($course_id != "23"){			$this->db->select("examination_year,internal_max_marks,internal_marks_obtained,external_max_marks,external_marks_obtained,created_on");			$this->db->where("is_deleted","0");			$this->db->where("status","1");			$this->db->where("result","0");			$this->db->where("student_id",$student);			$this->db->order_by("year_sem","DESC");			$result = $this->db->get("tbl_separate_student_exam_results")->result(); 			$total_marks = 0;			$gained_marks = 0;			foreach($result as $res){				$total_marks = $total_marks + $res->internal_max_marks + $res->external_max_marks;				$gained_marks = $gained_marks + $res->internal_marks_obtained + $res->external_marks_obtained;			}					$percentage = $total_marks == 0?0:($gained_marks/$total_marks)*100;			if($percentage >= 60){				$data["division"] = "First Division";			}else if($percentage < 60 & $percentage>= 45){				$data["division"] = "Second Division";			}else{				$data["division"] = "Third Division";			}			$data["date"] = $result[0]->examination_year;			return $data;		}else{			 		}	}	public function sent_student_degrees_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_separate_student_degree',$data);			}		}		return true;	}	public function sent_recommendation_letters_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_separate_student_recommendation_letter',$data);			}		}		return true;	}	public function sent_transfer_certificate_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_separate_student_transfer',$data);			}		}		return true;	}	public function sent_migration_certificates_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_separate_student_migration',$data);			}		}		return true;	}	public function sent_consolidate_certificates_for_print(){ 		$ids = $this->input->post('ids'); 		if(!empty($ids)){			for($i=0;$i<count($ids);$i++){				$data = array(					'sent_for_print' => '1',				);				$this->db->where('id',$ids[$i]);				$this->db->update('tbl_consolidated_marksheet_separate_student',$data);			}		}		return true;	}	public function get_trans_subject($year,$id,$enrollment){		$this->db->select('tbl_separate_student_examination_result_details.*,tbl_subject.subject_type,tbl_subject.subject_code,tbl_subject.subject_name,tbl_separate_student_exam_results.year_sem');		$this->db->where('tbl_separate_student_exam_results.student_id',$id);		$this->db->where('tbl_separate_student_exam_results.year_sem',$year);		$this->db->where('tbl_separate_student_exam_results.is_deleted','0');		$this->db->where('tbl_separate_student_examination_result_details.is_deleted','0');		$this->db->where('tbl_separate_student_examination_result_details.status','1');		$this->db->join('tbl_separate_student_exam_results','tbl_separate_student_exam_results.id = tbl_separate_student_examination_result_details.result_id');		$this->db->join('tbl_subject','tbl_subject.id = tbl_separate_student_examination_result_details.subject_id');		$this->db->order_by('tbl_subject.subject_code','ASC');		$result = $this->db->get('tbl_separate_student_examination_result_details');		return $result->result();	}	//letters seperate student 25 july	public function get_student_id($enrollment){		$this->db->where('enrollment_number',$enrollment);		$result = $this->db->get('tbl_separate_student')->row();		if($result != ""){			return $result->id;		}else{			return "";		}	}	public function get_student_info_ajax(){		$this->db->select('student_name,email,mobile');		$this->db->where('is_deleted','0');		$this->db->where('enrollment_number',$this->input->post('enrollment_no'));		$resullt = $this->db->get('tbl_separate_student');		echo json_encode($resullt->row());	}	public function get_single_bona_application(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->row();	}	public function get_single_bona_application_new(){		$this->db->select("tbl_bonafide_cer_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_bonafide_cer_application_blended.enrollment_no");		$this->db->where('tbl_bonafide_cer_application_blended.is_deleted','0');		$this->db->where('tbl_bonafide_cer_application_blended.status','1');		$this->db->where('tbl_bonafide_cer_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->row();	}	public function student_apply_bonafide_cer(){		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			'amount'			=>	'1000',			'application_date' 	=> date("Y-m-d"),				'created_on' 		=> date("Y-m-d H:i:s"),		);		if($this->input->post('old_id') == ""){			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_bonafide_cer_application_blended',$new_arr);			return 0;		}else{			$this->db->where('id',$this->input->post('old_id'));			$this->db->update('tbl_bonafide_cer_application_blended',$data);			return 1;		}	} 	public function get_all_bona_application(){		$this->db->where('is_deleted','0');		// $this->db->where('status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->result();	}	public function get_all_req_bonafide_list($length,$start,$search){		$this->db->select("tbl_bonafide_cer_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_bonafide_cer_application_blended.is_deleted','0');		$this->db->where('tbl_bonafide_cer_application_blended.status','1');		// $this->db->where('tbl_bonafide_cer_application_blended.application_status','0');			$this->db->group_start();		$this->db->where('tbl_bonafide_cer_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_bonafide_cer_application_blended.approve_status', '0');		$this->db->or_where('tbl_bonafide_cer_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_bonafide_cer_application_blended.payment_status', '1');		$this->db->where('tbl_bonafide_cer_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_bonafide_cer_application_blended.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->result();			}	public function get_all_req_bonafide_list_count($search){		$this->db->select("tbl_bonafide_cer_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_bonafide_cer_application_blended.is_deleted','0');		$this->db->where('tbl_bonafide_cer_application_blended.status','1');		// $this->db->where('tbl_bonafide_cer_application_blended.application_status','0');			$this->db->group_start();		$this->db->where('tbl_bonafide_cer_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_bonafide_cer_application_blended.approve_status', '0');		$this->db->or_where('tbl_bonafide_cer_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_bonafide_cer_application_blended.payment_status', '1');		$this->db->where('tbl_bonafide_cer_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_bonafide_cer_application_blended.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_blended.id','DESC');		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->num_rows();	}	public function approve_bona_application(){		$data = array(			'application_status'=>	'1',			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_bonafide_cer_application_blended',$data);		return true;	}	public function update_payment_bonafide(){		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status' 	=> 	$this->input->post('approve_status'),  			'signature_id' 		=> 	$this->input->post('signature'),  		);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_bonafide_cer_application_blended',$data);		return true;	}	public function disapprove_bona_application(){		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status'=>	'0',			'disapproval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_bonafide_cer_application_blended',$data);		return true;	}	public function student_approved_bonafide_cer(){		$this->db->where('is_deleted','0');		$this->db->where('application_status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->result();	}	public function get_all_approve_bonafide_list($length,$start,$search){		$this->db->select("tbl_bonafide_cer_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_bonafide_cer_application_blended.is_deleted','0');		$this->db->where('tbl_bonafide_cer_application_blended.status','1');		// $this->db->where('tbl_bonafide_cer_application_blended.application_status','1');		$this->db->where('tbl_bonafide_cer_application_blended.payment_status','1');				$this->db->where('tbl_bonafide_cer_application_blended.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_bonafide_cer_application_blended.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->result();			}	public function get_all_approve_bonafide_list_count($search){		$this->db->select("tbl_bonafide_cer_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_bonafide_cer_application_blended.is_deleted','0');		$this->db->where('tbl_bonafide_cer_application_blended.status','1');		// $this->db->where('tbl_bonafide_cer_application_blended.application_status','1');			$this->db->where('tbl_bonafide_cer_application_blended.payment_status','1');				$this->db->where('tbl_bonafide_cer_application_blended.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_bonafide_cer_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_bonafide_cer_application_blended.enrollment_no");		$this->db->order_by('tbl_bonafide_cer_application_blended.id','DESC');		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->num_rows();	}	public function get_single_bona_application_print(){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,,tbl_bonafide_cer_application_blended.*,tbl_separate_student.father_name,tbl_separate_student.gender,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile,tbl_separate_student.session_id,tbl_separate_student.course_id,tbl_separate_student.stream_id");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_bonafide_cer_application_blended.enrollment_no");		$this->db->join("tbl_signature","tbl_signature.id = tbl_bonafide_cer_application_blended.signature_id","left");		$this->db->where('tbl_bonafide_cer_application_blended.is_deleted','0');		$this->db->where('tbl_bonafide_cer_application_blended.status','1');		$this->db->where('tbl_bonafide_cer_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_bonafide_cer_application_blended');		return $result->row();	}	//medium of recc	public function get_single_inst_medium_letter_application(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->row();	}	public function get_single_inst_medium_letter_application_new(){		$this->db->select("tbl_medium_instruction_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_medium_instruction_application_blended.enrollment_no");		$this->db->where('tbl_medium_instruction_application_blended.is_deleted','0');		$this->db->where('tbl_medium_instruction_application_blended.status','1');		$this->db->where('tbl_medium_instruction_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->row();	}	public function student_apply_inst_medium_letter(){		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			'amount'			=>	'1000',			'application_date' 	=> date("Y-m-d"),				'created_on' 		=> date("Y-m-d H:i:s"),		);		if($this->input->post('old_id') == ""){			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_medium_instruction_application_blended',$new_arr);			return 0;		}else{			$this->db->where('id',$this->input->post('old_id'));			$this->db->update('tbl_medium_instruction_application_blended',$data);			return 1;		}	} 	public function get_all_inst_medium_application(){		$this->db->where('is_deleted','0');		// $this->db->where('status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->result();	}	public function get_all_req_inst_medium_list($length,$start,$search){		$this->db->select("tbl_medium_instruction_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_medium_instruction_application_blended.is_deleted','0');		$this->db->where('tbl_medium_instruction_application_blended.status','1');		// $this->db->where('tbl_medium_instruction_application_blended.application_status','0');					$this->db->group_start();		$this->db->where('tbl_medium_instruction_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_medium_instruction_application_blended.approve_status', '0');		$this->db->or_where('tbl_medium_instruction_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_medium_instruction_application_blended.payment_status', '1');		$this->db->where('tbl_medium_instruction_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_medium_instruction_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_medium_instruction_application_blended.enrollment_no");		$this->db->order_by('tbl_medium_instruction_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->result();			}	public function get_all_req_inst_medium_list_count($search){		$this->db->select("tbl_medium_instruction_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_medium_instruction_application_blended.is_deleted','0');		$this->db->where('tbl_medium_instruction_application_blended.status','1');		// $this->db->where('tbl_medium_instruction_application_blended.application_status','0');			$this->db->group_start();		$this->db->where('tbl_medium_instruction_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_medium_instruction_application_blended.approve_status', '0');		$this->db->or_where('tbl_medium_instruction_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_medium_instruction_application_blended.payment_status', '1');		$this->db->where('tbl_medium_instruction_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_medium_instruction_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_medium_instruction_application_blended.enrollment_no");		$this->db->order_by('tbl_medium_instruction_application_blended.id','DESC');		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->num_rows();	}	public function update_payment_inst_medium(){		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'),			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_medium_instruction_application_blended',$data);		return true;	}	public function approve_inst_medium_application(){		$data = array(			'application_status'=>	'1',			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_medium_instruction_application_blended',$data);		return true;	}	public function disapprove_inst_medium_application(){		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status'=>	'0',			'disapproval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_medium_instruction_application_blended',$data);		return true;	}	public function student_approved_inst_medium_letter(){		$this->db->where('is_deleted','0');		$this->db->where('application_status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->result();	}	public function get_all_approve_inst_medium_list($length,$start,$search){		$this->db->select("tbl_medium_instruction_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_medium_instruction_application_blended.is_deleted','0');		$this->db->where('tbl_medium_instruction_application_blended.status','1');		// $this->db->where('tbl_medium_instruction_application_blended.application_status','1');				$this->db->where('tbl_medium_instruction_application_blended.payment_status','1');				$this->db->where('tbl_medium_instruction_application_blended.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_medium_instruction_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_medium_instruction_application_blended.enrollment_no");		$this->db->order_by('tbl_medium_instruction_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->result();			}	public function get_all_approve_inst_medium_list_count($search){		$this->db->select("tbl_medium_instruction_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_medium_instruction_application_blended.is_deleted','0');		$this->db->where('tbl_medium_instruction_application_blended.status','1');		// $this->db->where('tbl_medium_instruction_application_blended.application_status','1');			$this->db->where('tbl_medium_instruction_application_blended.payment_status','1');				$this->db->where('tbl_medium_instruction_application_blended.approve_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_medium_instruction_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_medium_instruction_application_blended.enrollment_no");		$this->db->order_by('tbl_medium_instruction_application_blended.id','DESC');		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->num_rows();	}	public function get_single_inst_medium_print(){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_medium_instruction_application_blended.*,tbl_separate_student.father_name,tbl_separate_student.gender,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile,tbl_separate_student.session_id,tbl_separate_student.course_id,tbl_separate_student.stream_id");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_medium_instruction_application_blended.enrollment_no");		$this->db->join("tbl_signature","tbl_signature.id = tbl_medium_instruction_application_blended.signature_id","left");		$this->db->where('tbl_medium_instruction_application_blended.is_deleted','0');		$this->db->where('tbl_medium_instruction_application_blended.status','1');		$this->db->where('tbl_medium_instruction_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_medium_instruction_application_blended');		return $result->row();	}	public function get_single_no_backlog_letter_application(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->row();	}	public function get_single_no_backlog_application_new(){		$this->db->select("tbl_no_backlog_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_backlog_application_blended.enrollment_no");		$this->db->where('tbl_no_backlog_application_blended.is_deleted','0');		$this->db->where('tbl_no_backlog_application_blended.status','1');		$this->db->where('tbl_no_backlog_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->row();	}	public function student_apply_no_backlog_letter(){		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			'amount'			=>	'1000',			'application_date' 	=> date("Y-m-d"),				'created_on' 		=> date("Y-m-d H:i:s"),		);		if($this->input->post('old_id') == ""){			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_no_backlog_application_blended',$new_arr);			return 0;		}else{			$this->db->where('id',$this->input->post('old_id'));			$this->db->update('tbl_no_backlog_application_blended',$data);			return 1;		}	} 	public function get_all_no_backlog_application(){		$this->db->where('is_deleted','0');		// $this->db->where('status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->result();	}	public function get_all_req_no_backlog_list($length,$start,$search){		$this->db->select("tbl_no_backlog_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_backlog_application_blended.is_deleted','0');		$this->db->where('tbl_no_backlog_application_blended.status','1');		// $this->db->where('tbl_no_backlog_application_blended.application_status','0');					$this->db->group_start();		$this->db->where('tbl_no_backlog_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_no_backlog_application_blended.approve_status', '0');		$this->db->or_where('tbl_no_backlog_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_no_backlog_application_blended.payment_status', '1');		$this->db->where('tbl_no_backlog_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_backlog_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_backlog_application_blended.enrollment_no");		$this->db->order_by('tbl_no_backlog_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->result();			}	public function get_all_req_no_backlog_list_count($search){		$this->db->select("tbl_no_backlog_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_backlog_application_blended.is_deleted','0');		$this->db->where('tbl_no_backlog_application_blended.status','1');		// $this->db->where('tbl_no_backlog_application_blended.application_status','0');			$this->db->group_start();		$this->db->where('tbl_no_backlog_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_no_backlog_application_blended.approve_status', '0');		$this->db->or_where('tbl_no_backlog_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_no_backlog_application_blended.payment_status', '1');		$this->db->where('tbl_no_backlog_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_backlog_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_backlog_application_blended.enrollment_no");		$this->db->order_by('tbl_no_backlog_application_blended.id','DESC');		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->num_rows();	}	public function approve_no_backlog_application(){		$data = array(			'application_status'=>	'1',			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_no_backlog_application_blended',$data);		return true;	}	public function update_payment_no_backlog(){		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'), 		);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_no_backlog_application_blended',$data);		return true;	}	public function disapprove_no_backlog_application(){		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status'=>	'0',			'disapproval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_no_backlog_application_blended',$data);		return true;	}	public function student_approved_no_backlog_letter(){		$this->db->where('is_deleted','0');		$this->db->where('application_status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->result();	}	public function get_all_approve_no_backlog_list($length,$start,$search){		$this->db->select("tbl_no_backlog_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_backlog_application_blended.is_deleted','0');		$this->db->where('tbl_no_backlog_application_blended.status','1');		// $this->db->where('tbl_no_backlog_application_blended.application_status','1');			$this->db->where('tbl_no_backlog_application_blended.payment_status','1');			$this->db->where('tbl_no_backlog_application_blended.approve_status','1');			if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_backlog_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_backlog_application_blended.enrollment_no");		$this->db->order_by('tbl_no_backlog_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->result();			}	public function get_all_approve_no_backlog_list_count($search){		$this->db->select("tbl_no_backlog_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_backlog_application_blended.is_deleted','0');		$this->db->where('tbl_no_backlog_application_blended.status','1');		// $this->db->where('tbl_no_backlog_application_blended.application_status','1');			$this->db->where('tbl_no_backlog_application_blended.payment_status','1');			$this->db->where('tbl_no_backlog_application_blended.approve_status','1');			if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_backlog_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_backlog_application_blended.enrollment_no");		$this->db->order_by('tbl_no_backlog_application_blended.id','DESC');		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->num_rows();	}	public function get_single_no_backlog_print(){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_no_backlog_application_blended.*,tbl_separate_student.father_name,tbl_separate_student.gender,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile,tbl_separate_student.session_id,tbl_separate_student.course_id,tbl_separate_student.stream_id");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_backlog_application_blended.enrollment_no");		$this->db->join("tbl_signature","tbl_signature.id = tbl_no_backlog_application_blended.signature_id","left");		$this->db->where('tbl_no_backlog_application_blended.is_deleted','0');		$this->db->where('tbl_no_backlog_application_blended.status','1');		$this->db->where('tbl_no_backlog_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_no_backlog_application_blended');		return $result->row();	}	//no split	public function get_single_no_split_letter_application(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_no_split_application_blended');		return $result->row();	}	public function get_single_no_split_application_new(){		$this->db->select("tbl_no_split_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_split_application_blended.enrollment_no");		$this->db->where('tbl_no_split_application_blended.is_deleted','0');		$this->db->where('tbl_no_split_application_blended.status','1');		$this->db->where('tbl_no_split_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_no_split_application_blended');		return $result->row();	}	public function student_apply_no_split_letter(){		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			'amount'			=>	'1000',			'application_date' 	=> date("Y-m-d"),				'created_on' 		=> date("Y-m-d H:i:s"),		);		if($this->input->post('old_id') == ""){			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_no_split_application_blended',$new_arr);			return 0;		}else{			$this->db->where('id',$this->input->post('old_id'));			$this->db->update('tbl_no_split_application_blended',$data);			return 1;		}	} 	public function get_all_no_split_application(){		$this->db->where('is_deleted','0');		// $this->db->where('status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_no_split_application_blended');		return $result->result();	}	public function get_all_req_no_split_list($length,$start,$search){		$this->db->select("tbl_no_split_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_split_application_blended.is_deleted','0');		$this->db->where('tbl_no_split_application_blended.status','1');		// $this->db->where('tbl_no_split_application_blended.application_status','0');							$this->db->group_start();		$this->db->where('tbl_no_split_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_no_split_application_blended.approve_status', '0');		$this->db->or_where('tbl_no_split_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_no_split_application_blended.payment_status', '1');		$this->db->where('tbl_no_split_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_split_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_split_application_blended.enrollment_no");		$this->db->order_by('tbl_no_split_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_no_split_application_blended');		return $result->result();			}	public function get_all_req_no_split_list_count($search){		$this->db->select("tbl_no_split_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_split_application_blended.is_deleted','0');		$this->db->where('tbl_no_split_application_blended.status','1');		// $this->db->where('tbl_no_split_application_blended.application_status','0');			$this->db->group_start();		$this->db->where('tbl_no_split_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_no_split_application_blended.approve_status', '0');		$this->db->or_where('tbl_no_split_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_no_split_application_blended.payment_status', '1');		$this->db->where('tbl_no_split_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_split_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_split_application_blended.enrollment_no");		$this->db->order_by('tbl_no_split_application_blended.id','DESC');		$result = $this->db->get('tbl_no_split_application_blended');		return $result->num_rows();	}	public function approve_no_split_application(){		$data = array(			'application_status'=>	'1',			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_no_split_application_blended',$data);		return true;	}	public function update_payment_no_split(){		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'), 		);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_no_split_application_blended',$data);		return true;	}	public function disapprove_no_split_application(){		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status'=>	'0',			'disapproval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_no_split_application_blended',$data);		return true;	}	public function student_approved_no_split_letter(){		$this->db->where('is_deleted','0');		$this->db->where('application_status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_no_split_application_blended');		return $result->result();	}	public function get_all_approve_no_split_list($length,$start,$search){		$this->db->select("tbl_no_split_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_split_application_blended.is_deleted','0');		$this->db->where('tbl_no_split_application_blended.status','1');		// $this->db->where('tbl_no_split_application_blended.application_status','1');			$this->db->where('tbl_no_split_application_blended.payment_status','1');				$this->db->where('tbl_no_split_application_blended.approve_status','1');								if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_split_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_split_application_blended.enrollment_no");		$this->db->order_by('tbl_no_split_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_no_split_application_blended');		return $result->result();			}	public function get_all_approve_no_split_list_count($search){		$this->db->select("tbl_no_split_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_no_split_application_blended.is_deleted','0');		$this->db->where('tbl_no_split_application_blended.status','1');		// $this->db->where('tbl_no_split_application_blended.application_status','1');		$this->db->where('tbl_no_split_application_blended.payment_status','1');				$this->db->where('tbl_no_split_application_blended.approve_status','1');							if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_no_split_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_split_application_blended.enrollment_no");		$this->db->order_by('tbl_no_split_application_blended.id','DESC');		$result = $this->db->get('tbl_no_split_application_blended');		return $result->num_rows();	}	public function get_single_no_split_print(){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_no_split_application_blended.*,tbl_separate_student.father_name,tbl_separate_student.gender,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile,tbl_separate_student.session_id,tbl_separate_student.course_id,tbl_separate_student.stream_id");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_no_split_application_blended.enrollment_no");		$this->db->join("tbl_signature","tbl_signature.id = tbl_no_split_application_blended.signature_id","left");		$this->db->where('tbl_no_split_application_blended.is_deleted','0');		$this->db->where('tbl_no_split_application_blended.status','1');		$this->db->where('tbl_no_split_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_no_split_application_blended');		return $result->row();	}	//reccom	public function get_single_reccom_letter_application(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->row();	}	public function get_single_reccom_application_new(){		$this->db->select("tbl_reccom_letter_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_reccom_letter_application_blended.enrollment_no");		$this->db->where('tbl_reccom_letter_application_blended.is_deleted','0');		$this->db->where('tbl_reccom_letter_application_blended.status','1');		$this->db->where('tbl_reccom_letter_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->row();	}	public function student_apply_reccom_letter(){		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			'amount'			=>	'1000',			'application_date' 	=> date("Y-m-d"),			'created_on' 		=> date("Y-m-d H:i:s"),			);		if($this->input->post('old_id') == ""){			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_reccom_letter_application_blended',$new_arr);			return 0;		}else{			$this->db->where('id',$this->input->post('old_id'));			$this->db->update('tbl_reccom_letter_application_blended',$data);			return 1;		}	} 	public function get_all_reccom_application(){		$this->db->where('is_deleted','0');		// $this->db->where('status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->result();	}	public function get_all_req_reccom_list($length,$start,$search){		$this->db->select("tbl_reccom_letter_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_reccom_letter_application_blended.is_deleted','0');		$this->db->where('tbl_reccom_letter_application_blended.status','1');		// $this->db->where('tbl_reccom_letter_application_blended.application_status','0');				$this->db->group_start();		$this->db->where('tbl_reccom_letter_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_reccom_letter_application_blended.approve_status', '0');		$this->db->or_where('tbl_reccom_letter_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_reccom_letter_application_blended.payment_status', '1');		$this->db->where('tbl_reccom_letter_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_reccom_letter_application_blended.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->result();			}	public function get_all_req_reccom_list_count($search){		$this->db->select("tbl_reccom_letter_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_reccom_letter_application_blended.is_deleted','0');		$this->db->where('tbl_reccom_letter_application_blended.status','1');		// $this->db->where('tbl_reccom_letter_application_blended.application_status','0');				$this->db->group_start();		$this->db->where('tbl_reccom_letter_application_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_reccom_letter_application_blended.approve_status', '0');		$this->db->or_where('tbl_reccom_letter_application_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_reccom_letter_application_blended.payment_status', '1');		$this->db->where('tbl_reccom_letter_application_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_reccom_letter_application_blended.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_blended.id','DESC');		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->num_rows();	}	public function approve_reccom_application(){		$data = array(			'application_status'=>	'1',			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application_blended',$data);		return true;	}	public function update_payment_reccom(){		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'),  		);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application_blended',$data);		return true;	}	public function disapprove_reccom_application(){		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'application_status'=>	'0',			'disapproval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_reccom_letter_application_blended',$data);		return true;	}	public function student_approved_reccom_letter(){		$this->db->where('is_deleted','0');		$this->db->where('application_status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->result();	}	public function get_all_approve_reccom_list($length,$start,$search){		$this->db->select("tbl_reccom_letter_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_reccom_letter_application_blended.is_deleted','0');		$this->db->where('tbl_reccom_letter_application_blended.status','1');		// $this->db->where('tbl_reccom_letter_application_blended.application_status','1');			$this->db->where('tbl_reccom_letter_application_blended.payment_status','1');			$this->db->where('tbl_reccom_letter_application_blended.approve_status','1');			if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_reccom_letter_application_blended.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->result();			}	public function get_all_approve_reccom_list_count($search){		$this->db->select("tbl_reccom_letter_application_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_reccom_letter_application_blended.is_deleted','0');		$this->db->where('tbl_reccom_letter_application_blended.status','1');		// $this->db->where('tbl_reccom_letter_application_blended.application_status','1');			$this->db->where('tbl_reccom_letter_application_blended.payment_status','1');			$this->db->where('tbl_reccom_letter_application_blended.approve_status','1');			if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_reccom_letter_application_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_reccom_letter_application_blended.enrollment_no");		$this->db->order_by('tbl_reccom_letter_application_blended.id','DESC');		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->num_rows();	}	public function get_single_reccom_print(){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_reccom_letter_application_blended.*,tbl_separate_student.father_name,tbl_separate_student.gender,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile,tbl_separate_student.session_id,tbl_separate_student.course_id,tbl_separate_student.stream_id");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_reccom_letter_application_blended.enrollment_no");		$this->db->join("tbl_signature","tbl_signature.id = tbl_reccom_letter_application_blended.signature_id","left");		$this->db->where('tbl_reccom_letter_application_blended.is_deleted','0');		$this->db->where('tbl_reccom_letter_application_blended.status','1');		$this->db->where('tbl_reccom_letter_application_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_reccom_letter_application_blended');		return $result->row();	}	public function get_prev_application_checked_ajax(){		$this->db->where('enrollment_no',$this->input->post('enrollment_no'));		$this->db->where('is_deleted','0');    	$result = $this->db->get($this->input->post('table'));    	$result = $result->row();    	if(!empty($result)){    		echo '1';    	}else{    		echo '0';    	}	}	public function get_student_info_blended_ajax(){		$this->db->select('student_name,email,mobile');		$this->db->where('is_deleted','0');		$this->db->where('enrollment_number',$this->input->post('enrollment_no'));		$resullt = $this->db->get('tbl_separate_student');		echo json_encode($resullt->row());	}	public function get_all_signature(){ 		$this->db->where('signature_for','1');		$result = $this->db->get('tbl_signature');		return $result->result();	}	//character certificate 	public function get_single_character_certificate(){		$this->db->where('is_deleted','0');		$this->db->where('status','1');		$this->db->where('id',$this->uri->segment(2));		$result = $this->db->get('tbl_character_certificate_blended');		return $result->row();	}	public function get_single_character_certificate_new(){		$this->db->select("tbl_character_certificate_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_character_certificate_blended.enrollment_no");		$this->db->where('tbl_character_certificate_blended.is_deleted','0');		$this->db->where('tbl_character_certificate_blended.status','1');		$this->db->where('tbl_character_certificate_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_character_certificate_blended');		return $result->row();	}	public function student_apply_character_certificate(){		$data = array(			'student_id'	 	=> $this->get_student_id($this->input->post('enrollment_no')),			'enrollment_no' 	=> $this->input->post('enrollment_no'),			// 'amount'			=>	'1000',			'amount'			=>	$this->input->post('amount'),			'application_date' 	=> date("Y-m-d"),				'created_on' 		=> date("Y-m-d H:i:s"),		);		// echo "<pre>";print_r($data);exit;		if($this->input->post('old_id') == ""){			$date = array(				'created_on' => date("Y-m-d H:i:s")			);			$new_arr = array_merge($data,$date);			$this->db->insert('tbl_character_certificate_blended',$new_arr);			return 0;		}else{			$this->db->where('id',$this->input->post('old_id'));			$this->db->update('tbl_character_certificate_blended',$data);			return 1;		}	} 		public function get_all_character_certificate(){		$this->db->where('is_deleted','0');		// $this->db->where('status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_character_certificate_blended');		return $result->result();	}	public function get_all_character_certificate_list($length,$start,$search){		$this->db->select("tbl_character_certificate_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_character_certificate_blended.is_deleted','0');		$this->db->where('tbl_character_certificate_blended.status','1');		// $this->db->where('tbl_character_certificate_blended.approve_status','0');						$this->db->group_start();		$this->db->where('tbl_character_certificate_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_character_certificate_blended.approve_status', '0');		$this->db->or_where('tbl_character_certificate_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_character_certificate_blended.payment_status', '1');		$this->db->where('tbl_character_certificate_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_character_certificate_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_character_certificate_blended.enrollment_no");		$this->db->order_by('tbl_character_certificate_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_character_certificate_blended');		return $result->result();			}	public function get_all_req_character_certificate_list_count($search){		$this->db->select("tbl_character_certificate_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_character_certificate_blended.is_deleted','0');		$this->db->where('tbl_character_certificate_blended.status','1');		// $this->db->where('tbl_character_certificate_blended.approve_status','0');			$this->db->group_start();		$this->db->where('tbl_character_certificate_blended.payment_status', '0');		$this->db->group_start();		$this->db->where('tbl_character_certificate_blended.approve_status', '0');		$this->db->or_where('tbl_character_certificate_blended.approve_status', '1');		$this->db->group_end();		$this->db->or_group_start();		$this->db->where('tbl_character_certificate_blended.payment_status', '1');		$this->db->where('tbl_character_certificate_blended.approve_status', '0');		$this->db->group_end();		$this->db->group_end();		if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_character_certificate_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_character_certificate_blended.enrollment_no");		$this->db->order_by('tbl_character_certificate_blended.id','DESC');		$result = $this->db->get('tbl_character_certificate_blended');		return $result->num_rows();	}	public function approve_character_certificate(){		$data = array(			'approve_status'=>	'1',			'approval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_character_certificate_blended',$data);		return true;	}	public function update_payment_character_certificate(){		$data = array(			'transaction_id'	=>	$this->input->post('transaction_id'),			'transaction_mode'	=>	$this->input->post('transaction_mode'),			'amount'			=>	$this->input->post('amount'),			'payment_status'	=>	$this->input->post('payment_status'),			'approve_status'	=>	$this->input->post('approve_status'),			'signature_id' 		=> 	$this->input->post('signature'), 		);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_character_certificate_blended',$data);		return true;	}	public function disapprove_character_certificate(){		$data = array(			'disapprove_remark'	=>	$this->input->post('remark'),			'approve_status'=>	'0',			'disapproval_date' 	=> date("Y-m-d"),			);		$this->db->where('id',$this->uri->segment(2));		$this->db->update('tbl_character_certificate_blended',$data);		return true;	}	public function student_approved_character_certificate(){		$this->db->where('is_deleted','0');		$this->db->where('approve_status','1');		$this->db->order_by('id','DESC');		$result = $this->db->get('tbl_character_certificate_blended');		return $result->result();	}	public function get_all_approve_character_certificate_list($length,$start,$search){		$this->db->select("tbl_character_certificate_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_character_certificate_blended.is_deleted','0');		$this->db->where('tbl_character_certificate_blended.status','1');		$this->db->where('tbl_character_certificate_blended.approve_status','1');		$this->db->where('tbl_character_certificate_blended.payment_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_character_certificate_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_character_certificate_blended.enrollment_no");		$this->db->order_by('tbl_character_certificate_blended.id','DESC');		$this->db->limit($length,$start);		$result = $this->db->get('tbl_character_certificate_blended');		return $result->result();			}	public function get_all_approve_character_certificate_list_count($search){		$this->db->select("tbl_character_certificate_blended.*,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile");		$this->db->where('tbl_character_certificate_blended.is_deleted','0');		$this->db->where('tbl_character_certificate_blended.status','1');		$this->db->where('tbl_character_certificate_blended.approve_status','1');		$this->db->where('tbl_character_certificate_blended.payment_status','1');				if($search !=""){			$this->db->group_start();			$this->db->or_like('tbl_character_certificate_blended.enrollment_no',$search);			$this->db->group_end();		}		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_character_certificate_blended.enrollment_no");		$this->db->order_by('tbl_character_certificate_blended.id','DESC');		$result = $this->db->get('tbl_character_certificate_blended');		return $result->num_rows();	}	public function get_single_character_certificate_print(){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_character_certificate_blended.*,tbl_separate_student.father_name,tbl_separate_student.gender,tbl_separate_student.student_name,tbl_separate_student.enrollment_number,tbl_separate_student.email,tbl_separate_student.mobile,tbl_separate_student.session_id,tbl_separate_student.course_id,tbl_separate_student.stream_id");		$this->db->join("tbl_separate_student","tbl_separate_student.enrollment_number = tbl_character_certificate_blended.enrollment_no");		$this->db->join("tbl_signature","tbl_signature.id = tbl_character_certificate_blended.signature_id","left");			$this->db->where('tbl_character_certificate_blended.is_deleted','0');		$this->db->where('tbl_character_certificate_blended.status','1');		$this->db->where('tbl_character_certificate_blended.id',$this->uri->segment(2));		$result = $this->db->get('tbl_character_certificate_blended');		return $result->row();	}	public function get_degree_details_for_print($id){		$this->db->select("tbl_signature.name as signture_name,tbl_signature.dispalay_signature,tbl_signature.signature,tbl_chancellor_signature.name as chancellor_signture_name,tbl_chancellor_signature.dispalay_signature as display_chacellor_signature,tbl_chancellor_signature.signature as chancellor_signature,tbl_separate_student_degree.*,tbl_separate_student.student_name,tbl_separate_student.course_id,tbl_separate_student.stream_id,tbl_separate_student.father_name,tbl_separate_student.enrollment_number,tbl_separate_student.photo,tbl_session.session_start_date,tbl_course.course_name,tbl_course.print_name,tbl_stream.stream_name");		$this->db->where("tbl_separate_student_degree.is_deleted","0");		$this->db->where("tbl_separate_student_degree.payment_status","1");		$this->db->where("tbl_separate_student_degree.id",$id);  		$this->db->join("tbl_separate_student","tbl_separate_student.id = tbl_separate_student_degree.student_id");		$this->db->join("tbl_session","tbl_session.id = tbl_separate_student.session_id"); 		$this->db->join("tbl_course","tbl_course.id = tbl_separate_student.course_id");		$this->db->join("tbl_stream","tbl_stream.id = tbl_separate_student.stream_id"); 		$this->db->join("tbl_signature","tbl_signature.id = tbl_separate_student_degree.signature_id","left");			$this->db->join("tbl_signature as tbl_chancellor_signature","tbl_chancellor_signature.id = tbl_separate_student_degree.chancellor_signature_id","left");				$result = $this->db->get("tbl_separate_student_degree")->row();		return $result;	}		public function get_single_thesis(){		$this->db->where('is_deleted', '0'); 		$this->db->where('status', '1');		$result = $this->db->get('tbl_separate_synopsis');		return $result->row();	}				public function get_active_guide_list(){		$this->db->where('is_deleted', '0'); 		$this->db->where('status', '1');		$this->db->where('appliation_status','1');		$result = $this->db->get('tbl_guide_application');		return $result->result();	}	} 